
Timer_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004474  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00004474  00004508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  008000a2  008000a2  0000454a  2**0
                  ALLOC
  3 .stab         000057d8  00000000  00000000  0000454c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003c9c  00000000  00000000  00009d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000db00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000dc70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f8b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000107a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011554  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000116b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011941  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001210f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_1>
       8:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_2>
       c:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <main>
      8a:	0c 94 38 22 	jmp	0x4470	; 0x4470 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 22 	jmp	0x4452	; 0x4452 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 11 22 	jmp	0x4422	; 0x4422 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2d 22 	jmp	0x445a	; 0x445a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <T0_VoidInit>:
 */


#include "Timer0_Interface.h"
static void (*T0_pvCallBackfun)(void)=Null;
void T0_VoidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#elif T0_Type==T0_PhaseCorrect
	SET_BIT(TCCR0_Reg,TCCR0_WGM00);
	CLEAR_BIT(TCCR0_Reg,TCCR0_WGM01);
#elif T0_Type==T0_CTC
	/* Setting CTC Mode On */
CLEAR_BIT(TCCR0_Reg,TCCR0_WGM00);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
SET_BIT(TCCR0_Reg,TCCR0_WGM01);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

/* Enable T0 Interrupt */
SET_BIT(TIMSK_Reg,TIMSK_OCIE0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
CLEAR_BIT(TIMSK_Reg,TIMSK_TOIE0);
     b78:	a9 e5       	ldi	r26, 0x59	; 89
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e9 e5       	ldi	r30, 0x59	; 89
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8e 7f       	andi	r24, 0xFE	; 254
     b84:	8c 93       	st	X, r24

/* Set Compare Match Value */
OCR0_Reg=250;
     b86:	ec e5       	ldi	r30, 0x5C	; 92
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	8a ef       	ldi	r24, 0xFA	; 250
     b8c:	80 83       	st	Z, r24

/* Setting Prescaler 8 */
CLEAR_BIT(TCCR0_Reg,TCCR0_CS00);
     b8e:	a3 e5       	ldi	r26, 0x53	; 83
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e3 e5       	ldi	r30, 0x53	; 83
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	8c 93       	st	X, r24
SET_BIT(TCCR0_Reg,TCCR0_CS01);
     b9c:	a3 e5       	ldi	r26, 0x53	; 83
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e3 e5       	ldi	r30, 0x53	; 83
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	82 60       	ori	r24, 0x02	; 2
     ba8:	8c 93       	st	X, r24
CLEAR_BIT(TCCR0_Reg,TCCR0_CS02);
     baa:	a3 e5       	ldi	r26, 0x53	; 83
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e3 e5       	ldi	r30, 0x53	; 83
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8b 7f       	andi	r24, 0xFB	; 251
     bb6:	8c 93       	st	X, r24

#elif T0_Type==T0_FastPWM
SET_BIT(TCCR0_Reg,TCCR0_WGM00);
SET_BIT(TCCR0_Reg,TCCR0_WGM01);
#endif
}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <Timer0_u8SetCallBack>:
u8 Timer0_u8SetCallBack(void (*Copy_pvCallBackfun)(void)){
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <Timer0_u8SetCallBack+0x6>
     bc4:	0f 92       	push	r0
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
if(Copy_pvCallBackfun!=Null)
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	39 f0       	breq	.+14     	; 0xbe4 <Timer0_u8SetCallBack+0x26>
	T0_pvCallBackfun=Copy_pvCallBackfun;
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	90 93 a3 00 	sts	0x00A3, r25
     bde:	80 93 a2 00 	sts	0x00A2, r24
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <Timer0_u8SetCallBack+0x2a>
else
	/*Nothing*/
	return 1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	8b 83       	std	Y+3, r24	; 0x03
}
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <__vector_10>:
//ISR(TIMER0_COMP_VECT)
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	static u16 counter=0;
	counter++;
     c20:	80 91 a4 00 	lds	r24, 0x00A4
     c24:	90 91 a5 00 	lds	r25, 0x00A5
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	90 93 a5 00 	sts	0x00A5, r25
     c2e:	80 93 a4 00 	sts	0x00A4, r24
	if(counter==4000){
     c32:	80 91 a4 00 	lds	r24, 0x00A4
     c36:	90 91 a5 00 	lds	r25, 0x00A5
     c3a:	2f e0       	ldi	r18, 0x0F	; 15
     c3c:	80 3a       	cpi	r24, 0xA0	; 160
     c3e:	92 07       	cpc	r25, r18
     c40:	79 f4       	brne	.+30     	; 0xc60 <__vector_10+0x6a>
	if(T0_pvCallBackfun!=Null){
     c42:	80 91 a2 00 	lds	r24, 0x00A2
     c46:	90 91 a3 00 	lds	r25, 0x00A3
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	49 f0       	breq	.+18     	; 0xc60 <__vector_10+0x6a>
		T0_pvCallBackfun();
     c4e:	e0 91 a2 00 	lds	r30, 0x00A2
     c52:	f0 91 a3 00 	lds	r31, 0x00A3
     c56:	09 95       	icall
		counter=0;
     c58:	10 92 a5 00 	sts	0x00A5, r1
     c5c:	10 92 a4 00 	sts	0x00A4, r1
	}
	}
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	ff 91       	pop	r31
     c66:	ef 91       	pop	r30
     c68:	bf 91       	pop	r27
     c6a:	af 91       	pop	r26
     c6c:	9f 91       	pop	r25
     c6e:	8f 91       	pop	r24
     c70:	7f 91       	pop	r23
     c72:	6f 91       	pop	r22
     c74:	5f 91       	pop	r21
     c76:	4f 91       	pop	r20
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <SPI_voidInitSPIMaster>:
 *  Created on: Apr 8, 2023
 *      Author: Mazen
 */
#include "../DIO/DIO_Interface.h"
#include "SPI_Interface.h"
void SPI_voidInitSPIMaster(void){
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinDirection(PORT_B,PIN_5,DIO_OUT);
     c8e:	82 e4       	ldi	r24, 0x42	; 66
     c90:	65 e0       	ldi	r22, 0x05	; 5
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(PORT_B,PIN_6,DIO_IN);
     c98:	82 e4       	ldi	r24, 0x42	; 66
     c9a:	66 e0       	ldi	r22, 0x06	; 6
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(PORT_B,PIN_7,DIO_OUT);
     ca2:	82 e4       	ldi	r24, 0x42	; 66
     ca4:	67 e0       	ldi	r22, 0x07	; 7
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	/* Slave Select Pin */
	DIO_ErrStateSetPinDirection(PORT_A,PIN_7,DIO_OUT);
     cac:	81 e4       	ldi	r24, 0x41	; 65
     cae:	67 e0       	ldi	r22, 0x07	; 7
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	/* Prescaler 16  */
	SET_BIT(SPCR_Reg,0);
     cb6:	ad e2       	ldi	r26, 0x2D	; 45
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	ed e2       	ldi	r30, 0x2D	; 45
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
	/* CPH */
	SET_BIT(SPCR_Reg,2);
     cc4:	ad e2       	ldi	r26, 0x2D	; 45
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ed e2       	ldi	r30, 0x2D	; 45
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	84 60       	ori	r24, 0x04	; 4
     cd0:	8c 93       	st	X, r24
	/* CPOL */
	SET_BIT(SPCR_Reg,3);
     cd2:	ad e2       	ldi	r26, 0x2D	; 45
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ed e2       	ldi	r30, 0x2D	; 45
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	88 60       	ori	r24, 0x08	; 8
     cde:	8c 93       	st	X, r24
	/* Master Select */
	SET_BIT(SPCR_Reg,4);
     ce0:	ad e2       	ldi	r26, 0x2D	; 45
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ed e2       	ldi	r30, 0x2D	; 45
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	80 61       	ori	r24, 0x10	; 16
     cec:	8c 93       	st	X, r24
	/* LSB */
	SET_BIT(SPCR_Reg,5);
     cee:	ad e2       	ldi	r26, 0x2D	; 45
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ed e2       	ldi	r30, 0x2D	; 45
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	8c 93       	st	X, r24
	/* SPI Enable */
	SET_BIT(SPCR_Reg,6);
     cfc:	ad e2       	ldi	r26, 0x2D	; 45
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ed e2       	ldi	r30, 0x2D	; 45
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 64       	ori	r24, 0x40	; 64
     d08:	8c 93       	st	X, r24

}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <SPI_u8SendReceive>:
u8 SPI_u8SendReceive(u8 data){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01

	DIO_ErrStateSetPinValue(PORT_A,PIN_7,DIO_LOW);
     d1c:	81 e4       	ldi	r24, 0x41	; 65
     d1e:	67 e0       	ldi	r22, 0x07	; 7
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
	SPDR_Reg=data;
     d26:	ef e2       	ldi	r30, 0x2F	; 47
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	80 83       	st	Z, r24
	while(GET_BIT(SPSR_Reg,7)==0);
     d2e:	ee e2       	ldi	r30, 0x2E	; 46
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	88 23       	and	r24, r24
     d36:	dc f7       	brge	.-10     	; 0xd2e <SPI_u8SendReceive+0x1e>
	//DIO_ErrStateSetPinValue(PORT_A,PIN_7,DIO_HIGH);
	return SPDR_Reg;
     d38:	ef e2       	ldi	r30, 0x2F	; 47
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
}
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <INT2_VoidSETINT2>:
 *      Author: Mazen
 */
#include "EXTINT2_Interface.h"
void (*INT2_CallbackAddress)(void)=Null;

void INT2_VoidSETINT2(void){
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
EnableGlobalInterrupt();
     d4e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <EnableGlobalInterrupt>
ENABLEINT2_GICR_Reg;
     d52:	ab e5       	ldi	r26, 0x5B	; 91
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	eb e5       	ldi	r30, 0x5B	; 91
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 62       	ori	r24, 0x20	; 32
     d5e:	8c 93       	st	X, r24
ENABLEINT2_FALLING_EDGE;
     d60:	a4 e5       	ldi	r26, 0x54	; 84
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e4 e5       	ldi	r30, 0x54	; 84
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	80 64       	ori	r24, 0x40	; 64
     d6c:	8c 93       	st	X, r24
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <INT2_SetCallBack>:
INT2_Err INT2_SetCallBack(void (*INT2CB)(void)){
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	00 d0       	rcall	.+0      	; 0xd7a <INT2_SetCallBack+0x6>
     d7a:	0f 92       	push	r0
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	9a 83       	std	Y+2, r25	; 0x02
     d82:	89 83       	std	Y+1, r24	; 0x01
	if(INT2CB!=Null){
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	49 f0       	breq	.+18     	; 0xd9e <INT2_SetCallBack+0x2a>
	INT2CB=INT2_CallbackAddress;
     d8c:	80 91 a6 00 	lds	r24, 0x00A6
     d90:	90 91 a7 00 	lds	r25, 0x00A7
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return INT2_PTR_NULL;
	}
	return INT2_PTR_OK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	8b 83       	std	Y+3, r24	; 0x03
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <INT2_SetCallBack+0x2e>
	if(INT2CB!=Null){
	INT2CB=INT2_CallbackAddress;
	}
	else
	{
		return INT2_PTR_NULL;
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT2_PTR_OK;
}
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	2f 93       	push	r18
     dbc:	3f 93       	push	r19
     dbe:	4f 93       	push	r20
     dc0:	5f 93       	push	r21
     dc2:	6f 93       	push	r22
     dc4:	7f 93       	push	r23
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
     dca:	af 93       	push	r26
     dcc:	bf 93       	push	r27
     dce:	ef 93       	push	r30
     dd0:	ff 93       	push	r31
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
if(INT2_CallbackAddress!=Null){
     dda:	80 91 a6 00 	lds	r24, 0x00A6
     dde:	90 91 a7 00 	lds	r25, 0x00A7
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	29 f0       	breq	.+10     	; 0xdf0 <__vector_3+0x40>
	INT2_CallbackAddress();
     de6:	e0 91 a6 00 	lds	r30, 0x00A6
     dea:	f0 91 a7 00 	lds	r31, 0x00A7
     dee:	09 95       	icall
}
else{
//Nothing
}
}
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	bf 91       	pop	r27
     dfa:	af 91       	pop	r26
     dfc:	9f 91       	pop	r25
     dfe:	8f 91       	pop	r24
     e00:	7f 91       	pop	r23
     e02:	6f 91       	pop	r22
     e04:	5f 91       	pop	r21
     e06:	4f 91       	pop	r20
     e08:	3f 91       	pop	r19
     e0a:	2f 91       	pop	r18
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <INT1_VoidSETINT1>:
 */
#include "EXTINT1_Interface.h"

void (*INT1_CallbackAddress)(void)=Null;

void INT1_VoidSETINT1(void){
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     e1e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <EnableGlobalInterrupt>
	ENABLEINT1_GICR_Reg;
     e22:	ab e5       	ldi	r26, 0x5B	; 91
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	eb e5       	ldi	r30, 0x5B	; 91
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 68       	ori	r24, 0x80	; 128
     e2e:	8c 93       	st	X, r24
#if CaseINT1==INT1_LowLevel
	ENABLEINT1_LOW_LEVEL;
     e30:	a5 e5       	ldi	r26, 0x55	; 85
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e5       	ldi	r30, 0x55	; 85
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8b 7f       	andi	r24, 0xFB	; 251
     e3c:	8c 93       	st	X, r24
     e3e:	a5 e5       	ldi	r26, 0x55	; 85
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e5       	ldi	r30, 0x55	; 85
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	87 7f       	andi	r24, 0xF7	; 247
     e4a:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT0_AnyLogicalChange
	ENABLEINT1_ANY_LOGIC;
     e4c:	a5 e5       	ldi	r26, 0x55	; 85
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e5 e5       	ldi	r30, 0x55	; 85
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	84 60       	ori	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	a5 e5       	ldi	r26, 0x55	; 85
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e5 e5       	ldi	r30, 0x55	; 85
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	87 7f       	andi	r24, 0xF7	; 247
     e66:	8c 93       	st	X, r24
#endif
#if CaseINT1 ==INT1_FallingEdge
	ENABLEINT1_FALLING_EDGE;
     e68:	a5 e5       	ldi	r26, 0x55	; 85
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e5       	ldi	r30, 0x55	; 85
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8b 7f       	andi	r24, 0xFB	; 251
     e74:	8c 93       	st	X, r24
     e76:	a5 e5       	ldi	r26, 0x55	; 85
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e5       	ldi	r30, 0x55	; 85
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT1_RisingEdge
	ENABLEINT1_RISING_EDGE;
     e84:	a5 e5       	ldi	r26, 0x55	; 85
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e5 e5       	ldi	r30, 0x55	; 85
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	84 60       	ori	r24, 0x04	; 4
     e90:	8c 93       	st	X, r24
     e92:	a5 e5       	ldi	r26, 0x55	; 85
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e5 e5       	ldi	r30, 0x55	; 85
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	8c 93       	st	X, r24
#endif
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	08 95       	ret

00000ea6 <INT1_SetCallBack>:

INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	00 d0       	rcall	.+0      	; 0xeac <INT1_SetCallBack+0x6>
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	if(INT1CB!=Null){
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	9a 81       	ldd	r25, Y+2	; 0x02
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	49 f0       	breq	.+18     	; 0xed0 <INT1_SetCallBack+0x2a>
	INT1CB=INT1_CallbackAddress;
     ebe:	80 91 a8 00 	lds	r24, 0x00A8
     ec2:	90 91 a9 00 	lds	r25, 0x00A9
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INT1_PTR_NULL;
	}
	return INT1_PTR_OK;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <INT1_SetCallBack+0x2e>
INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
	if(INT1CB!=Null){
	INT1CB=INT1_CallbackAddress;
	}
	else{
		return INT1_PTR_NULL;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT1_PTR_OK;

}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2(void){
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	if(INT1_CallbackAddress!=Null){
     f0c:	80 91 a8 00 	lds	r24, 0x00A8
     f10:	90 91 a9 00 	lds	r25, 0x00A9
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	29 f0       	breq	.+10     	; 0xf22 <__vector_2+0x40>
		INT1_CallbackAddress();
     f18:	e0 91 a8 00 	lds	r30, 0x00A8
     f1c:	f0 91 a9 00 	lds	r31, 0x00A9
     f20:	09 95       	icall
	}
	else{
		//Do Nothing
	}
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <INT0_VoidSETINT0>:
 */

#include "EXTINT0_Interface.h"
void (*INT0_CallbackAddress)(void)=Null;

void INT0_VoidSETINT0(void){
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
     f50:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <EnableGlobalInterrupt>
	ENABLEINT0_GICR_Reg;
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 64       	ori	r24, 0x40	; 64
     f60:	8c 93       	st	X, r24
#if CaseINT0==INT0_LowLevel
	ENABLEINT0_LOW_LEVEL;
     f62:	a5 e5       	ldi	r26, 0x55	; 85
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e5       	ldi	r30, 0x55	; 85
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	8c 93       	st	X, r24
     f70:	a5 e5       	ldi	r26, 0x55	; 85
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e5       	ldi	r30, 0x55	; 85
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_AnyLogicalChange
	ENABLEINT0_ANY_LOGIC;
     f7e:	a5 e5       	ldi	r26, 0x55	; 85
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 e5       	ldi	r30, 0x55	; 85
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	8c 93       	st	X, r24
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	8c 93       	st	X, r24
#endif
#if CaseINT0 ==INT0_FallingEdge
	ENABLEINT0_FALLING_EDGE;
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	8c 93       	st	X, r24
     fa8:	a5 e5       	ldi	r26, 0x55	; 85
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e5       	ldi	r30, 0x55	; 85
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	82 60       	ori	r24, 0x02	; 2
     fb4:	8c 93       	st	X, r24
#endif
#if CaseINT0==INT0_RisingEdge
	ENABLEINT0_RISING_EDGE;
     fb6:	a5 e5       	ldi	r26, 0x55	; 85
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e5       	ldi	r30, 0x55	; 85
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	81 60       	ori	r24, 0x01	; 1
     fc2:	8c 93       	st	X, r24
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	82 60       	ori	r24, 0x02	; 2
     fd0:	8c 93       	st	X, r24
#endif
}
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <INT0_SetCallBack>:

INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <INT0_SetCallBack+0x6>
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
if(INT0CB != Null){
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	49 f0       	breq	.+18     	; 0x1002 <INT0_SetCallBack+0x2a>
	INT0CB=INT0_CallbackAddress;
     ff0:	80 91 aa 00 	lds	r24, 0x00AA
     ff4:	90 91 ab 00 	lds	r25, 0x00AB
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	}
else{
	return INT0_PTR_NULL;
}
return INT0_PTR_OK;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <INT0_SetCallBack+0x2e>
INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
if(INT0CB != Null){
	INT0CB=INT0_CallbackAddress;
	}
else{
	return INT0_PTR_NULL;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
}
return INT0_PTR_OK;
}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	cf 91       	pop	r28
    1010:	df 91       	pop	r29
    1012:	08 95       	ret

00001014 <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62

	if(INT0_CallbackAddress!=Null){
    103e:	80 91 aa 00 	lds	r24, 0x00AA
    1042:	90 91 ab 00 	lds	r25, 0x00AB
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	29 f0       	breq	.+10     	; 0x1054 <__vector_1+0x40>
		INT0_CallbackAddress();
    104a:	e0 91 aa 00 	lds	r30, 0x00AA
    104e:	f0 91 ab 00 	lds	r31, 0x00AB
    1052:	09 95       	icall
	}
	else{
		//nothing
	}
}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	bf 91       	pop	r27
    105e:	af 91       	pop	r26
    1060:	9f 91       	pop	r25
    1062:	8f 91       	pop	r24
    1064:	7f 91       	pop	r23
    1066:	6f 91       	pop	r22
    1068:	5f 91       	pop	r21
    106a:	4f 91       	pop	r20
    106c:	3f 91       	pop	r19
    106e:	2f 91       	pop	r18
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <DIO_ErrStateSetPinDirection>:
 *      Author: Mazen
 */

#include "DIO_Interface.h"

DIO_Err DIO_ErrStateSetPinDirection(PORT_Name port,PIN_Number pin,Direction direction){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	28 97       	sbiw	r28, 0x08	; 8
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	6a 83       	std	Y+2, r22	; 0x02
    1092:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	88 30       	cpi	r24, 0x08	; 8
    1098:	08 f0       	brcs	.+2      	; 0x109c <DIO_ErrStateSetPinDirection+0x22>
    109a:	f8 c0       	rjmp	.+496    	; 0x128c <DIO_ErrStateSetPinDirection+0x212>
		{
			if(direction == DIO_OUT)
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <DIO_ErrStateSetPinDirection+0x2a>
    10a2:	73 c0       	rjmp	.+230    	; 0x118a <DIO_ErrStateSetPinDirection+0x110>
			{
				switch(port)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	38 87       	std	Y+8, r19	; 0x08
    10ac:	2f 83       	std	Y+7, r18	; 0x07
    10ae:	8f 81       	ldd	r24, Y+7	; 0x07
    10b0:	98 85       	ldd	r25, Y+8	; 0x08
    10b2:	82 34       	cpi	r24, 0x42	; 66
    10b4:	91 05       	cpc	r25, r1
    10b6:	51 f1       	breq	.+84     	; 0x110c <DIO_ErrStateSetPinDirection+0x92>
    10b8:	2f 81       	ldd	r18, Y+7	; 0x07
    10ba:	38 85       	ldd	r19, Y+8	; 0x08
    10bc:	23 34       	cpi	r18, 0x43	; 67
    10be:	31 05       	cpc	r19, r1
    10c0:	34 f4       	brge	.+12     	; 0x10ce <DIO_ErrStateSetPinDirection+0x54>
    10c2:	8f 81       	ldd	r24, Y+7	; 0x07
    10c4:	98 85       	ldd	r25, Y+8	; 0x08
    10c6:	81 34       	cpi	r24, 0x41	; 65
    10c8:	91 05       	cpc	r25, r1
    10ca:	61 f0       	breq	.+24     	; 0x10e4 <DIO_ErrStateSetPinDirection+0x6a>
    10cc:	5b c0       	rjmp	.+182    	; 0x1184 <DIO_ErrStateSetPinDirection+0x10a>
    10ce:	2f 81       	ldd	r18, Y+7	; 0x07
    10d0:	38 85       	ldd	r19, Y+8	; 0x08
    10d2:	23 34       	cpi	r18, 0x43	; 67
    10d4:	31 05       	cpc	r19, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <DIO_ErrStateSetPinDirection+0xba>
    10d8:	8f 81       	ldd	r24, Y+7	; 0x07
    10da:	98 85       	ldd	r25, Y+8	; 0x08
    10dc:	84 34       	cpi	r24, 0x44	; 68
    10de:	91 05       	cpc	r25, r1
    10e0:	e9 f1       	breq	.+122    	; 0x115c <DIO_ErrStateSetPinDirection+0xe2>
    10e2:	50 c0       	rjmp	.+160    	; 0x1184 <DIO_ErrStateSetPinDirection+0x10a>
				{
				case 'A': SET_BIT(DDRA_ITI,pin); break;
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_ErrStateSetPinDirection+0x88>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_ErrStateSetPinDirection+0x84>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	be c0       	rjmp	.+380    	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': SET_BIT(DDRB_ITI,pin); break;
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_ErrStateSetPinDirection+0xb0>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_ErrStateSetPinDirection+0xac>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	aa c0       	rjmp	.+340    	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': SET_BIT(DDRC_ITI,pin); break;
    1134:	a4 e3       	ldi	r26, 0x34	; 52
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e4 e3       	ldi	r30, 0x34	; 52
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_ErrStateSetPinDirection+0xd8>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_ErrStateSetPinDirection+0xd4>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	96 c0       	rjmp	.+300    	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': SET_BIT(DDRD_ITI,pin); break;
    115c:	a1 e3       	ldi	r26, 0x31	; 49
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e1 e3       	ldi	r30, 0x31	; 49
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_ErrStateSetPinDirection+0x100>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_ErrStateSetPinDirection+0xfc>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	82 c0       	rjmp	.+260    	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	9e 83       	std	Y+6, r25	; 0x06
    1188:	83 c0       	rjmp	.+262    	; 0x1290 <DIO_ErrStateSetPinDirection+0x216>
				}

			}
			else if(direction == DIO_IN)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 23       	and	r24, r24
    118e:	09 f0       	breq	.+2      	; 0x1192 <DIO_ErrStateSetPinDirection+0x118>
    1190:	78 c0       	rjmp	.+240    	; 0x1282 <DIO_ErrStateSetPinDirection+0x208>
			{
				switch(port)
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3d 83       	std	Y+5, r19	; 0x05
    119a:	2c 83       	std	Y+4, r18	; 0x04
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	82 34       	cpi	r24, 0x42	; 66
    11a2:	91 05       	cpc	r25, r1
    11a4:	61 f1       	breq	.+88     	; 0x11fe <DIO_ErrStateSetPinDirection+0x184>
    11a6:	2c 81       	ldd	r18, Y+4	; 0x04
    11a8:	3d 81       	ldd	r19, Y+5	; 0x05
    11aa:	23 34       	cpi	r18, 0x43	; 67
    11ac:	31 05       	cpc	r19, r1
    11ae:	34 f4       	brge	.+12     	; 0x11bc <DIO_ErrStateSetPinDirection+0x142>
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	9d 81       	ldd	r25, Y+5	; 0x05
    11b4:	81 34       	cpi	r24, 0x41	; 65
    11b6:	91 05       	cpc	r25, r1
    11b8:	69 f0       	breq	.+26     	; 0x11d4 <DIO_ErrStateSetPinDirection+0x15a>
    11ba:	60 c0       	rjmp	.+192    	; 0x127c <DIO_ErrStateSetPinDirection+0x202>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	23 34       	cpi	r18, 0x43	; 67
    11c2:	31 05       	cpc	r19, r1
    11c4:	89 f1       	breq	.+98     	; 0x1228 <DIO_ErrStateSetPinDirection+0x1ae>
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ca:	84 34       	cpi	r24, 0x44	; 68
    11cc:	91 05       	cpc	r25, r1
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <DIO_ErrStateSetPinDirection+0x158>
    11d0:	40 c0       	rjmp	.+128    	; 0x1252 <DIO_ErrStateSetPinDirection+0x1d8>
    11d2:	54 c0       	rjmp	.+168    	; 0x127c <DIO_ErrStateSetPinDirection+0x202>
				{
				case 'A': CLEAR_BIT(DDRA_ITI,pin); break;
    11d4:	aa e3       	ldi	r26, 0x3A	; 58
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ea e3       	ldi	r30, 0x3A	; 58
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_ErrStateSetPinDirection+0x178>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_ErrStateSetPinDirection+0x174>
    11f6:	80 95       	com	r24
    11f8:	84 23       	and	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	45 c0       	rjmp	.+138    	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': CLEAR_BIT(DDRB_ITI,pin); break;
    11fe:	a7 e3       	ldi	r26, 0x37	; 55
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e7 e3       	ldi	r30, 0x37	; 55
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_ErrStateSetPinDirection+0x1a2>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_ErrStateSetPinDirection+0x19e>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	30 c0       	rjmp	.+96     	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': CLEAR_BIT(DDRC_ITI,pin); break;
    1228:	a4 e3       	ldi	r26, 0x34	; 52
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e4 e3       	ldi	r30, 0x34	; 52
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_ErrStateSetPinDirection+0x1cc>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_ErrStateSetPinDirection+0x1c8>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	1b c0       	rjmp	.+54     	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': CLEAR_BIT(DDRD_ITI,pin); break;
    1252:	a1 e3       	ldi	r26, 0x31	; 49
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e1 e3       	ldi	r30, 0x31	; 49
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_ErrStateSetPinDirection+0x1f6>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_ErrStateSetPinDirection+0x1f2>
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;				}
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	9e 83       	std	Y+6, r25	; 0x06
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
    1282:	23 e0       	ldi	r18, 0x03	; 3
    1284:	2e 83       	std	Y+6, r18	; 0x06
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <DIO_ErrStateSetPinDirection+0x216>
		}
	else
		return DIO_ERROR_PIN;
	return DIO_OK;
    1288:	1e 82       	std	Y+6, r1	; 0x06
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
		}
	else
		return DIO_ERROR_PIN;
    128c:	32 e0       	ldi	r19, 0x02	; 2
    128e:	3e 83       	std	Y+6, r19	; 0x06
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
	return DIO_OK;
}
    1292:	28 96       	adiw	r28, 0x08	; 8
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_ErrStateSetPinValue>:
DIO_Err DIO_ErrStateSetPinValue(PORT_Name port,PIN_Number pin,Volt val){
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	28 97       	sbiw	r28, 0x08	; 8
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
    12bc:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	88 30       	cpi	r24, 0x08	; 8
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <DIO_ErrStateSetPinValue+0x22>
    12c4:	f8 c0       	rjmp	.+496    	; 0x14b6 <DIO_ErrStateSetPinValue+0x212>
			{
				if(val == DIO_HIGH)
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <DIO_ErrStateSetPinValue+0x2a>
    12cc:	73 c0       	rjmp	.+230    	; 0x13b4 <DIO_ErrStateSetPinValue+0x110>
				{
					switch(port)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	38 87       	std	Y+8, r19	; 0x08
    12d6:	2f 83       	std	Y+7, r18	; 0x07
    12d8:	8f 81       	ldd	r24, Y+7	; 0x07
    12da:	98 85       	ldd	r25, Y+8	; 0x08
    12dc:	82 34       	cpi	r24, 0x42	; 66
    12de:	91 05       	cpc	r25, r1
    12e0:	51 f1       	breq	.+84     	; 0x1336 <DIO_ErrStateSetPinValue+0x92>
    12e2:	2f 81       	ldd	r18, Y+7	; 0x07
    12e4:	38 85       	ldd	r19, Y+8	; 0x08
    12e6:	23 34       	cpi	r18, 0x43	; 67
    12e8:	31 05       	cpc	r19, r1
    12ea:	34 f4       	brge	.+12     	; 0x12f8 <DIO_ErrStateSetPinValue+0x54>
    12ec:	8f 81       	ldd	r24, Y+7	; 0x07
    12ee:	98 85       	ldd	r25, Y+8	; 0x08
    12f0:	81 34       	cpi	r24, 0x41	; 65
    12f2:	91 05       	cpc	r25, r1
    12f4:	61 f0       	breq	.+24     	; 0x130e <DIO_ErrStateSetPinValue+0x6a>
    12f6:	5b c0       	rjmp	.+182    	; 0x13ae <DIO_ErrStateSetPinValue+0x10a>
    12f8:	2f 81       	ldd	r18, Y+7	; 0x07
    12fa:	38 85       	ldd	r19, Y+8	; 0x08
    12fc:	23 34       	cpi	r18, 0x43	; 67
    12fe:	31 05       	cpc	r19, r1
    1300:	71 f1       	breq	.+92     	; 0x135e <DIO_ErrStateSetPinValue+0xba>
    1302:	8f 81       	ldd	r24, Y+7	; 0x07
    1304:	98 85       	ldd	r25, Y+8	; 0x08
    1306:	84 34       	cpi	r24, 0x44	; 68
    1308:	91 05       	cpc	r25, r1
    130a:	e9 f1       	breq	.+122    	; 0x1386 <DIO_ErrStateSetPinValue+0xe2>
    130c:	50 c0       	rjmp	.+160    	; 0x13ae <DIO_ErrStateSetPinValue+0x10a>
					{
					case 'A': SET_BIT(PORTA_ITI,pin); break;
    130e:	ab e3       	ldi	r26, 0x3B	; 59
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	eb e3       	ldi	r30, 0x3B	; 59
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_ErrStateSetPinValue+0x88>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_ErrStateSetPinValue+0x84>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	be c0       	rjmp	.+380    	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': SET_BIT(PORTB_ITI,pin); break;
    1336:	a8 e3       	ldi	r26, 0x38	; 56
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e8 e3       	ldi	r30, 0x38	; 56
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_ErrStateSetPinValue+0xb0>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_ErrStateSetPinValue+0xac>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	aa c0       	rjmp	.+340    	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': SET_BIT(PORTC_ITI,pin); break;
    135e:	a5 e3       	ldi	r26, 0x35	; 53
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_ErrStateSetPinValue+0xd8>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_ErrStateSetPinValue+0xd4>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	96 c0       	rjmp	.+300    	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': SET_BIT(PORTD_ITI,pin); break;
    1386:	a2 e3       	ldi	r26, 0x32	; 50
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_ErrStateSetPinValue+0x100>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_ErrStateSetPinValue+0xfc>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	82 c0       	rjmp	.+260    	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	83 c0       	rjmp	.+262    	; 0x14ba <DIO_ErrStateSetPinValue+0x216>
					}
				}
				else if(val == DIO_LOW)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 23       	and	r24, r24
    13b8:	09 f0       	breq	.+2      	; 0x13bc <DIO_ErrStateSetPinValue+0x118>
    13ba:	78 c0       	rjmp	.+240    	; 0x14ac <DIO_ErrStateSetPinValue+0x208>
				{
					switch(port)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3d 83       	std	Y+5, r19	; 0x05
    13c4:	2c 83       	std	Y+4, r18	; 0x04
    13c6:	8c 81       	ldd	r24, Y+4	; 0x04
    13c8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ca:	82 34       	cpi	r24, 0x42	; 66
    13cc:	91 05       	cpc	r25, r1
    13ce:	61 f1       	breq	.+88     	; 0x1428 <DIO_ErrStateSetPinValue+0x184>
    13d0:	2c 81       	ldd	r18, Y+4	; 0x04
    13d2:	3d 81       	ldd	r19, Y+5	; 0x05
    13d4:	23 34       	cpi	r18, 0x43	; 67
    13d6:	31 05       	cpc	r19, r1
    13d8:	34 f4       	brge	.+12     	; 0x13e6 <DIO_ErrStateSetPinValue+0x142>
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 34       	cpi	r24, 0x41	; 65
    13e0:	91 05       	cpc	r25, r1
    13e2:	69 f0       	breq	.+26     	; 0x13fe <DIO_ErrStateSetPinValue+0x15a>
    13e4:	60 c0       	rjmp	.+192    	; 0x14a6 <DIO_ErrStateSetPinValue+0x202>
    13e6:	2c 81       	ldd	r18, Y+4	; 0x04
    13e8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ea:	23 34       	cpi	r18, 0x43	; 67
    13ec:	31 05       	cpc	r19, r1
    13ee:	89 f1       	breq	.+98     	; 0x1452 <DIO_ErrStateSetPinValue+0x1ae>
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	9d 81       	ldd	r25, Y+5	; 0x05
    13f4:	84 34       	cpi	r24, 0x44	; 68
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_ErrStateSetPinValue+0x158>
    13fa:	40 c0       	rjmp	.+128    	; 0x147c <DIO_ErrStateSetPinValue+0x1d8>
    13fc:	54 c0       	rjmp	.+168    	; 0x14a6 <DIO_ErrStateSetPinValue+0x202>
					{
					case 'A': CLEAR_BIT(PORTA_ITI,pin); break;
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_ErrStateSetPinValue+0x178>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_ErrStateSetPinValue+0x174>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	45 c0       	rjmp	.+138    	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': CLEAR_BIT(PORTB_ITI,pin); break;
    1428:	a8 e3       	ldi	r26, 0x38	; 56
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 e3       	ldi	r30, 0x38	; 56
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_ErrStateSetPinValue+0x1a2>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_ErrStateSetPinValue+0x19e>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	30 c0       	rjmp	.+96     	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': CLEAR_BIT(PORTC_ITI,pin); break;
    1452:	a5 e3       	ldi	r26, 0x35	; 53
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e3       	ldi	r30, 0x35	; 53
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_ErrStateSetPinValue+0x1cc>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_ErrStateSetPinValue+0x1c8>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	1b c0       	rjmp	.+54     	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': CLEAR_BIT(PORTD_ITI,pin); break;
    147c:	a2 e3       	ldi	r26, 0x32	; 50
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e2 e3       	ldi	r30, 0x32	; 50
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_ErrStateSetPinValue+0x1f6>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_ErrStateSetPinValue+0x1f2>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;					}
    14a6:	91 e0       	ldi	r25, 0x01	; 1
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
    14ac:	24 e0       	ldi	r18, 0x04	; 4
    14ae:	2e 83       	std	Y+6, r18	; 0x06
    14b0:	04 c0       	rjmp	.+8      	; 0x14ba <DIO_ErrStateSetPinValue+0x216>
			}
		else
			return DIO_ERROR_PIN;
		return DIO_OK;
    14b2:	1e 82       	std	Y+6, r1	; 0x06
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
			}
		else
			return DIO_ERROR_PIN;
    14b6:	32 e0       	ldi	r19, 0x02	; 2
    14b8:	3e 83       	std	Y+6, r19	; 0x06
    14ba:	8e 81       	ldd	r24, Y+6	; 0x06
		return DIO_OK;
}
    14bc:	28 96       	adiw	r28, 0x08	; 8
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_ErrStateReadPinValue>:
DIO_Err DIO_ErrStateReadPinValue(PORT_Name port,PIN_Number pin,u8 *value){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	27 97       	sbiw	r28, 0x07	; 7
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02
    14e6:	5c 83       	std	Y+4, r21	; 0x04
    14e8:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <DIO_ErrStateReadPinValue+0x24>
    14f0:	76 c0       	rjmp	.+236    	; 0x15de <DIO_ErrStateReadPinValue+0x110>
				{
						switch(port)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3f 83       	std	Y+7, r19	; 0x07
    14fa:	2e 83       	std	Y+6, r18	; 0x06
    14fc:	4e 81       	ldd	r20, Y+6	; 0x06
    14fe:	5f 81       	ldd	r21, Y+7	; 0x07
    1500:	42 34       	cpi	r20, 0x42	; 66
    1502:	51 05       	cpc	r21, r1
    1504:	59 f1       	breq	.+86     	; 0x155c <DIO_ErrStateReadPinValue+0x8e>
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	83 34       	cpi	r24, 0x43	; 67
    150c:	91 05       	cpc	r25, r1
    150e:	34 f4       	brge	.+12     	; 0x151c <DIO_ErrStateReadPinValue+0x4e>
    1510:	2e 81       	ldd	r18, Y+6	; 0x06
    1512:	3f 81       	ldd	r19, Y+7	; 0x07
    1514:	21 34       	cpi	r18, 0x41	; 65
    1516:	31 05       	cpc	r19, r1
    1518:	69 f0       	breq	.+26     	; 0x1534 <DIO_ErrStateReadPinValue+0x66>
    151a:	5c c0       	rjmp	.+184    	; 0x15d4 <DIO_ErrStateReadPinValue+0x106>
    151c:	4e 81       	ldd	r20, Y+6	; 0x06
    151e:	5f 81       	ldd	r21, Y+7	; 0x07
    1520:	43 34       	cpi	r20, 0x43	; 67
    1522:	51 05       	cpc	r21, r1
    1524:	79 f1       	breq	.+94     	; 0x1584 <DIO_ErrStateReadPinValue+0xb6>
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	84 34       	cpi	r24, 0x44	; 68
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_ErrStateReadPinValue+0x64>
    1530:	3d c0       	rjmp	.+122    	; 0x15ac <DIO_ErrStateReadPinValue+0xde>
    1532:	50 c0       	rjmp	.+160    	; 0x15d4 <DIO_ErrStateReadPinValue+0x106>
						{
						case 'A':*value= GET_BIT(PINA_ITI,pin); break;
    1534:	e9 e3       	ldi	r30, 0x39	; 57
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a9 01       	movw	r20, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DIO_ErrStateReadPinValue+0x7e>
    1548:	55 95       	asr	r21
    154a:	47 95       	ror	r20
    154c:	8a 95       	dec	r24
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DIO_ErrStateReadPinValue+0x7a>
    1550:	ca 01       	movw	r24, r20
    1552:	81 70       	andi	r24, 0x01	; 1
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	80 83       	st	Z, r24
    155a:	3f c0       	rjmp	.+126    	; 0x15da <DIO_ErrStateReadPinValue+0x10c>
						case 'B':*value= GET_BIT(PINB_ITI,pin); break;
    155c:	e6 e3       	ldi	r30, 0x36	; 54
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_ErrStateReadPinValue+0xa6>
    1570:	55 95       	asr	r21
    1572:	47 95       	ror	r20
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_ErrStateReadPinValue+0xa2>
    1578:	ca 01       	movw	r24, r20
    157a:	81 70       	andi	r24, 0x01	; 1
    157c:	eb 81       	ldd	r30, Y+3	; 0x03
    157e:	fc 81       	ldd	r31, Y+4	; 0x04
    1580:	80 83       	st	Z, r24
    1582:	2b c0       	rjmp	.+86     	; 0x15da <DIO_ErrStateReadPinValue+0x10c>
						case 'C':*value= GET_BIT(PINC_ITI,pin); break;
    1584:	e3 e3       	ldi	r30, 0x33	; 51
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a9 01       	movw	r20, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_ErrStateReadPinValue+0xce>
    1598:	55 95       	asr	r21
    159a:	47 95       	ror	r20
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_ErrStateReadPinValue+0xca>
    15a0:	ca 01       	movw	r24, r20
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	eb 81       	ldd	r30, Y+3	; 0x03
    15a6:	fc 81       	ldd	r31, Y+4	; 0x04
    15a8:	80 83       	st	Z, r24
    15aa:	17 c0       	rjmp	.+46     	; 0x15da <DIO_ErrStateReadPinValue+0x10c>
						case 'D':*value= GET_BIT(PIND_ITI,pin); break;
    15ac:	e0 e3       	ldi	r30, 0x30	; 48
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a9 01       	movw	r20, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <DIO_ErrStateReadPinValue+0xf6>
    15c0:	55 95       	asr	r21
    15c2:	47 95       	ror	r20
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <DIO_ErrStateReadPinValue+0xf2>
    15c8:	ca 01       	movw	r24, r20
    15ca:	81 70       	andi	r24, 0x01	; 1
    15cc:	eb 81       	ldd	r30, Y+3	; 0x03
    15ce:	fc 81       	ldd	r31, Y+4	; 0x04
    15d0:	80 83       	st	Z, r24
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <DIO_ErrStateReadPinValue+0x10c>
						default: return DIO_ERROR_PORT;
    15d4:	51 e0       	ldi	r21, 0x01	; 1
    15d6:	5d 83       	std	Y+5, r21	; 0x05
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <DIO_ErrStateReadPinValue+0x114>
						}

				}
			else
				return DIO_ERROR_PIN;
			return DIO_OK;
    15da:	1d 82       	std	Y+5, r1	; 0x05
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_ErrStateReadPinValue+0x114>
						default: return DIO_ERROR_PORT;
						}

				}
			else
				return DIO_ERROR_PIN;
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
			return DIO_OK;
}
    15e4:	27 96       	adiw	r28, 0x07	; 7
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <DIO_ErrStateSetGroupDirection>:

DIO_Err  DIO_ErrStateSetGroupDirection(PORT_Name port ,Direction direction)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <DIO_ErrStateSetGroupDirection+0x6>
    15fc:	00 d0       	rcall	.+0      	; 0x15fe <DIO_ErrStateSetGroupDirection+0x8>
    15fe:	0f 92       	push	r0
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	6a 83       	std	Y+2, r22	; 0x02
	if (direction <= 0xff && direction>=0x00)
	{
		switch(port)
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	3d 83       	std	Y+5, r19	; 0x05
    1610:	2c 83       	std	Y+4, r18	; 0x04
    1612:	8c 81       	ldd	r24, Y+4	; 0x04
    1614:	9d 81       	ldd	r25, Y+5	; 0x05
    1616:	82 34       	cpi	r24, 0x42	; 66
    1618:	91 05       	cpc	r25, r1
    161a:	d9 f0       	breq	.+54     	; 0x1652 <DIO_ErrStateSetGroupDirection+0x5c>
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	23 34       	cpi	r18, 0x43	; 67
    1622:	31 05       	cpc	r19, r1
    1624:	34 f4       	brge	.+12     	; 0x1632 <DIO_ErrStateSetGroupDirection+0x3c>
    1626:	8c 81       	ldd	r24, Y+4	; 0x04
    1628:	9d 81       	ldd	r25, Y+5	; 0x05
    162a:	81 34       	cpi	r24, 0x41	; 65
    162c:	91 05       	cpc	r25, r1
    162e:	61 f0       	breq	.+24     	; 0x1648 <DIO_ErrStateSetGroupDirection+0x52>
    1630:	1f c0       	rjmp	.+62     	; 0x1670 <DIO_ErrStateSetGroupDirection+0x7a>
    1632:	2c 81       	ldd	r18, Y+4	; 0x04
    1634:	3d 81       	ldd	r19, Y+5	; 0x05
    1636:	23 34       	cpi	r18, 0x43	; 67
    1638:	31 05       	cpc	r19, r1
    163a:	81 f0       	breq	.+32     	; 0x165c <DIO_ErrStateSetGroupDirection+0x66>
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	84 34       	cpi	r24, 0x44	; 68
    1642:	91 05       	cpc	r25, r1
    1644:	81 f0       	breq	.+32     	; 0x1666 <DIO_ErrStateSetGroupDirection+0x70>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <DIO_ErrStateSetGroupDirection+0x7a>
		{
		case 'A': DDRA_ITI =   direction ;break ;
    1648:	ea e3       	ldi	r30, 0x3A	; 58
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	80 83       	st	Z, r24
    1650:	12 c0       	rjmp	.+36     	; 0x1676 <DIO_ErrStateSetGroupDirection+0x80>
		case 'B': DDRB_ITI =   direction ;break ;
    1652:	e7 e3       	ldi	r30, 0x37	; 55
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	80 83       	st	Z, r24
    165a:	0d c0       	rjmp	.+26     	; 0x1676 <DIO_ErrStateSetGroupDirection+0x80>
		case 'C': DDRC_ITI =   direction ;break ;
    165c:	e4 e3       	ldi	r30, 0x34	; 52
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 83       	st	Z, r24
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <DIO_ErrStateSetGroupDirection+0x80>
		case 'D': DDRD_ITI =   direction ;break ;
    1666:	e1 e3       	ldi	r30, 0x31	; 49
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <DIO_ErrStateSetGroupDirection+0x80>
		default :
			return DIO_ERROR_PORT ;
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	9b 83       	std	Y+3, r25	; 0x03
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <DIO_ErrStateSetGroupDirection+0x82>
		}
		return DIO_OK ;
    1676:	1b 82       	std	Y+3, r1	; 0x03
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DIO_ERROR_Direction;
	}
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <DIO_ErrStateSetPortValue>:
DIO_Err  DIO_ErrStateSetPortValue(PORT_Name port,Volt val)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <DIO_ErrStateSetPortValue+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_ErrStateSetPortValue+0x8>
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	6a 83       	std	Y+2, r22	; 0x02
	if (val <= 0xff && val>=0x00)
	{
		switch(port)
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	3d 83       	std	Y+5, r19	; 0x05
    16a4:	2c 83       	std	Y+4, r18	; 0x04
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	82 34       	cpi	r24, 0x42	; 66
    16ac:	91 05       	cpc	r25, r1
    16ae:	d9 f0       	breq	.+54     	; 0x16e6 <DIO_ErrStateSetPortValue+0x5c>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	23 34       	cpi	r18, 0x43	; 67
    16b6:	31 05       	cpc	r19, r1
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <DIO_ErrStateSetPortValue+0x3c>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	81 34       	cpi	r24, 0x41	; 65
    16c0:	91 05       	cpc	r25, r1
    16c2:	61 f0       	breq	.+24     	; 0x16dc <DIO_ErrStateSetPortValue+0x52>
    16c4:	1f c0       	rjmp	.+62     	; 0x1704 <DIO_ErrStateSetPortValue+0x7a>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	23 34       	cpi	r18, 0x43	; 67
    16cc:	31 05       	cpc	r19, r1
    16ce:	81 f0       	breq	.+32     	; 0x16f0 <DIO_ErrStateSetPortValue+0x66>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	84 34       	cpi	r24, 0x44	; 68
    16d6:	91 05       	cpc	r25, r1
    16d8:	81 f0       	breq	.+32     	; 0x16fa <DIO_ErrStateSetPortValue+0x70>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <DIO_ErrStateSetPortValue+0x7a>
		{
		case 'A':  PORTA_ITI =  val ;break ;
    16dc:	eb e3       	ldi	r30, 0x3B	; 59
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	80 83       	st	Z, r24
    16e4:	12 c0       	rjmp	.+36     	; 0x170a <DIO_ErrStateSetPortValue+0x80>
		case 'B':  PORTB_ITI =  val ;break ;
    16e6:	e8 e3       	ldi	r30, 0x38	; 56
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 83       	st	Z, r24
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <DIO_ErrStateSetPortValue+0x80>
		case 'C':  PORTC_ITI =  val ;break ;
    16f0:	e5 e3       	ldi	r30, 0x35	; 53
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	80 83       	st	Z, r24
    16f8:	08 c0       	rjmp	.+16     	; 0x170a <DIO_ErrStateSetPortValue+0x80>
		case 'D':  PORTD_ITI =  val ;break ;
    16fa:	e2 e3       	ldi	r30, 0x32	; 50
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	80 83       	st	Z, r24
    1702:	03 c0       	rjmp	.+6      	; 0x170a <DIO_ErrStateSetPortValue+0x80>
		default :
			return DIO_ERROR_PORT ;
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	9b 83       	std	Y+3, r25	; 0x03
    1708:	01 c0       	rjmp	.+2      	; 0x170c <DIO_ErrStateSetPortValue+0x82>
		}
		return DIO_OK ;
    170a:	1b 82       	std	Y+3, r1	; 0x03
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return DIO_ERROR_VALUE;
	}

}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <DIO_ErrStateReadGroupValue>:
DIO_Err  DIO_ErrStateReadGroupValue(PORT_Name port ,u8 *value)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <DIO_ErrStateReadGroupValue+0x6>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <DIO_ErrStateReadGroupValue+0x8>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <DIO_ErrStateReadGroupValue+0xa>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	7b 83       	std	Y+3, r23	; 0x03
    1730:	6a 83       	std	Y+2, r22	; 0x02
	if(value!=Null)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	09 f4       	brne	.+2      	; 0x173c <DIO_ErrStateReadGroupValue+0x1e>
    173a:	41 c0       	rjmp	.+130    	; 0x17be <DIO_ErrStateReadGroupValue+0xa0>
	{
		switch(port)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3e 83       	std	Y+6, r19	; 0x06
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	82 34       	cpi	r24, 0x42	; 66
    174c:	91 05       	cpc	r25, r1
    174e:	e9 f0       	breq	.+58     	; 0x178a <DIO_ErrStateReadGroupValue+0x6c>
    1750:	2d 81       	ldd	r18, Y+5	; 0x05
    1752:	3e 81       	ldd	r19, Y+6	; 0x06
    1754:	23 34       	cpi	r18, 0x43	; 67
    1756:	31 05       	cpc	r19, r1
    1758:	34 f4       	brge	.+12     	; 0x1766 <DIO_ErrStateReadGroupValue+0x48>
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	81 34       	cpi	r24, 0x41	; 65
    1760:	91 05       	cpc	r25, r1
    1762:	61 f0       	breq	.+24     	; 0x177c <DIO_ErrStateReadGroupValue+0x5e>
    1764:	27 c0       	rjmp	.+78     	; 0x17b4 <DIO_ErrStateReadGroupValue+0x96>
    1766:	2d 81       	ldd	r18, Y+5	; 0x05
    1768:	3e 81       	ldd	r19, Y+6	; 0x06
    176a:	23 34       	cpi	r18, 0x43	; 67
    176c:	31 05       	cpc	r19, r1
    176e:	a1 f0       	breq	.+40     	; 0x1798 <DIO_ErrStateReadGroupValue+0x7a>
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	84 34       	cpi	r24, 0x44	; 68
    1776:	91 05       	cpc	r25, r1
    1778:	b1 f0       	breq	.+44     	; 0x17a6 <DIO_ErrStateReadGroupValue+0x88>
    177a:	1c c0       	rjmp	.+56     	; 0x17b4 <DIO_ErrStateReadGroupValue+0x96>
		{
		case 'A':  *value = PINA_ITI ; break ;
    177c:	e9 e3       	ldi	r30, 0x39	; 57
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	ea 81       	ldd	r30, Y+2	; 0x02
    1784:	fb 81       	ldd	r31, Y+3	; 0x03
    1786:	80 83       	st	Z, r24
    1788:	18 c0       	rjmp	.+48     	; 0x17ba <DIO_ErrStateReadGroupValue+0x9c>
		case 'B':  *value = PINB_ITI ; break ;
    178a:	e6 e3       	ldi	r30, 0x36	; 54
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	ea 81       	ldd	r30, Y+2	; 0x02
    1792:	fb 81       	ldd	r31, Y+3	; 0x03
    1794:	80 83       	st	Z, r24
    1796:	11 c0       	rjmp	.+34     	; 0x17ba <DIO_ErrStateReadGroupValue+0x9c>
		case 'C':  *value = PINC_ITI ; break ;
    1798:	e3 e3       	ldi	r30, 0x33	; 51
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	ea 81       	ldd	r30, Y+2	; 0x02
    17a0:	fb 81       	ldd	r31, Y+3	; 0x03
    17a2:	80 83       	st	Z, r24
    17a4:	0a c0       	rjmp	.+20     	; 0x17ba <DIO_ErrStateReadGroupValue+0x9c>
		case 'D':  *value = PIND_ITI ; break ;
    17a6:	e0 e3       	ldi	r30, 0x30	; 48
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	ea 81       	ldd	r30, Y+2	; 0x02
    17ae:	fb 81       	ldd	r31, Y+3	; 0x03
    17b0:	80 83       	st	Z, r24
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <DIO_ErrStateReadGroupValue+0x9c>
		default :
			return DIO_ERROR_PORT ;
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <DIO_ErrStateReadGroupValue+0xa4>
		}
		return DIO_OK ;
    17ba:	1c 82       	std	Y+4, r1	; 0x04
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_ErrStateReadGroupValue+0xa4>
	}
	else
	{
		return AddressError;
    17be:	25 e0       	ldi	r18, 0x05	; 5
    17c0:	2c 83       	std	Y+4, r18	; 0x04
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    17c4:	26 96       	adiw	r28, 0x06	; 6
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <ADC_ErrStateInit>:

#include "ADC_Interface.h"
static u16 * ADC_pu8Readibg = Null;
static void (*ADC_pvCallBackNotifFunc)(void)=Null;
static u8 ADC_State=ADC_IDLE;
ADC_ErrState ADC_ErrStateInit(void){
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62

	//AVCC With External Cap
	CLEAR_BIT(ADMUX_Reg,REFS0);
    17de:	a7 e2       	ldi	r26, 0x27	; 39
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e7 e2       	ldi	r30, 0x27	; 39
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 7b       	andi	r24, 0xBF	; 191
    17ea:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX_Reg,REFS1);
    17ec:	a7 e2       	ldi	r26, 0x27	; 39
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e7 e2       	ldi	r30, 0x27	; 39
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 77       	andi	r24, 0x7F	; 127
    17f8:	8c 93       	st	X, r24

	//Left Adjust
	SET_BIT(ADMUX_Reg,ADLAR);
    17fa:	a7 e2       	ldi	r26, 0x27	; 39
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e7 e2       	ldi	r30, 0x27	; 39
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 62       	ori	r24, 0x20	; 32
    1806:	8c 93       	st	X, r24

	ADCSRA_Reg&=ADC_PRESC_MASK;
    1808:	a6 e2       	ldi	r26, 0x26	; 38
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e6 e2       	ldi	r30, 0x26	; 38
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 7f       	andi	r24, 0xF8	; 248
    1814:	8c 93       	st	X, r24
	//Setting Prescale in Config file
	ADCSRA_Reg|=PRESC;
    1816:	a6 e2       	ldi	r26, 0x26	; 38
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e6 e2       	ldi	r30, 0x26	; 38
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8c 93       	st	X, r24
	//Enable
	SET_BIT(ADCSRA_Reg,ADEN);
    1824:	a6 e2       	ldi	r26, 0x26	; 38
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e6 e2       	ldi	r30, 0x26	; 38
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 68       	ori	r24, 0x80	; 128
    1830:	8c 93       	st	X, r24
	return ADC_Init_Ok;
    1832:	80 e0       	ldi	r24, 0x00	; 0
}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <ADC_ErrStateConversionSynch>:
ADC_ErrState ADC_ErrStateConversionSynch(u8 PIN,u16 *Val){
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	28 97       	sbiw	r28, 0x08	; 8
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	8e 83       	std	Y+6, r24	; 0x06
    1850:	78 87       	std	Y+8, r23	; 0x08
    1852:	6f 83       	std	Y+7, r22	; 0x07
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    1854:	80 91 71 00 	lds	r24, 0x0071
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	09 f0       	breq	.+2      	; 0x185e <ADC_ErrStateConversionSynch+0x24>
    185c:	5d c0       	rjmp	.+186    	; 0x1918 <ADC_ErrStateConversionSynch+0xde>
		ADC_State=ADC_BUSY;
    185e:	10 92 71 00 	sts	0x0071, r1
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
    1862:	a7 e2       	ldi	r26, 0x27	; 39
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e2       	ldi	r30, 0x27	; 39
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	80 7e       	andi	r24, 0xE0	; 224
    186e:	8c 93       	st	X, r24
		ADMUX_Reg|=PIN;
    1870:	a7 e2       	ldi	r26, 0x27	; 39
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e7 e2       	ldi	r30, 0x27	; 39
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	90 81       	ld	r25, Z
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	89 2b       	or	r24, r25
    187e:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,ADSC);
    1880:	a6 e2       	ldi	r26, 0x26	; 38
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e6 e2       	ldi	r30, 0x26	; 38
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 64       	ori	r24, 0x40	; 64
    188c:	8c 93       	st	X, r24
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <ADC_ErrStateConversionSynch+0x6c>
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
			ADC_Local_Counter++;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	ab 81       	ldd	r26, Y+3	; 0x03
    1896:	bc 81       	ldd	r27, Y+4	; 0x04
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	a1 1d       	adc	r26, r1
    189c:	b1 1d       	adc	r27, r1
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	ab 83       	std	Y+3, r26	; 0x03
    18a4:	bc 83       	std	Y+4, r27	; 0x04
		ADC_State=ADC_BUSY;
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
		ADMUX_Reg|=PIN;
		SET_BIT(ADCSRA_Reg,ADSC);
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
    18a6:	e6 e2       	ldi	r30, 0x26	; 38
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	82 95       	swap	r24
    18ae:	8f 70       	andi	r24, 0x0F	; 15
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	90 70       	andi	r25, 0x00	; 0
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	61 f4       	brne	.+24     	; 0x18d4 <ADC_ErrStateConversionSynch+0x9a>
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	ab 81       	ldd	r26, Y+3	; 0x03
    18c2:	bc 81       	ldd	r27, Y+4	; 0x04
    18c4:	88 38       	cpi	r24, 0x88	; 136
    18c6:	23 e1       	ldi	r18, 0x13	; 19
    18c8:	92 07       	cpc	r25, r18
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	a2 07       	cpc	r26, r18
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	b2 07       	cpc	r27, r18
    18d2:	f1 f6       	brne	.-68     	; 0x1890 <ADC_ErrStateConversionSynch+0x56>
			ADC_Local_Counter++;
		}
		if(ADC_Local_Counter==ADC_u32Timeout){
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	9a 81       	ldd	r25, Y+2	; 0x02
    18d8:	ab 81       	ldd	r26, Y+3	; 0x03
    18da:	bc 81       	ldd	r27, Y+4	; 0x04
    18dc:	88 38       	cpi	r24, 0x88	; 136
    18de:	23 e1       	ldi	r18, 0x13	; 19
    18e0:	92 07       	cpc	r25, r18
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	a2 07       	cpc	r26, r18
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	b2 07       	cpc	r27, r18
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <ADC_ErrStateConversionSynch+0xb8>
			Adc_ErrReturn= ADC_SynchError;
    18ec:	85 e0       	ldi	r24, 0x05	; 5
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	15 c0       	rjmp	.+42     	; 0x191c <ADC_ErrStateConversionSynch+0xe2>
		}
		else
		{

			SET_BIT(ADCSRA_Reg,ADIF);
    18f2:	a6 e2       	ldi	r26, 0x26	; 38
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e6 e2       	ldi	r30, 0x26	; 38
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	80 61       	ori	r24, 0x10	; 16
    18fe:	8c 93       	st	X, r24
			*Val=ADCH_Reg;
    1900:	e5 e2       	ldi	r30, 0x25	; 37
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	ef 81       	ldd	r30, Y+7	; 0x07
    190c:	f8 85       	ldd	r31, Y+8	; 0x08
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	80 83       	st	Z, r24
			Adc_ErrReturn=ADC_Synch_Ok;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	02 c0       	rjmp	.+4      	; 0x191c <ADC_ErrStateConversionSynch+0xe2>
		}
	}
	else{
		Adc_ErrReturn=ADC_Synch_Busy;
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	8d 83       	std	Y+5, r24	; 0x05
	}
	ADC_State=ADC_IDLE;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	80 93 71 00 	sts	0x0071, r24
	return Adc_ErrReturn;
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1924:	28 96       	adiw	r28, 0x08	; 8
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <ADC_ErrStateConversionASynch>:
ADC_ErrState ADC_ErrStateConversionASynch(u8 PIN,u16 *Val,void (*ADC_pvNotifFunc)(void)){
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <ADC_ErrStateConversionASynch+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <ADC_ErrStateConversionASynch+0x8>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <ADC_ErrStateConversionASynch+0xa>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	8a 83       	std	Y+2, r24	; 0x02
    1946:	7c 83       	std	Y+4, r23	; 0x04
    1948:	6b 83       	std	Y+3, r22	; 0x03
    194a:	5e 83       	std	Y+6, r21	; 0x06
    194c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    194e:	80 91 71 00 	lds	r24, 0x0071
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	c9 f5       	brne	.+114    	; 0x19c8 <ADC_ErrStateConversionASynch+0x92>

		if(Val==Null || ADC_pvNotifFunc==Null){
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	21 f0       	breq	.+8      	; 0x1966 <ADC_ErrStateConversionASynch+0x30>
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	19 f4       	brne	.+6      	; 0x196c <ADC_ErrStateConversionASynch+0x36>
			Adc_ErrReturn=ADC_ASynchError;
    1966:	86 e0       	ldi	r24, 0x06	; 6
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	30 c0       	rjmp	.+96     	; 0x19cc <ADC_ErrStateConversionASynch+0x96>
		}
		else
		{
			ADC_State=ADC_BUSY;
    196c:	10 92 71 00 	sts	0x0071, r1
			ADC_pu8Readibg=Val;
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	90 93 ad 00 	sts	0x00AD, r25
    1978:	80 93 ac 00 	sts	0x00AC, r24
			ADC_pvCallBackNotifFunc=ADC_pvNotifFunc;
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	90 93 af 00 	sts	0x00AF, r25
    1984:	80 93 ae 00 	sts	0x00AE, r24
			/* Clear MUX Register */
			ADMUX_Reg&=0b11100000;
    1988:	a7 e2       	ldi	r26, 0x27	; 39
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e2       	ldi	r30, 0x27	; 39
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 7e       	andi	r24, 0xE0	; 224
    1994:	8c 93       	st	X, r24
			/* Set the required channel into MUX bits */
			ADMUX_Reg|=PIN;
    1996:	a7 e2       	ldi	r26, 0x27	; 39
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e7 e2       	ldi	r30, 0x27	; 39
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	90 81       	ld	r25, Z
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	89 2b       	or	r24, r25
    19a4:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA_Reg,ADSC);
    19a6:	a6 e2       	ldi	r26, 0x26	; 38
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e6 e2       	ldi	r30, 0x26	; 38
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 64       	ori	r24, 0x40	; 64
    19b2:	8c 93       	st	X, r24
			/* Enable ADC Interrupt */
			SET_BIT(ADCSRA_Reg,ADIE);
    19b4:	a6 e2       	ldi	r26, 0x26	; 38
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e6 e2       	ldi	r30, 0x26	; 38
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	88 60       	ori	r24, 0x08	; 8
    19c0:	8c 93       	st	X, r24
			Adc_ErrReturn=ADC_ASynch_Ok;
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <ADC_ErrStateConversionASynch+0x96>
		}
	}
	else{
		Adc_ErrReturn=ADC_ASynch_Busy;
    19c8:	84 e0       	ldi	r24, 0x04	; 4
    19ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Adc_ErrReturn;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ce:	26 96       	adiw	r28, 0x06	; 6
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void){
    19e0:	1f 92       	push	r1
    19e2:	0f 92       	push	r0
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	0f 92       	push	r0
    19e8:	11 24       	eor	r1, r1
    19ea:	2f 93       	push	r18
    19ec:	3f 93       	push	r19
    19ee:	4f 93       	push	r20
    19f0:	5f 93       	push	r21
    19f2:	6f 93       	push	r22
    19f4:	7f 93       	push	r23
    19f6:	8f 93       	push	r24
    19f8:	9f 93       	push	r25
    19fa:	af 93       	push	r26
    19fc:	bf 93       	push	r27
    19fe:	ef 93       	push	r30
    1a00:	ff 93       	push	r31
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
	/* Read adc result */
	*ADC_pu8Readibg= ADCH_Reg;
    1a0a:	a0 91 ac 00 	lds	r26, 0x00AC
    1a0e:	b0 91 ad 00 	lds	r27, 0x00AD
    1a12:	e5 e2       	ldi	r30, 0x25	; 37
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	8d 93       	st	X+, r24
    1a1e:	9c 93       	st	X, r25
	/* Invoke Callback NotiFun */
	ADC_pvCallBackNotifFunc();
    1a20:	e0 91 ae 00 	lds	r30, 0x00AE
    1a24:	f0 91 af 00 	lds	r31, 0x00AF
    1a28:	09 95       	icall
	/* Disable ADC Conversion */
	CLEAR_BIT(ADCSRA_Reg,ADIE);
    1a2a:	a6 e2       	ldi	r26, 0x26	; 38
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e6 e2       	ldi	r30, 0x26	; 38
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	87 7f       	andi	r24, 0xF7	; 247
    1a36:	8c 93       	st	X, r24
	ADC_State=ADC_IDLE;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 71 00 	sts	0x0071, r24
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	ff 91       	pop	r31
    1a44:	ef 91       	pop	r30
    1a46:	bf 91       	pop	r27
    1a48:	af 91       	pop	r26
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <EnableGlobalInterrupt>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "Global_Interrupt_Enable.h"
void EnableGlobalInterrupt(void){
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
    1a6c:	af e5       	ldi	r26, 0x5F	; 95
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ef e5       	ldi	r30, 0x5F	; 95
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 68       	ori	r24, 0x80	; 128
    1a78:	8c 93       	st	X, r24
}
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <SW_SwitchErrStateGetState>:
 *  Created on: Mar 24, 2023
 *      Author: hisha
 */

#include "Switch_Interface.h"
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,u8 * Result){
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	29 97       	sbiw	r28, 0x09	; 9
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	9d 83       	std	Y+5, r25	; 0x05
    1a96:	8c 83       	std	Y+4, r24	; 0x04
    1a98:	7f 83       	std	Y+7, r23	; 0x07
    1a9a:	6e 83       	std	Y+6, r22	; 0x06
	u8 read_val;
	Result=&read_val;
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	03 96       	adiw	r24, 0x03	; 3
    1aa0:	9f 83       	std	Y+7, r25	; 0x07
    1aa2:	8e 83       	std	Y+6, r24	; 0x06
	u8 Switch_ErrDirectionReturn;
	u8 Switch_ErrValueReturn;
	if(Switch->ConnectionType==InternalPullUp){
    1aa4:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa6:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	88 23       	and	r24, r24
    1aac:	d1 f5       	brne	.+116    	; 0x1b22 <SW_SwitchErrStateGetState+0xa2>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1aae:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab2:	80 81       	ld	r24, Z
    1ab4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	69 2f       	mov	r22, r25
    1abc:	40 e0       	ldi	r20, 0x00	; 0
    1abe:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1ac2:	8a 83       	std	Y+2, r24	; 0x02
		if(Switch_ErrDirectionReturn==DIO_ERROR_PORT||Switch_ErrDirectionReturn==DIO_ERROR_Direction||Switch_ErrDirectionReturn==DIO_ERROR_PIN){
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	31 f0       	breq	.+12     	; 0x1ad6 <SW_SwitchErrStateGetState+0x56>
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	83 30       	cpi	r24, 0x03	; 3
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <SW_SwitchErrStateGetState+0x56>
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	11 f4       	brne	.+4      	; 0x1ada <SW_SwitchErrStateGetState+0x5a>
			return Switch_Init_Error;
    1ad6:	18 86       	std	Y+8, r1	; 0x08
    1ad8:	79 c0       	rjmp	.+242    	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
		}
		else{
			DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_HIGH);
    1ada:	ec 81       	ldd	r30, Y+4	; 0x04
    1adc:	fd 81       	ldd	r31, Y+5	; 0x05
    1ade:	80 81       	ld	r24, Z
    1ae0:	ec 81       	ldd	r30, Y+4	; 0x04
    1ae2:	fd 81       	ldd	r31, Y+5	; 0x05
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	69 2f       	mov	r22, r25
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
			Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1aee:	ec 81       	ldd	r30, Y+4	; 0x04
    1af0:	fd 81       	ldd	r31, Y+5	; 0x05
    1af2:	80 81       	ld	r24, Z
    1af4:	ec 81       	ldd	r30, Y+4	; 0x04
    1af6:	fd 81       	ldd	r31, Y+5	; 0x05
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	9e 01       	movw	r18, r28
    1afc:	2d 5f       	subi	r18, 0xFD	; 253
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	69 2f       	mov	r22, r25
    1b02:	a9 01       	movw	r20, r18
    1b04:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_ErrStateReadPinValue>
    1b08:	89 83       	std	Y+1, r24	; 0x01
			if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	19 f0       	breq	.+6      	; 0x1b16 <SW_SwitchErrStateGetState+0x96>
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	19 f4       	brne	.+6      	; 0x1b1c <SW_SwitchErrStateGetState+0x9c>
				return Switch_Value_Error;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	88 87       	std	Y+8, r24	; 0x08
    1b1a:	58 c0       	rjmp	.+176    	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
			}
			else
				return Switch_Ok;
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	88 87       	std	Y+8, r24	; 0x08
    1b20:	55 c0       	rjmp	.+170    	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
		}
	}
	else if(Switch->ConnectionType==ExternalPullUp){
    1b22:	ec 81       	ldd	r30, Y+4	; 0x04
    1b24:	fd 81       	ldd	r31, Y+5	; 0x05
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	29 f5       	brne	.+74     	; 0x1b76 <SW_SwitchErrStateGetState+0xf6>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1b2c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b2e:	fd 81       	ldd	r31, Y+5	; 0x05
    1b30:	80 81       	ld	r24, Z
    1b32:	ec 81       	ldd	r30, Y+4	; 0x04
    1b34:	fd 81       	ldd	r31, Y+5	; 0x05
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	69 2f       	mov	r22, r25
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1b40:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1b42:	ec 81       	ldd	r30, Y+4	; 0x04
    1b44:	fd 81       	ldd	r31, Y+5	; 0x05
    1b46:	80 81       	ld	r24, Z
    1b48:	ec 81       	ldd	r30, Y+4	; 0x04
    1b4a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	9e 01       	movw	r18, r28
    1b50:	2d 5f       	subi	r18, 0xFD	; 253
    1b52:	3f 4f       	sbci	r19, 0xFF	; 255
    1b54:	69 2f       	mov	r22, r25
    1b56:	a9 01       	movw	r20, r18
    1b58:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_ErrStateReadPinValue>
    1b5c:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	19 f0       	breq	.+6      	; 0x1b6a <SW_SwitchErrStateGetState+0xea>
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	19 f4       	brne	.+6      	; 0x1b70 <SW_SwitchErrStateGetState+0xf0>
			return Switch_Value_Error;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	88 87       	std	Y+8, r24	; 0x08
    1b6e:	2e c0       	rjmp	.+92     	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	88 87       	std	Y+8, r24	; 0x08
    1b74:	2b c0       	rjmp	.+86     	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
	}

	else if(Switch->ConnectionType==ExternalPullDown){
    1b76:	ec 81       	ldd	r30, Y+4	; 0x04
    1b78:	fd 81       	ldd	r31, Y+5	; 0x05
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	29 f5       	brne	.+74     	; 0x1bca <SW_SwitchErrStateGetState+0x14a>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1b80:	ec 81       	ldd	r30, Y+4	; 0x04
    1b82:	fd 81       	ldd	r31, Y+5	; 0x05
    1b84:	80 81       	ld	r24, Z
    1b86:	ec 81       	ldd	r30, Y+4	; 0x04
    1b88:	fd 81       	ldd	r31, Y+5	; 0x05
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	69 2f       	mov	r22, r25
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1b94:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,&read_val);
    1b96:	ec 81       	ldd	r30, Y+4	; 0x04
    1b98:	fd 81       	ldd	r31, Y+5	; 0x05
    1b9a:	80 81       	ld	r24, Z
    1b9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1b9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1ba0:	91 81       	ldd	r25, Z+1	; 0x01
    1ba2:	9e 01       	movw	r18, r28
    1ba4:	2d 5f       	subi	r18, 0xFD	; 253
    1ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba8:	69 2f       	mov	r22, r25
    1baa:	a9 01       	movw	r20, r18
    1bac:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_ErrStateReadPinValue>
    1bb0:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	82 30       	cpi	r24, 0x02	; 2
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <SW_SwitchErrStateGetState+0x13e>
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	19 f4       	brne	.+6      	; 0x1bc4 <SW_SwitchErrStateGetState+0x144>
			return Switch_Value_Error;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	88 87       	std	Y+8, r24	; 0x08
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
		}
		else
			return Switch_Ok;
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	88 87       	std	Y+8, r24	; 0x08
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <SW_SwitchErrStateGetState+0x14c>
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <SW_SwitchErrStateGetState+0x150>
	}

}
    1bcc:	88 85       	ldd	r24, Y+8	; 0x08
    1bce:	89 87       	std	Y+9, r24	; 0x09
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	29 96       	adiw	r28, 0x09	; 9
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <SevSeg_SevErrStateSetNumber>:
		SevSegCC_6 ,
		SevSegCC_7 ,
		SevSegCC_8 ,
		SevSegCC_9
};
SevErrState SevSeg_SevErrStateSetNumber(u8 INPUT_NUMBER , SevSeg_info * SevenSegment1){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <SevSeg_SevErrStateSetNumber+0x6>
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <SevSeg_SevErrStateSetNumber+0x8>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <SevSeg_SevErrStateSetNumber+0xa>
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	8b 83       	std	Y+3, r24	; 0x03
    1bf4:	7d 83       	std	Y+5, r23	; 0x05
    1bf6:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1bf8:	ec 81       	ldd	r30, Y+4	; 0x04
    1bfa:	fd 81       	ldd	r31, Y+5	; 0x05
    1bfc:	81 81       	ldd	r24, Z+1	; 0x01
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_ErrStateSetGroupDirection>
    1c04:	8a 83       	std	Y+2, r24	; 0x02
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	19 f0       	breq	.+6      	; 0x1c12 <SevSeg_SevErrStateSetNumber+0x2e>
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	19 f4       	brne	.+6      	; 0x1c18 <SevSeg_SevErrStateSetNumber+0x34>
	{
		return Group_ERROR;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	8e 83       	std	Y+6, r24	; 0x06
    1c16:	8c c0       	rjmp	.+280    	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1c18:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 23       	and	r24, r24
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <SevSeg_SevErrStateSetNumber+0x40>
    1c22:	3f c0       	rjmp	.+126    	; 0x1ca2 <SevSeg_SevErrStateSetNumber+0xbe>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1c24:	ec 81       	ldd	r30, Y+4	; 0x04
    1c26:	fd 81       	ldd	r31, Y+5	; 0x05
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	69 2f       	mov	r22, r25
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1c38:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	31 f0       	breq	.+12     	; 0x1c4c <SevSeg_SevErrStateSetNumber+0x68>
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	83 30       	cpi	r24, 0x03	; 3
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <SevSeg_SevErrStateSetNumber+0x68>
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	19 f4       	brne	.+6      	; 0x1c52 <SevSeg_SevErrStateSetNumber+0x6e>
				return Group_ERROR;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	8e 83       	std	Y+6, r24	; 0x06
    1c50:	6f c0       	rjmp	.+222    	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1c52:	ec 81       	ldd	r30, Y+4	; 0x04
    1c54:	fd 81       	ldd	r31, Y+5	; 0x05
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	ec 81       	ldd	r30, Y+4	; 0x04
    1c5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	69 2f       	mov	r22, r25
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    1c66:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	31 f0       	breq	.+12     	; 0x1c7a <SevSeg_SevErrStateSetNumber+0x96>
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	84 30       	cpi	r24, 0x04	; 4
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <SevSeg_SevErrStateSetNumber+0x96>
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <SevSeg_SevErrStateSetNumber+0x9a>
					return Number_Error;
    1c7a:	1e 82       	std	Y+6, r1	; 0x06
    1c7c:	59 c0       	rjmp	.+178    	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[INPUT_NUMBER]);
    1c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c80:	fd 81       	ldd	r31, Y+5	; 0x05
    1c82:	21 81       	ldd	r18, Z+1	; 0x01
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	ee 58       	subi	r30, 0x8E	; 142
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	90 81       	ld	r25, Z
    1c92:	82 2f       	mov	r24, r18
    1c94:	69 2f       	mov	r22, r25
    1c96:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    1c9a:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0 )&&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	8e 83       	std	Y+6, r24	; 0x06
    1ca0:	47 c0       	rjmp	.+142    	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1ca2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ca4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ca6:	80 81       	ld	r24, Z
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f0       	breq	.+2      	; 0x1cae <SevSeg_SevErrStateSetNumber+0xca>
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <SevSeg_SevErrStateSetNumber+0x148>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1cae:	ec 81       	ldd	r30, Y+4	; 0x04
    1cb0:	fd 81       	ldd	r31, Y+5	; 0x05
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cb6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	69 2f       	mov	r22, r25
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	31 f0       	breq	.+12     	; 0x1cd6 <SevSeg_SevErrStateSetNumber+0xf2>
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	83 30       	cpi	r24, 0x03	; 3
    1cce:	19 f0       	breq	.+6      	; 0x1cd6 <SevSeg_SevErrStateSetNumber+0xf2>
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	19 f4       	brne	.+6      	; 0x1cdc <SevSeg_SevErrStateSetNumber+0xf8>
				return Group_ERROR;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	8e 83       	std	Y+6, r24	; 0x06
    1cda:	2a c0       	rjmp	.+84     	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    1cdc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cde:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	69 2f       	mov	r22, r25
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    1cf0:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	31 f0       	breq	.+12     	; 0x1d04 <SevSeg_SevErrStateSetNumber+0x120>
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	19 f0       	breq	.+6      	; 0x1d04 <SevSeg_SevErrStateSetNumber+0x120>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	82 30       	cpi	r24, 0x02	; 2
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <SevSeg_SevErrStateSetNumber+0x124>
					return Number_Error;
    1d04:	1e 82       	std	Y+6, r1	; 0x06
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[INPUT_NUMBER]);
    1d08:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1d0c:	21 81       	ldd	r18, Z+1	; 0x01
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	fc 01       	movw	r30, r24
    1d16:	e4 58       	subi	r30, 0x84	; 132
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	90 81       	ld	r25, Z
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	69 2f       	mov	r22, r25
    1d20:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    1d24:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0) &&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	8e 83       	std	Y+6, r24	; 0x06
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
	}
	return Seven_OK;
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	8e 83       	std	Y+6, r24	; 0x06
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1d32:	26 96       	adiw	r28, 0x06	; 6
    1d34:	0f b6       	in	r0, 0x3f	; 63
    1d36:	f8 94       	cli
    1d38:	de bf       	out	0x3e, r29	; 62
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	cd bf       	out	0x3d, r28	; 61
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End ){
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	ef 97       	sbiw	r28, 0x3f	; 63
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	9c af       	std	Y+60, r25	; 0x3c
    1d5a:	8b af       	std	Y+59, r24	; 0x3b
    1d5c:	6d af       	std	Y+61, r22	; 0x3d
    1d5e:	4e af       	std	Y+62, r20	; 0x3e
	u8 ErrStateDirection,ErrStateValue;
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    1d60:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d62:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d64:	81 81       	ldd	r24, Z+1	; 0x01
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_ErrStateSetGroupDirection>
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    1d6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <SevSeg_SevErrStateDisplayRange+0x34>
    1d72:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <SevSeg_SevErrStateDisplayRange+0x3a>
	{
		return Group_ERROR;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	8f af       	std	Y+63, r24	; 0x3f
    1d7c:	57 c2       	rjmp	.+1198   	; 0x222c <SevSeg_SevErrStateDisplayRange+0x4e8>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    1d7e:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d80:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d82:	80 81       	ld	r24, Z
    1d84:	88 23       	and	r24, r24
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <SevSeg_SevErrStateDisplayRange+0x46>
    1d88:	25 c1       	rjmp	.+586    	; 0x1fd4 <SevSeg_SevErrStateDisplayRange+0x290>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1d8a:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d8c:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d8e:	82 81       	ldd	r24, Z+2	; 0x02
    1d90:	eb ad       	ldd	r30, Y+59	; 0x3b
    1d92:	fc ad       	ldd	r31, Y+60	; 0x3c
    1d94:	93 81       	ldd	r25, Z+3	; 0x03
    1d96:	69 2f       	mov	r22, r25
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1d9e:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1da0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	31 f0       	breq	.+12     	; 0x1db2 <SevSeg_SevErrStateDisplayRange+0x6e>
    1da6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	19 f0       	breq	.+6      	; 0x1db2 <SevSeg_SevErrStateDisplayRange+0x6e>
    1dac:	8a ad       	ldd	r24, Y+58	; 0x3a
    1dae:	82 30       	cpi	r24, 0x02	; 2
    1db0:	19 f4       	brne	.+6      	; 0x1db8 <SevSeg_SevErrStateDisplayRange+0x74>
				return Group_ERROR;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	8f af       	std	Y+63, r24	; 0x3f
    1db6:	3a c2       	rjmp	.+1140   	; 0x222c <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    1db8:	eb ad       	ldd	r30, Y+59	; 0x3b
    1dba:	fc ad       	ldd	r31, Y+60	; 0x3c
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	eb ad       	ldd	r30, Y+59	; 0x3b
    1dc0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	69 2f       	mov	r22, r25
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    1dcc:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_start]);
    1dce:	eb ad       	ldd	r30, Y+59	; 0x3b
    1dd0:	fc ad       	ldd	r31, Y+60	; 0x3c
    1dd2:	21 81       	ldd	r18, Z+1	; 0x01
    1dd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	fc 01       	movw	r30, r24
    1ddc:	ee 58       	subi	r30, 0x8E	; 142
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	90 81       	ld	r25, Z
    1de2:	82 2f       	mov	r24, r18
    1de4:	69 2f       	mov	r22, r25
    1de6:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    1dea:	89 af       	std	Y+57, r24	; 0x39
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	aa ef       	ldi	r26, 0xFA	; 250
    1df2:	b3 e4       	ldi	r27, 0x43	; 67
    1df4:	8d ab       	std	Y+53, r24	; 0x35
    1df6:	9e ab       	std	Y+54, r25	; 0x36
    1df8:	af ab       	std	Y+55, r26	; 0x37
    1dfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1e00:	8f a9       	ldd	r24, Y+55	; 0x37
    1e02:	98 ad       	ldd	r25, Y+56	; 0x38
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a ef       	ldi	r20, 0xFA	; 250
    1e0a:	54 e4       	ldi	r21, 0x44	; 68
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	89 ab       	std	Y+49, r24	; 0x31
    1e16:	9a ab       	std	Y+50, r25	; 0x32
    1e18:	ab ab       	std	Y+51, r26	; 0x33
    1e1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <SevSeg_SevErrStateDisplayRange+0xfa>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <SevSeg_SevErrStateDisplayRange+0x178>
	else if (__tmp > 65535)
    1e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e40:	7a a9       	ldd	r23, Y+50	; 0x32
    1e42:	8b a9       	ldd	r24, Y+51	; 0x33
    1e44:	9c a9       	ldd	r25, Y+52	; 0x34
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <SevSeg_SevErrStateDisplayRange+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6d a9       	ldd	r22, Y+53	; 0x35
    1e58:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	98 ab       	std	Y+48, r25	; 0x30
    1e7c:	8f a7       	std	Y+47, r24	; 0x2f
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <SevSeg_SevErrStateDisplayRange+0x15a>
    1e80:	88 ec       	ldi	r24, 0xC8	; 200
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e a7       	std	Y+46, r25	; 0x2e
    1e86:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <SevSeg_SevErrStateDisplayRange+0x148>
    1e90:	9e a7       	std	Y+46, r25	; 0x2e
    1e92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e96:	98 a9       	ldd	r25, Y+48	; 0x30
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	98 ab       	std	Y+48, r25	; 0x30
    1e9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <SevSeg_SevErrStateDisplayRange+0x13c>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <SevSeg_SevErrStateDisplayRange+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	98 ab       	std	Y+48, r25	; 0x30
    1eba:	8f a7       	std	Y+47, r24	; 0x2f
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	9c a7       	std	Y+44, r25	; 0x2c
    1ec2:	8b a7       	std	Y+43, r24	; 0x2b
    1ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <SevSeg_SevErrStateDisplayRange+0x184>
    1ecc:	9c a7       	std	Y+44, r25	; 0x2c
    1ece:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_End]);
    1ed0:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ed2:	fc ad       	ldd	r31, Y+60	; 0x3c
    1ed4:	21 81       	ldd	r18, Z+1	; 0x01
    1ed6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	fc 01       	movw	r30, r24
    1ede:	ee 58       	subi	r30, 0x8E	; 142
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	90 81       	ld	r25, Z
    1ee4:	82 2f       	mov	r24, r18
    1ee6:	69 2f       	mov	r22, r25
    1ee8:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    1eec:	89 af       	std	Y+57, r24	; 0x39
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	aa ef       	ldi	r26, 0xFA	; 250
    1ef4:	b3 e4       	ldi	r27, 0x43	; 67
    1ef6:	8f a3       	std	Y+39, r24	; 0x27
    1ef8:	98 a7       	std	Y+40, r25	; 0x28
    1efa:	a9 a7       	std	Y+41, r26	; 0x29
    1efc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efe:	6f a1       	ldd	r22, Y+39	; 0x27
    1f00:	78 a5       	ldd	r23, Y+40	; 0x28
    1f02:	89 a5       	ldd	r24, Y+41	; 0x29
    1f04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a ef       	ldi	r20, 0xFA	; 250
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8b a3       	std	Y+35, r24	; 0x23
    1f18:	9c a3       	std	Y+36, r25	; 0x24
    1f1a:	ad a3       	std	Y+37, r26	; 0x25
    1f1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f20:	7c a1       	ldd	r23, Y+36	; 0x24
    1f22:	8d a1       	ldd	r24, Y+37	; 0x25
    1f24:	9e a1       	ldd	r25, Y+38	; 0x26
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <SevSeg_SevErrStateDisplayRange+0x1fc>
		__ticks = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9a a3       	std	Y+34, r25	; 0x22
    1f3c:	89 a3       	std	Y+33, r24	; 0x21
    1f3e:	3f c0       	rjmp	.+126    	; 0x1fbe <SevSeg_SevErrStateDisplayRange+0x27a>
	else if (__tmp > 65535)
    1f40:	6b a1       	ldd	r22, Y+35	; 0x23
    1f42:	7c a1       	ldd	r23, Y+36	; 0x24
    1f44:	8d a1       	ldd	r24, Y+37	; 0x25
    1f46:	9e a1       	ldd	r25, Y+38	; 0x26
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	57 e4       	ldi	r21, 0x47	; 71
    1f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	4c f5       	brge	.+82     	; 0x1faa <SevSeg_SevErrStateDisplayRange+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f58:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e2       	ldi	r20, 0x20	; 32
    1f66:	51 e4       	ldi	r21, 0x41	; 65
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9a a3       	std	Y+34, r25	; 0x22
    1f7e:	89 a3       	std	Y+33, r24	; 0x21
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <SevSeg_SevErrStateDisplayRange+0x25c>
    1f82:	88 ec       	ldi	r24, 0xC8	; 200
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	98 a3       	std	Y+32, r25	; 0x20
    1f88:	8f 8f       	std	Y+31, r24	; 0x1f
    1f8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <SevSeg_SevErrStateDisplayRange+0x24a>
    1f92:	98 a3       	std	Y+32, r25	; 0x20
    1f94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f96:	89 a1       	ldd	r24, Y+33	; 0x21
    1f98:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	9a a3       	std	Y+34, r25	; 0x22
    1f9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <SevSeg_SevErrStateDisplayRange+0x23e>
    1fa8:	3f c1       	rjmp	.+638    	; 0x2228 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	6b a1       	ldd	r22, Y+35	; 0x23
    1fac:	7c a1       	ldd	r23, Y+36	; 0x24
    1fae:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9a a3       	std	Y+34, r25	; 0x22
    1fbc:	89 a3       	std	Y+33, r24	; 0x21
    1fbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc2:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc4:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <SevSeg_SevErrStateDisplayRange+0x286>
    1fce:	9e 8f       	std	Y+30, r25	; 0x1e
    1fd0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fd2:	2a c1       	rjmp	.+596    	; 0x2228 <SevSeg_SevErrStateDisplayRange+0x4e4>
					_delay_ms(500);
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    1fd4:	eb ad       	ldd	r30, Y+59	; 0x3b
    1fd6:	fc ad       	ldd	r31, Y+60	; 0x3c
    1fd8:	80 81       	ld	r24, Z
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <SevSeg_SevErrStateDisplayRange+0x29c>
    1fde:	24 c1       	rjmp	.+584    	; 0x2228 <SevSeg_SevErrStateDisplayRange+0x4e4>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    1fe0:	eb ad       	ldd	r30, Y+59	; 0x3b
    1fe2:	fc ad       	ldd	r31, Y+60	; 0x3c
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	eb ad       	ldd	r30, Y+59	; 0x3b
    1fe8:	fc ad       	ldd	r31, Y+60	; 0x3c
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	69 2f       	mov	r22, r25
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    1ff4:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    1ff6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ff8:	81 30       	cpi	r24, 0x01	; 1
    1ffa:	31 f0       	breq	.+12     	; 0x2008 <SevSeg_SevErrStateDisplayRange+0x2c4>
    1ffc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1ffe:	83 30       	cpi	r24, 0x03	; 3
    2000:	19 f0       	breq	.+6      	; 0x2008 <SevSeg_SevErrStateDisplayRange+0x2c4>
    2002:	8a ad       	ldd	r24, Y+58	; 0x3a
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	19 f4       	brne	.+6      	; 0x200e <SevSeg_SevErrStateDisplayRange+0x2ca>
				return Group_ERROR;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	8f af       	std	Y+63, r24	; 0x3f
    200c:	0f c1       	rjmp	.+542    	; 0x222c <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    200e:	eb ad       	ldd	r30, Y+59	; 0x3b
    2010:	fc ad       	ldd	r31, Y+60	; 0x3c
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	eb ad       	ldd	r30, Y+59	; 0x3b
    2016:	fc ad       	ldd	r31, Y+60	; 0x3c
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	69 2f       	mov	r22, r25
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2022:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_start]);
    2024:	eb ad       	ldd	r30, Y+59	; 0x3b
    2026:	fc ad       	ldd	r31, Y+60	; 0x3c
    2028:	21 81       	ldd	r18, Z+1	; 0x01
    202a:	8d ad       	ldd	r24, Y+61	; 0x3d
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	fc 01       	movw	r30, r24
    2032:	e4 58       	subi	r30, 0x84	; 132
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	90 81       	ld	r25, Z
    2038:	82 2f       	mov	r24, r18
    203a:	69 2f       	mov	r22, r25
    203c:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    2040:	89 af       	std	Y+57, r24	; 0x39
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	aa ef       	ldi	r26, 0xFA	; 250
    2048:	b3 e4       	ldi	r27, 0x43	; 67
    204a:	89 8f       	std	Y+25, r24	; 0x19
    204c:	9a 8f       	std	Y+26, r25	; 0x1a
    204e:	ab 8f       	std	Y+27, r26	; 0x1b
    2050:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	69 8d       	ldd	r22, Y+25	; 0x19
    2054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8d 8b       	std	Y+21, r24	; 0x15
    206c:	9e 8b       	std	Y+22, r25	; 0x16
    206e:	af 8b       	std	Y+23, r26	; 0x17
    2070:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <SevSeg_SevErrStateDisplayRange+0x350>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <SevSeg_SevErrStateDisplayRange+0x3ce>
	else if (__tmp > 65535)
    2094:	6d 89       	ldd	r22, Y+21	; 0x15
    2096:	7e 89       	ldd	r23, Y+22	; 0x16
    2098:	8f 89       	ldd	r24, Y+23	; 0x17
    209a:	98 8d       	ldd	r25, Y+24	; 0x18
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <SevSeg_SevErrStateDisplayRange+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	69 8d       	ldd	r22, Y+25	; 0x19
    20ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9c 8b       	std	Y+20, r25	; 0x14
    20d2:	8b 8b       	std	Y+19, r24	; 0x13
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <SevSeg_SevErrStateDisplayRange+0x3b0>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	89 8b       	std	Y+17, r24	; 0x11
    20de:	89 89       	ldd	r24, Y+17	; 0x11
    20e0:	9a 89       	ldd	r25, Y+18	; 0x12
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <SevSeg_SevErrStateDisplayRange+0x39e>
    20e6:	9a 8b       	std	Y+18, r25	; 0x12
    20e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8b 89       	ldd	r24, Y+19	; 0x13
    20ec:	9c 89       	ldd	r25, Y+20	; 0x14
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8b 89       	ldd	r24, Y+19	; 0x13
    20f6:	9c 89       	ldd	r25, Y+20	; 0x14
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <SevSeg_SevErrStateDisplayRange+0x392>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <SevSeg_SevErrStateDisplayRange+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2100:	7e 89       	ldd	r23, Y+22	; 0x16
    2102:	8f 89       	ldd	r24, Y+23	; 0x17
    2104:	98 8d       	ldd	r25, Y+24	; 0x18
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
    2112:	8b 89       	ldd	r24, Y+19	; 0x13
    2114:	9c 89       	ldd	r25, Y+20	; 0x14
    2116:	98 8b       	std	Y+16, r25	; 0x10
    2118:	8f 87       	std	Y+15, r24	; 0x0f
    211a:	8f 85       	ldd	r24, Y+15	; 0x0f
    211c:	98 89       	ldd	r25, Y+16	; 0x10
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <SevSeg_SevErrStateDisplayRange+0x3da>
    2122:	98 8b       	std	Y+16, r25	; 0x10
    2124:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_End]);
    2126:	eb ad       	ldd	r30, Y+59	; 0x3b
    2128:	fc ad       	ldd	r31, Y+60	; 0x3c
    212a:	21 81       	ldd	r18, Z+1	; 0x01
    212c:	8e ad       	ldd	r24, Y+62	; 0x3e
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	fc 01       	movw	r30, r24
    2134:	e4 58       	subi	r30, 0x84	; 132
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	90 81       	ld	r25, Z
    213a:	82 2f       	mov	r24, r18
    213c:	69 2f       	mov	r22, r25
    213e:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    2142:	89 af       	std	Y+57, r24	; 0x39
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	aa ef       	ldi	r26, 0xFA	; 250
    214a:	b3 e4       	ldi	r27, 0x43	; 67
    214c:	8b 87       	std	Y+11, r24	; 0x0b
    214e:	9c 87       	std	Y+12, r25	; 0x0c
    2150:	ad 87       	std	Y+13, r26	; 0x0d
    2152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	4a ef       	ldi	r20, 0xFA	; 250
    2162:	54 e4       	ldi	r21, 0x44	; 68
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	8f 83       	std	Y+7, r24	; 0x07
    216e:	98 87       	std	Y+8, r25	; 0x08
    2170:	a9 87       	std	Y+9, r26	; 0x09
    2172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e8       	ldi	r20, 0x80	; 128
    2182:	5f e3       	ldi	r21, 0x3F	; 63
    2184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2188:	88 23       	and	r24, r24
    218a:	2c f4       	brge	.+10     	; 0x2196 <SevSeg_SevErrStateDisplayRange+0x452>
		__ticks = 1;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	3f c0       	rjmp	.+126    	; 0x2214 <SevSeg_SevErrStateDisplayRange+0x4d0>
	else if (__tmp > 65535)
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	3f ef       	ldi	r19, 0xFF	; 255
    21a2:	4f e7       	ldi	r20, 0x7F	; 127
    21a4:	57 e4       	ldi	r21, 0x47	; 71
    21a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21aa:	18 16       	cp	r1, r24
    21ac:	4c f5       	brge	.+82     	; 0x2200 <SevSeg_SevErrStateDisplayRange+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e2       	ldi	r20, 0x20	; 32
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <SevSeg_SevErrStateDisplayRange+0x4b2>
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	8b 83       	std	Y+3, r24	; 0x03
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <SevSeg_SevErrStateDisplayRange+0x4a0>
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	9e 83       	std	Y+6, r25	; 0x06
    21f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	9e 81       	ldd	r25, Y+6	; 0x06
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	69 f7       	brne	.-38     	; 0x21d8 <SevSeg_SevErrStateDisplayRange+0x494>
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <SevSeg_SevErrStateDisplayRange+0x4dc>
    2224:	9a 83       	std	Y+2, r25	; 0x02
    2226:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
		}
	}
	return Seven_OK;
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	8f af       	std	Y+63, r24	; 0x3f
    222c:	8f ad       	ldd	r24, Y+63	; 0x3f

}
    222e:	ef 96       	adiw	r28, 0x3f	; 63
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <SevSeg_SevErrStateDisplayMax>:

SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1){
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	a3 97       	sbiw	r28, 0x23	; 35
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	9a a3       	std	Y+34, r25	; 0x22
    2256:	89 a3       	std	Y+33, r24	; 0x21
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    2258:	e9 a1       	ldd	r30, Y+33	; 0x21
    225a:	fa a1       	ldd	r31, Y+34	; 0x22
    225c:	81 81       	ldd	r24, Z+1	; 0x01
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_ErrStateSetGroupDirection>
    2264:	88 a3       	std	Y+32, r24	; 0x20
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    2266:	88 a1       	ldd	r24, Y+32	; 0x20
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	19 f0       	breq	.+6      	; 0x2272 <SevSeg_SevErrStateDisplayMax+0x32>
    226c:	88 a1       	ldd	r24, Y+32	; 0x20
    226e:	83 30       	cpi	r24, 0x03	; 3
    2270:	19 f4       	brne	.+6      	; 0x2278 <SevSeg_SevErrStateDisplayMax+0x38>
	{
		return Group_ERROR;
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	8b a3       	std	Y+35, r24	; 0x23
    2276:	92 c1       	rjmp	.+804    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    2278:	e9 a1       	ldd	r30, Y+33	; 0x21
    227a:	fa a1       	ldd	r31, Y+34	; 0x22
    227c:	80 81       	ld	r24, Z
    227e:	88 23       	and	r24, r24
    2280:	09 f0       	breq	.+2      	; 0x2284 <SevSeg_SevErrStateDisplayMax+0x44>
    2282:	c2 c0       	rjmp	.+388    	; 0x2408 <SevSeg_SevErrStateDisplayMax+0x1c8>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    2284:	e9 a1       	ldd	r30, Y+33	; 0x21
    2286:	fa a1       	ldd	r31, Y+34	; 0x22
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	e9 a1       	ldd	r30, Y+33	; 0x21
    228c:	fa a1       	ldd	r31, Y+34	; 0x22
    228e:	93 81       	ldd	r25, Z+3	; 0x03
    2290:	69 2f       	mov	r22, r25
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    2298:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    229a:	88 a1       	ldd	r24, Y+32	; 0x20
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	31 f0       	breq	.+12     	; 0x22ac <SevSeg_SevErrStateDisplayMax+0x6c>
    22a0:	88 a1       	ldd	r24, Y+32	; 0x20
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	19 f0       	breq	.+6      	; 0x22ac <SevSeg_SevErrStateDisplayMax+0x6c>
    22a6:	88 a1       	ldd	r24, Y+32	; 0x20
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	19 f4       	brne	.+6      	; 0x22b2 <SevSeg_SevErrStateDisplayMax+0x72>
				return Group_ERROR;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	8b a3       	std	Y+35, r24	; 0x23
    22b0:	75 c1       	rjmp	.+746    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    22b2:	e9 a1       	ldd	r30, Y+33	; 0x21
    22b4:	fa a1       	ldd	r31, Y+34	; 0x22
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	e9 a1       	ldd	r30, Y+33	; 0x21
    22ba:	fa a1       	ldd	r31, Y+34	; 0x22
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	69 2f       	mov	r22, r25
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    22c6:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    22c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	31 f0       	breq	.+12     	; 0x22da <SevSeg_SevErrStateDisplayMax+0x9a>
    22ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d0:	84 30       	cpi	r24, 0x04	; 4
    22d2:	19 f0       	breq	.+6      	; 0x22da <SevSeg_SevErrStateDisplayMax+0x9a>
    22d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22d6:	82 30       	cpi	r24, 0x02	; 2
    22d8:	11 f4       	brne	.+4      	; 0x22de <SevSeg_SevErrStateDisplayMax+0x9e>
					return Number_Error;
    22da:	1b a2       	std	Y+35, r1	; 0x23
    22dc:	5f c1       	rjmp	.+702    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    22de:	1e 8e       	std	Y+30, r1	; 0x1e
    22e0:	84 c0       	rjmp	.+264    	; 0x23ea <SevSeg_SevErrStateDisplayMax+0x1aa>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
    22e2:	e9 a1       	ldd	r30, Y+33	; 0x21
    22e4:	fa a1       	ldd	r31, Y+34	; 0x22
    22e6:	21 81       	ldd	r18, Z+1	; 0x01
    22e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	fc 01       	movw	r30, r24
    22f0:	ee 58       	subi	r30, 0x8E	; 142
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	90 81       	ld	r25, Z
    22f6:	82 2f       	mov	r24, r18
    22f8:	69 2f       	mov	r22, r25
    22fa:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    22fe:	8f 8f       	std	Y+31, r24	; 0x1f
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	a6 e1       	ldi	r26, 0x16	; 22
    2306:	b3 e4       	ldi	r27, 0x43	; 67
    2308:	89 8f       	std	Y+25, r24	; 0x19
    230a:	9a 8f       	std	Y+26, r25	; 0x1a
    230c:	ab 8f       	std	Y+27, r26	; 0x1b
    230e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	69 8d       	ldd	r22, Y+25	; 0x19
    2312:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8d 8b       	std	Y+21, r24	; 0x15
    232a:	9e 8b       	std	Y+22, r25	; 0x16
    232c:	af 8b       	std	Y+23, r26	; 0x17
    232e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <SevSeg_SevErrStateDisplayMax+0x112>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <SevSeg_SevErrStateDisplayMax+0x190>
	else if (__tmp > 65535)
    2352:	6d 89       	ldd	r22, Y+21	; 0x15
    2354:	7e 89       	ldd	r23, Y+22	; 0x16
    2356:	8f 89       	ldd	r24, Y+23	; 0x17
    2358:	98 8d       	ldd	r25, Y+24	; 0x18
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <SevSeg_SevErrStateDisplayMax+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	69 8d       	ldd	r22, Y+25	; 0x19
    236c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    236e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2370:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <SevSeg_SevErrStateDisplayMax+0x172>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9a 8b       	std	Y+18, r25	; 0x12
    239a:	89 8b       	std	Y+17, r24	; 0x11
    239c:	89 89       	ldd	r24, Y+17	; 0x11
    239e:	9a 89       	ldd	r25, Y+18	; 0x12
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <SevSeg_SevErrStateDisplayMax+0x160>
    23a4:	9a 8b       	std	Y+18, r25	; 0x12
    23a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8b 89       	ldd	r24, Y+19	; 0x13
    23aa:	9c 89       	ldd	r25, Y+20	; 0x14
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9c 8b       	std	Y+20, r25	; 0x14
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8b 89       	ldd	r24, Y+19	; 0x13
    23b4:	9c 89       	ldd	r25, Y+20	; 0x14
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <SevSeg_SevErrStateDisplayMax+0x154>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <SevSeg_SevErrStateDisplayMax+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6d 89       	ldd	r22, Y+21	; 0x15
    23be:	7e 89       	ldd	r23, Y+22	; 0x16
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	98 8d       	ldd	r25, Y+24	; 0x18
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9c 8b       	std	Y+20, r25	; 0x14
    23ce:	8b 8b       	std	Y+19, r24	; 0x13
    23d0:	8b 89       	ldd	r24, Y+19	; 0x13
    23d2:	9c 89       	ldd	r25, Y+20	; 0x14
    23d4:	98 8b       	std	Y+16, r25	; 0x10
    23d6:	8f 87       	std	Y+15, r24	; 0x0f
    23d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23da:	98 89       	ldd	r25, Y+16	; 0x10
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <SevSeg_SevErrStateDisplayMax+0x19c>
    23e0:	98 8b       	std	Y+16, r25	; 0x10
    23e2:	8f 87       	std	Y+15, r24	; 0x0f
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    23e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	8e 8f       	std	Y+30, r24	; 0x1e
    23ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ec:	8a 30       	cpi	r24, 0x0A	; 10
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <SevSeg_SevErrStateDisplayMax+0x1b2>
    23f0:	78 cf       	rjmp	.-272    	; 0x22e2 <SevSeg_SevErrStateDisplayMax+0xa2>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    23f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	19 f0       	breq	.+6      	; 0x23fe <SevSeg_SevErrStateDisplayMax+0x1be>
    23f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23fa:	84 30       	cpi	r24, 0x04	; 4
    23fc:	11 f4       	brne	.+4      	; 0x2402 <SevSeg_SevErrStateDisplayMax+0x1c2>
						return Number_Error;
    23fe:	1b a2       	std	Y+35, r1	; 0x23
    2400:	cd c0       	rjmp	.+410    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    2402:	82 e0       	ldi	r24, 0x02	; 2
    2404:	8b a3       	std	Y+35, r24	; 0x23
    2406:	ca c0       	rjmp	.+404    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    2408:	e9 a1       	ldd	r30, Y+33	; 0x21
    240a:	fa a1       	ldd	r31, Y+34	; 0x22
    240c:	80 81       	ld	r24, Z
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	09 f0       	breq	.+2      	; 0x2414 <SevSeg_SevErrStateDisplayMax+0x1d4>
    2412:	c2 c0       	rjmp	.+388    	; 0x2598 <SevSeg_SevErrStateDisplayMax+0x358>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    2414:	e9 a1       	ldd	r30, Y+33	; 0x21
    2416:	fa a1       	ldd	r31, Y+34	; 0x22
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	e9 a1       	ldd	r30, Y+33	; 0x21
    241c:	fa a1       	ldd	r31, Y+34	; 0x22
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	69 2f       	mov	r22, r25
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    2428:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    242a:	88 a1       	ldd	r24, Y+32	; 0x20
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	31 f0       	breq	.+12     	; 0x243c <SevSeg_SevErrStateDisplayMax+0x1fc>
    2430:	88 a1       	ldd	r24, Y+32	; 0x20
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	19 f0       	breq	.+6      	; 0x243c <SevSeg_SevErrStateDisplayMax+0x1fc>
    2436:	88 a1       	ldd	r24, Y+32	; 0x20
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	19 f4       	brne	.+6      	; 0x2442 <SevSeg_SevErrStateDisplayMax+0x202>
				return Group_ERROR;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	8b a3       	std	Y+35, r24	; 0x23
    2440:	ad c0       	rjmp	.+346    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else
				{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2442:	e9 a1       	ldd	r30, Y+33	; 0x21
    2444:	fa a1       	ldd	r31, Y+34	; 0x22
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	e9 a1       	ldd	r30, Y+33	; 0x21
    244a:	fa a1       	ldd	r31, Y+34	; 0x22
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	69 2f       	mov	r22, r25
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2456:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    2458:	8f 8d       	ldd	r24, Y+31	; 0x1f
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	31 f0       	breq	.+12     	; 0x246a <SevSeg_SevErrStateDisplayMax+0x22a>
    245e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2460:	84 30       	cpi	r24, 0x04	; 4
    2462:	19 f0       	breq	.+6      	; 0x246a <SevSeg_SevErrStateDisplayMax+0x22a>
    2464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	11 f4       	brne	.+4      	; 0x246e <SevSeg_SevErrStateDisplayMax+0x22e>
					return Number_Error;
    246a:	1b a2       	std	Y+35, r1	; 0x23
    246c:	97 c0       	rjmp	.+302    	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    246e:	1d 8e       	std	Y+29, r1	; 0x1d
    2470:	84 c0       	rjmp	.+264    	; 0x257a <SevSeg_SevErrStateDisplayMax+0x33a>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
    2472:	e9 a1       	ldd	r30, Y+33	; 0x21
    2474:	fa a1       	ldd	r31, Y+34	; 0x22
    2476:	21 81       	ldd	r18, Z+1	; 0x01
    2478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	fc 01       	movw	r30, r24
    2480:	e4 58       	subi	r30, 0x84	; 132
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	90 81       	ld	r25, Z
    2486:	82 2f       	mov	r24, r18
    2488:	69 2f       	mov	r22, r25
    248a:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
    248e:	8f 8f       	std	Y+31, r24	; 0x1f
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a6 e1       	ldi	r26, 0x16	; 22
    2496:	b3 e4       	ldi	r27, 0x43	; 67
    2498:	8b 87       	std	Y+11, r24	; 0x0b
    249a:	9c 87       	std	Y+12, r25	; 0x0c
    249c:	ad 87       	std	Y+13, r26	; 0x0d
    249e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	4a ef       	ldi	r20, 0xFA	; 250
    24ae:	54 e4       	ldi	r21, 0x44	; 68
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	8f 83       	std	Y+7, r24	; 0x07
    24ba:	98 87       	std	Y+8, r25	; 0x08
    24bc:	a9 87       	std	Y+9, r26	; 0x09
    24be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <SevSeg_SevErrStateDisplayMax+0x2a2>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	3f c0       	rjmp	.+126    	; 0x2560 <SevSeg_SevErrStateDisplayMax+0x320>
	else if (__tmp > 65535)
    24e2:	6f 81       	ldd	r22, Y+7	; 0x07
    24e4:	78 85       	ldd	r23, Y+8	; 0x08
    24e6:	89 85       	ldd	r24, Y+9	; 0x09
    24e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	3f ef       	ldi	r19, 0xFF	; 255
    24ee:	4f e7       	ldi	r20, 0x7F	; 127
    24f0:	57 e4       	ldi	r21, 0x47	; 71
    24f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24f6:	18 16       	cp	r1, r24
    24f8:	4c f5       	brge	.+82     	; 0x254c <SevSeg_SevErrStateDisplayMax+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	40 e2       	ldi	r20, 0x20	; 32
    2508:	51 e4       	ldi	r21, 0x41	; 65
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	0f c0       	rjmp	.+30     	; 0x2542 <SevSeg_SevErrStateDisplayMax+0x302>
    2524:	88 ec       	ldi	r24, 0xC8	; 200
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	9c 83       	std	Y+4, r25	; 0x04
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <SevSeg_SevErrStateDisplayMax+0x2f0>
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2538:	8d 81       	ldd	r24, Y+5	; 0x05
    253a:	9e 81       	ldd	r25, Y+6	; 0x06
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	69 f7       	brne	.-38     	; 0x2524 <SevSeg_SevErrStateDisplayMax+0x2e4>
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <SevSeg_SevErrStateDisplayMax+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <SevSeg_SevErrStateDisplayMax+0x32c>
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    2574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	8d 8f       	std	Y+29, r24	; 0x1d
    257a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    257c:	8a 30       	cpi	r24, 0x0A	; 10
    257e:	08 f4       	brcc	.+2      	; 0x2582 <SevSeg_SevErrStateDisplayMax+0x342>
    2580:	78 cf       	rjmp	.-272    	; 0x2472 <SevSeg_SevErrStateDisplayMax+0x232>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    2582:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	19 f0       	breq	.+6      	; 0x258e <SevSeg_SevErrStateDisplayMax+0x34e>
    2588:	8f 8d       	ldd	r24, Y+31	; 0x1f
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	11 f4       	brne	.+4      	; 0x2592 <SevSeg_SevErrStateDisplayMax+0x352>
						return Number_Error;
    258e:	1b a2       	std	Y+35, r1	; 0x23
    2590:	05 c0       	rjmp	.+10     	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    2592:	82 e0       	ldi	r24, 0x02	; 2
    2594:	8b a3       	std	Y+35, r24	; 0x23
    2596:	02 c0       	rjmp	.+4      	; 0x259c <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
	}
	return Seven_OK;
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	8b a3       	std	Y+35, r24	; 0x23
    259c:	8b a1       	ldd	r24, Y+35	; 0x23
}
    259e:	a3 96       	adiw	r28, 0x23	; 35
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <Led_LedErrStateTurnOn>:
 */
#include "../../Common/Definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led){
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <Led_LedErrStateTurnOn+0x6>
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <Led_LedErrStateTurnOn+0x8>
    25b8:	0f 92       	push	r0
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	9c 83       	std	Y+4, r25	; 0x04
    25c0:	8b 83       	std	Y+3, r24	; 0x03
	u8 SetPinErrReturn;
	u8 SetValueErrReturnON;

	SetPinErrReturn=DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_OUT);
    25c2:	eb 81       	ldd	r30, Y+3	; 0x03
    25c4:	fc 81       	ldd	r31, Y+4	; 0x04
    25c6:	80 81       	ld	r24, Z
    25c8:	eb 81       	ldd	r30, Y+3	; 0x03
    25ca:	fc 81       	ldd	r31, Y+4	; 0x04
    25cc:	91 81       	ldd	r25, Z+1	; 0x01
    25ce:	69 2f       	mov	r22, r25
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
    25d6:	8a 83       	std	Y+2, r24	; 0x02
	if(SetPinErrReturn==DIO_ERROR_PORT||SetPinErrReturn==DIO_ERROR_Direction||SetPinErrReturn==DIO_ERROR_PIN){
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	31 f0       	breq	.+12     	; 0x25ea <Led_LedErrStateTurnOn+0x3a>
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	19 f0       	breq	.+6      	; 0x25ea <Led_LedErrStateTurnOn+0x3a>
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	82 30       	cpi	r24, 0x02	; 2
    25e8:	19 f4       	brne	.+6      	; 0x25f0 <Led_LedErrStateTurnOn+0x40>
		return LED_INIT_Error;
    25ea:	86 e0       	ldi	r24, 0x06	; 6
    25ec:	8d 83       	std	Y+5, r24	; 0x05
    25ee:	3e c0       	rjmp	.+124    	; 0x266c <Led_LedErrStateTurnOn+0xbc>
	}
	else{
		if(Led->ConnectionType==Source_Connection){
    25f0:	eb 81       	ldd	r30, Y+3	; 0x03
    25f2:	fc 81       	ldd	r31, Y+4	; 0x04
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	88 23       	and	r24, r24
    25f8:	c9 f4       	brne	.+50     	; 0x262c <Led_LedErrStateTurnOn+0x7c>
			// HIGH = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    25fa:	eb 81       	ldd	r30, Y+3	; 0x03
    25fc:	fc 81       	ldd	r31, Y+4	; 0x04
    25fe:	80 81       	ld	r24, Z
    2600:	eb 81       	ldd	r30, Y+3	; 0x03
    2602:	fc 81       	ldd	r31, Y+4	; 0x04
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	69 2f       	mov	r22, r25
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    260e:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	31 f0       	breq	.+12     	; 0x2622 <Led_LedErrStateTurnOn+0x72>
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	84 30       	cpi	r24, 0x04	; 4
    261a:	19 f0       	breq	.+6      	; 0x2622 <Led_LedErrStateTurnOn+0x72>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	19 f4       	brne	.+6      	; 0x2628 <Led_LedErrStateTurnOn+0x78>
				return LED_ON_Error;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	8d 83       	std	Y+5, r24	; 0x05
    2626:	22 c0       	rjmp	.+68     	; 0x266c <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2628:	1d 82       	std	Y+5, r1	; 0x05
    262a:	20 c0       	rjmp	.+64     	; 0x266c <Led_LedErrStateTurnOn+0xbc>
		}
		else if(Led->ConnectionType==Sink_Connection){
    262c:	eb 81       	ldd	r30, Y+3	; 0x03
    262e:	fc 81       	ldd	r31, Y+4	; 0x04
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	c9 f4       	brne	.+50     	; 0x2668 <Led_LedErrStateTurnOn+0xb8>
			// LOW = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2636:	eb 81       	ldd	r30, Y+3	; 0x03
    2638:	fc 81       	ldd	r31, Y+4	; 0x04
    263a:	80 81       	ld	r24, Z
    263c:	eb 81       	ldd	r30, Y+3	; 0x03
    263e:	fc 81       	ldd	r31, Y+4	; 0x04
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	69 2f       	mov	r22, r25
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    264a:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	31 f0       	breq	.+12     	; 0x265e <Led_LedErrStateTurnOn+0xae>
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	84 30       	cpi	r24, 0x04	; 4
    2656:	19 f0       	breq	.+6      	; 0x265e <Led_LedErrStateTurnOn+0xae>
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	82 30       	cpi	r24, 0x02	; 2
    265c:	19 f4       	brne	.+6      	; 0x2664 <Led_LedErrStateTurnOn+0xb4>
				return LED_ON_Error;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	04 c0       	rjmp	.+8      	; 0x266c <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2664:	1d 82       	std	Y+5, r1	; 0x05
    2666:	02 c0       	rjmp	.+4      	; 0x266c <Led_LedErrStateTurnOn+0xbc>
		}
		else
			return LED_Connection_Error;
    2668:	84 e0       	ldi	r24, 0x04	; 4
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	8d 81       	ldd	r24, Y+5	; 0x05

	}
}
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led){
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	00 d0       	rcall	.+0      	; 0x2684 <Led_LedErrStateTurnOff+0x6>
    2684:	00 d0       	rcall	.+0      	; 0x2686 <Led_LedErrStateTurnOff+0x8>
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	9b 83       	std	Y+3, r25	; 0x03
    268c:	8a 83       	std	Y+2, r24	; 0x02
	u8 SetValueErrReturnOFF;
	if(Led->ConnectionType==Source_Connection){
    268e:	ea 81       	ldd	r30, Y+2	; 0x02
    2690:	fb 81       	ldd	r31, Y+3	; 0x03
    2692:	82 81       	ldd	r24, Z+2	; 0x02
    2694:	88 23       	and	r24, r24
    2696:	d1 f4       	brne	.+52     	; 0x26cc <Led_LedErrStateTurnOff+0x4e>
		// HIGH = ON
		SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2698:	ea 81       	ldd	r30, Y+2	; 0x02
    269a:	fb 81       	ldd	r31, Y+3	; 0x03
    269c:	80 81       	ld	r24, Z
    269e:	ea 81       	ldd	r30, Y+2	; 0x02
    26a0:	fb 81       	ldd	r31, Y+3	; 0x03
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	69 2f       	mov	r22, r25
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    26ac:	89 83       	std	Y+1, r24	; 0x01
		if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	81 30       	cpi	r24, 0x01	; 1
    26b2:	31 f0       	breq	.+12     	; 0x26c0 <Led_LedErrStateTurnOff+0x42>
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	84 30       	cpi	r24, 0x04	; 4
    26b8:	19 f0       	breq	.+6      	; 0x26c0 <Led_LedErrStateTurnOff+0x42>
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	19 f4       	brne	.+6      	; 0x26c6 <Led_LedErrStateTurnOff+0x48>
			return LED_OFF_Error;
    26c0:	83 e0       	ldi	r24, 0x03	; 3
    26c2:	8c 83       	std	Y+4, r24	; 0x04
    26c4:	24 c0       	rjmp	.+72     	; 0x270e <Led_LedErrStateTurnOff+0x90>
		}
		else
			return LED_OFF_OK;
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	8c 83       	std	Y+4, r24	; 0x04
    26ca:	21 c0       	rjmp	.+66     	; 0x270e <Led_LedErrStateTurnOff+0x90>
	}
else if(Led->ConnectionType==Sink_Connection){
    26cc:	ea 81       	ldd	r30, Y+2	; 0x02
    26ce:	fb 81       	ldd	r31, Y+3	; 0x03
    26d0:	82 81       	ldd	r24, Z+2	; 0x02
    26d2:	81 30       	cpi	r24, 0x01	; 1
    26d4:	d1 f4       	brne	.+52     	; 0x270a <Led_LedErrStateTurnOff+0x8c>
	// LOW = ON
	SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    26d6:	ea 81       	ldd	r30, Y+2	; 0x02
    26d8:	fb 81       	ldd	r31, Y+3	; 0x03
    26da:	80 81       	ld	r24, Z
    26dc:	ea 81       	ldd	r30, Y+2	; 0x02
    26de:	fb 81       	ldd	r31, Y+3	; 0x03
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	69 2f       	mov	r22, r25
    26e4:	41 e0       	ldi	r20, 0x01	; 1
    26e6:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    26ea:	89 83       	std	Y+1, r24	; 0x01
	if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	31 f0       	breq	.+12     	; 0x26fe <Led_LedErrStateTurnOff+0x80>
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	84 30       	cpi	r24, 0x04	; 4
    26f6:	19 f0       	breq	.+6      	; 0x26fe <Led_LedErrStateTurnOff+0x80>
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	19 f4       	brne	.+6      	; 0x2704 <Led_LedErrStateTurnOff+0x86>
		return LED_OFF_Error;
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	8c 83       	std	Y+4, r24	; 0x04
    2702:	05 c0       	rjmp	.+10     	; 0x270e <Led_LedErrStateTurnOff+0x90>
	}
	else
		return LED_OFF_OK;
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	8c 83       	std	Y+4, r24	; 0x04
    2708:	02 c0       	rjmp	.+4      	; 0x270e <Led_LedErrStateTurnOff+0x90>
}
else
	return LED_Connection_Error;
    270a:	84 e0       	ldi	r24, 0x04	; 4
    270c:	8c 83       	std	Y+4, r24	; 0x04
    270e:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <LCD_VoidSendCommand>:
 */
#include"../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"
#include <stdlib.h>

void LCD_VoidSendCommand(u8 Local_Command,LCD_Info *lcd){
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	6f 97       	sbiw	r28, 0x1f	; 31
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	8d 8f       	std	Y+29, r24	; 0x1d
    2734:	7f 8f       	std	Y+31, r23	; 0x1f
    2736:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOw*/
	DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_LOW);
    2738:	ee 8d       	ldd	r30, Y+30	; 0x1e
    273a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    273c:	80 81       	ld	r24, Z
    273e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2740:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	69 2f       	mov	r22, r25
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    274c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    274e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2754:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	69 2f       	mov	r22, r25
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
	/*Group = Command*/
	DIO_ErrStateSetPortValue(lcd->Data_group,Local_Command);
    2760:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2762:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2764:	86 81       	ldd	r24, Z+6	; 0x06
    2766:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2768:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    276c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    276e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2770:	84 81       	ldd	r24, Z+4	; 0x04
    2772:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2774:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2776:	95 81       	ldd	r25, Z+5	; 0x05
    2778:	69 2f       	mov	r22, r25
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	a0 e8       	ldi	r26, 0x80	; 128
    2786:	bf e3       	ldi	r27, 0x3F	; 63
    2788:	89 8f       	std	Y+25, r24	; 0x19
    278a:	9a 8f       	std	Y+26, r25	; 0x1a
    278c:	ab 8f       	std	Y+27, r26	; 0x1b
    278e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	69 8d       	ldd	r22, Y+25	; 0x19
    2792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a ef       	ldi	r20, 0xFA	; 250
    279e:	54 e4       	ldi	r21, 0x44	; 68
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	8d 8b       	std	Y+21, r24	; 0x15
    27aa:	9e 8b       	std	Y+22, r25	; 0x16
    27ac:	af 8b       	std	Y+23, r26	; 0x17
    27ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b0:	6d 89       	ldd	r22, Y+21	; 0x15
    27b2:	7e 89       	ldd	r23, Y+22	; 0x16
    27b4:	8f 89       	ldd	r24, Y+23	; 0x17
    27b6:	98 8d       	ldd	r25, Y+24	; 0x18
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9c 8b       	std	Y+20, r25	; 0x14
    27ce:	8b 8b       	std	Y+19, r24	; 0x13
    27d0:	3f c0       	rjmp	.+126    	; 0x2850 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    27d2:	6d 89       	ldd	r22, Y+21	; 0x15
    27d4:	7e 89       	ldd	r23, Y+22	; 0x16
    27d6:	8f 89       	ldd	r24, Y+23	; 0x17
    27d8:	98 8d       	ldd	r25, Y+24	; 0x18
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	4c f5       	brge	.+82     	; 0x283c <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	69 8d       	ldd	r22, Y+25	; 0x19
    27ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e2       	ldi	r20, 0x20	; 32
    27f8:	51 e4       	ldi	r21, 0x41	; 65
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9c 8b       	std	Y+20, r25	; 0x14
    2810:	8b 8b       	std	Y+19, r24	; 0x13
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <LCD_VoidSendCommand+0x114>
    2814:	88 ec       	ldi	r24, 0xC8	; 200
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9a 8b       	std	Y+18, r25	; 0x12
    281a:	89 8b       	std	Y+17, r24	; 0x11
    281c:	89 89       	ldd	r24, Y+17	; 0x11
    281e:	9a 89       	ldd	r25, Y+18	; 0x12
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <LCD_VoidSendCommand+0x102>
    2824:	9a 8b       	std	Y+18, r25	; 0x12
    2826:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	8b 89       	ldd	r24, Y+19	; 0x13
    282a:	9c 89       	ldd	r25, Y+20	; 0x14
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	9c 8b       	std	Y+20, r25	; 0x14
    2830:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2832:	8b 89       	ldd	r24, Y+19	; 0x13
    2834:	9c 89       	ldd	r25, Y+20	; 0x14
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f7       	brne	.-38     	; 0x2814 <LCD_VoidSendCommand+0xf6>
    283a:	14 c0       	rjmp	.+40     	; 0x2864 <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283c:	6d 89       	ldd	r22, Y+21	; 0x15
    283e:	7e 89       	ldd	r23, Y+22	; 0x16
    2840:	8f 89       	ldd	r24, Y+23	; 0x17
    2842:	98 8d       	ldd	r25, Y+24	; 0x18
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	8b 89       	ldd	r24, Y+19	; 0x13
    2852:	9c 89       	ldd	r25, Y+20	; 0x14
    2854:	98 8b       	std	Y+16, r25	; 0x10
    2856:	8f 87       	std	Y+15, r24	; 0x0f
    2858:	8f 85       	ldd	r24, Y+15	; 0x0f
    285a:	98 89       	ldd	r25, Y+16	; 0x10
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <LCD_VoidSendCommand+0x13e>
    2860:	98 8b       	std	Y+16, r25	; 0x10
    2862:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2864:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2866:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2868:	84 81       	ldd	r24, Z+4	; 0x04
    286a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    286c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    286e:	95 81       	ldd	r25, Z+5	; 0x05
    2870:	69 2f       	mov	r22, r25
    2872:	40 e0       	ldi	r20, 0x00	; 0
    2874:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e8       	ldi	r26, 0x80	; 128
    287e:	bf e3       	ldi	r27, 0x3F	; 63
    2880:	8b 87       	std	Y+11, r24	; 0x0b
    2882:	9c 87       	std	Y+12, r25	; 0x0c
    2884:	ad 87       	std	Y+13, r26	; 0x0d
    2886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	98 87       	std	Y+8, r25	; 0x08
    28a4:	a9 87       	std	Y+9, r26	; 0x09
    28a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	0f c0       	rjmp	.+30     	; 0x292a <LCD_VoidSendCommand+0x20c>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <LCD_VoidSendCommand+0x1fa>
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <LCD_VoidSendCommand+0x1ee>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_VoidSendCommand+0x236>
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	if(Local_Command==0x01)
    295c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	39 f4       	brne	.+14     	; 0x2970 <LCD_VoidSendCommand+0x252>
		LCD_VoidGoToXY(0,0,lcd);
    2962:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2964:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	a9 01       	movw	r20, r18
    296c:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
}
    2970:	6f 96       	adiw	r28, 0x1f	; 31
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <LCD_VoidSendChar>:

u8 LCD_VoidSendChar(u8 Local_Char,LCD_Info *lcd,LCD_Line_Info *Type)
{
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	c9 55       	subi	r28, 0x59	; 89
    2990:	d0 40       	sbci	r29, 0x00	; 0
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	fe 01       	movw	r30, r28
    299e:	eb 5a       	subi	r30, 0xAB	; 171
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 83       	st	Z, r24
    29a4:	fe 01       	movw	r30, r28
    29a6:	ea 5a       	subi	r30, 0xAA	; 170
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	71 83       	std	Z+1, r23	; 0x01
    29ac:	60 83       	st	Z, r22
    29ae:	fe 01       	movw	r30, r28
    29b0:	e8 5a       	subi	r30, 0xA8	; 168
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	51 83       	std	Z+1, r21	; 0x01
    29b6:	40 83       	st	Z, r20
	static u8 SwitchingCounter;
	static u8 SecondLineCounter,FirstLineCounter;

	if(Type->OneLine==NO&&Type->TwoLines==YES){
    29b8:	fe 01       	movw	r30, r28
    29ba:	e8 5a       	subi	r30, 0xA8	; 168
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	01 90       	ld	r0, Z+
    29c0:	f0 81       	ld	r31, Z
    29c2:	e0 2d       	mov	r30, r0
    29c4:	80 81       	ld	r24, Z
    29c6:	88 23       	and	r24, r24
    29c8:	09 f0       	breq	.+2      	; 0x29cc <LCD_VoidSendChar+0x4a>
    29ca:	12 c3       	rjmp	.+1572   	; 0x2ff0 <LCD_VoidSendChar+0x66e>
    29cc:	fe 01       	movw	r30, r28
    29ce:	e8 5a       	subi	r30, 0xA8	; 168
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	01 90       	ld	r0, Z+
    29d4:	f0 81       	ld	r31, Z
    29d6:	e0 2d       	mov	r30, r0
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	09 f0       	breq	.+2      	; 0x29e0 <LCD_VoidSendChar+0x5e>
    29de:	08 c3       	rjmp	.+1552   	; 0x2ff0 <LCD_VoidSendChar+0x66e>
		if(SwitchingCounter<16){
    29e0:	80 91 b2 00 	lds	r24, 0x00B2
    29e4:	80 31       	cpi	r24, 0x10	; 16
    29e6:	08 f0       	brcs	.+2      	; 0x29ea <LCD_VoidSendChar+0x68>
    29e8:	a3 c1       	rjmp	.+838    	; 0x2d30 <LCD_VoidSendChar+0x3ae>
			LCD_VoidGoToXY(FirstLineCounter,0,lcd);
    29ea:	80 91 b0 00 	lds	r24, 0x00B0
    29ee:	fe 01       	movw	r30, r28
    29f0:	ea 5a       	subi	r30, 0xAA	; 170
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	20 81       	ld	r18, Z
    29f6:	31 81       	ldd	r19, Z+1	; 0x01
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	a9 01       	movw	r20, r18
    29fc:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2a00:	fe 01       	movw	r30, r28
    2a02:	ea 5a       	subi	r30, 0xAA	; 170
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	01 90       	ld	r0, Z+
    2a08:	f0 81       	ld	r31, Z
    2a0a:	e0 2d       	mov	r30, r0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ea 5a       	subi	r30, 0xAA	; 170
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	01 90       	ld	r0, Z+
    2a16:	f0 81       	ld	r31, Z
    2a18:	e0 2d       	mov	r30, r0
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	69 2f       	mov	r22, r25
    2a1e:	41 e0       	ldi	r20, 0x01	; 1
    2a20:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2a24:	fe 01       	movw	r30, r28
    2a26:	ea 5a       	subi	r30, 0xAA	; 170
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	01 90       	ld	r0, Z+
    2a2c:	f0 81       	ld	r31, Z
    2a2e:	e0 2d       	mov	r30, r0
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	fe 01       	movw	r30, r28
    2a34:	ea 5a       	subi	r30, 0xAA	; 170
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	01 90       	ld	r0, Z+
    2a3a:	f0 81       	ld	r31, Z
    2a3c:	e0 2d       	mov	r30, r0
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	69 2f       	mov	r22, r25
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ea 5a       	subi	r30, 0xAA	; 170
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	01 90       	ld	r0, Z+
    2a50:	f0 81       	ld	r31, Z
    2a52:	e0 2d       	mov	r30, r0
    2a54:	86 81       	ldd	r24, Z+6	; 0x06
    2a56:	fe 01       	movw	r30, r28
    2a58:	eb 5a       	subi	r30, 0xAB	; 171
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	60 81       	ld	r22, Z
    2a5e:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2a62:	fe 01       	movw	r30, r28
    2a64:	ea 5a       	subi	r30, 0xAA	; 170
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	01 90       	ld	r0, Z+
    2a6a:	f0 81       	ld	r31, Z
    2a6c:	e0 2d       	mov	r30, r0
    2a6e:	84 81       	ldd	r24, Z+4	; 0x04
    2a70:	fe 01       	movw	r30, r28
    2a72:	ea 5a       	subi	r30, 0xAA	; 170
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	01 90       	ld	r0, Z+
    2a78:	f0 81       	ld	r31, Z
    2a7a:	e0 2d       	mov	r30, r0
    2a7c:	95 81       	ldd	r25, Z+5	; 0x05
    2a7e:	69 2f       	mov	r22, r25
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2a86:	fe 01       	movw	r30, r28
    2a88:	ef 5a       	subi	r30, 0xAF	; 175
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	80 83       	st	Z, r24
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	a2 83       	std	Z+2, r26	; 0x02
    2a9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	8e 01       	movw	r16, r28
    2a9e:	03 5b       	subi	r16, 0xB3	; 179
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	ef 5a       	subi	r30, 0xAF	; 175
    2aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa8:	60 81       	ld	r22, Z
    2aaa:	71 81       	ldd	r23, Z+1	; 0x01
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a ef       	ldi	r20, 0xFA	; 250
    2ab6:	54 e4       	ldi	r21, 0x44	; 68
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	80 83       	st	Z, r24
    2ac4:	91 83       	std	Z+1, r25	; 0x01
    2ac6:	a2 83       	std	Z+2, r26	; 0x02
    2ac8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aca:	fe 01       	movw	r30, r28
    2acc:	e3 5b       	subi	r30, 0xB3	; 179
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	60 81       	ld	r22, Z
    2ad2:	71 81       	ldd	r23, Z+1	; 0x01
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	40 e8       	ldi	r20, 0x80	; 128
    2ade:	5f e3       	ldi	r21, 0x3F	; 63
    2ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae4:	88 23       	and	r24, r24
    2ae6:	44 f4       	brge	.+16     	; 0x2af8 <LCD_VoidSendChar+0x176>
		__ticks = 1;
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e5 5b       	subi	r30, 0xB5	; 181
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	91 83       	std	Z+1, r25	; 0x01
    2af4:	80 83       	st	Z, r24
    2af6:	64 c0       	rjmp	.+200    	; 0x2bc0 <LCD_VoidSendChar+0x23e>
	else if (__tmp > 65535)
    2af8:	fe 01       	movw	r30, r28
    2afa:	e3 5b       	subi	r30, 0xB3	; 179
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	0c f0       	brlt	.+2      	; 0x2b18 <LCD_VoidSendChar+0x196>
    2b16:	43 c0       	rjmp	.+134    	; 0x2b9e <LCD_VoidSendChar+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ef 5a       	subi	r30, 0xAF	; 175
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	60 81       	ld	r22, Z
    2b20:	71 81       	ldd	r23, Z+1	; 0x01
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	93 81       	ldd	r25, Z+3	; 0x03
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8e 01       	movw	r16, r28
    2b38:	05 5b       	subi	r16, 0xB5	; 181
    2b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	f8 01       	movw	r30, r16
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
    2b4e:	1f c0       	rjmp	.+62     	; 0x2b8e <LCD_VoidSendChar+0x20c>
    2b50:	fe 01       	movw	r30, r28
    2b52:	e7 5b       	subi	r30, 0xB7	; 183
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	88 ec       	ldi	r24, 0xC8	; 200
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e7 5b       	subi	r30, 0xB7	; 183
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	80 81       	ld	r24, Z
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_VoidSendChar+0x1e6>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e7 5b       	subi	r30, 0xB7	; 183
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	de 01       	movw	r26, r28
    2b78:	a5 5b       	subi	r26, 0xB5	; 181
    2b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e5 5b       	subi	r30, 0xB5	; 181
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	11 96       	adiw	r26, 0x01	; 1
    2b8a:	9c 93       	st	X, r25
    2b8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e5 5b       	subi	r30, 0xB5	; 181
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	80 81       	ld	r24, Z
    2b96:	91 81       	ldd	r25, Z+1	; 0x01
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	d1 f6       	brne	.-76     	; 0x2b50 <LCD_VoidSendChar+0x1ce>
    2b9c:	27 c0       	rjmp	.+78     	; 0x2bec <LCD_VoidSendChar+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	8e 01       	movw	r16, r28
    2ba0:	05 5b       	subi	r16, 0xB5	; 181
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	e3 5b       	subi	r30, 0xB3	; 179
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	60 81       	ld	r22, Z
    2bac:	71 81       	ldd	r23, Z+1	; 0x01
    2bae:	82 81       	ldd	r24, Z+2	; 0x02
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	f8 01       	movw	r30, r16
    2bbc:	91 83       	std	Z+1, r25	; 0x01
    2bbe:	80 83       	st	Z, r24
    2bc0:	de 01       	movw	r26, r28
    2bc2:	a9 5b       	subi	r26, 0xB9	; 185
    2bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e5 5b       	subi	r30, 0xB5	; 181
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	8d 93       	st	X+, r24
    2bd2:	9c 93       	st	X, r25
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 5b       	subi	r30, 0xB9	; 185
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_VoidSendChar+0x25c>
    2be2:	fe 01       	movw	r30, r28
    2be4:	e9 5b       	subi	r30, 0xB9	; 185
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2bec:	fe 01       	movw	r30, r28
    2bee:	ea 5a       	subi	r30, 0xAA	; 170
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	01 90       	ld	r0, Z+
    2bf4:	f0 81       	ld	r31, Z
    2bf6:	e0 2d       	mov	r30, r0
    2bf8:	84 81       	ldd	r24, Z+4	; 0x04
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	ea 5a       	subi	r30, 0xAA	; 170
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	01 90       	ld	r0, Z+
    2c02:	f0 81       	ld	r31, Z
    2c04:	e0 2d       	mov	r30, r0
    2c06:	95 81       	ldd	r25, Z+5	; 0x05
    2c08:	69 2f       	mov	r22, r25
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2c10:	fe 01       	movw	r30, r28
    2c12:	ed 5b       	subi	r30, 0xBD	; 189
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	a0 e8       	ldi	r26, 0x80	; 128
    2c1c:	bf e3       	ldi	r27, 0x3F	; 63
    2c1e:	80 83       	st	Z, r24
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	a2 83       	std	Z+2, r26	; 0x02
    2c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c26:	8e 01       	movw	r16, r28
    2c28:	01 5c       	subi	r16, 0xC1	; 193
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ed 5b       	subi	r30, 0xBD	; 189
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	93 81       	ldd	r25, Z+3	; 0x03
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	4a ef       	ldi	r20, 0xFA	; 250
    2c40:	54 e4       	ldi	r21, 0x44	; 68
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	f8 01       	movw	r30, r16
    2c4c:	80 83       	st	Z, r24
    2c4e:	91 83       	std	Z+1, r25	; 0x01
    2c50:	a2 83       	std	Z+2, r26	; 0x02
    2c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c54:	fe 01       	movw	r30, r28
    2c56:	ff 96       	adiw	r30, 0x3f	; 63
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_VoidSendChar+0x2f8>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9e af       	std	Y+62, r25	; 0x3e
    2c76:	8d af       	std	Y+61, r24	; 0x3d
    2c78:	46 c0       	rjmp	.+140    	; 0x2d06 <LCD_VoidSendChar+0x384>
	else if (__tmp > 65535)
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ff 96       	adiw	r30, 0x3f	; 63
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	3f ef       	ldi	r19, 0xFF	; 255
    2c8a:	4f e7       	ldi	r20, 0x7F	; 127
    2c8c:	57 e4       	ldi	r21, 0x47	; 71
    2c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c92:	18 16       	cp	r1, r24
    2c94:	64 f5       	brge	.+88     	; 0x2cee <LCD_VoidSendChar+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 5b       	subi	r30, 0xBD	; 189
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	cd 01       	movw	r24, r26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9e af       	std	Y+62, r25	; 0x3e
    2cc2:	8d af       	std	Y+61, r24	; 0x3d
    2cc4:	0f c0       	rjmp	.+30     	; 0x2ce4 <LCD_VoidSendChar+0x362>
    2cc6:	88 ec       	ldi	r24, 0xC8	; 200
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9c af       	std	Y+60, r25	; 0x3c
    2ccc:	8b af       	std	Y+59, r24	; 0x3b
    2cce:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cd0:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_VoidSendChar+0x350>
    2cd6:	9c af       	std	Y+60, r25	; 0x3c
    2cd8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cda:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cdc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	9e af       	std	Y+62, r25	; 0x3e
    2ce2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ce8:	00 97       	sbiw	r24, 0x00	; 0
    2cea:	69 f7       	brne	.-38     	; 0x2cc6 <LCD_VoidSendChar+0x344>
    2cec:	16 c0       	rjmp	.+44     	; 0x2d1a <LCD_VoidSendChar+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ff 96       	adiw	r30, 0x3f	; 63
    2cf2:	60 81       	ld	r22, Z
    2cf4:	71 81       	ldd	r23, Z+1	; 0x01
    2cf6:	82 81       	ldd	r24, Z+2	; 0x02
    2cf8:	93 81       	ldd	r25, Z+3	; 0x03
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9e af       	std	Y+62, r25	; 0x3e
    2d04:	8d af       	std	Y+61, r24	; 0x3d
    2d06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d0a:	9a af       	std	Y+58, r25	; 0x3a
    2d0c:	89 af       	std	Y+57, r24	; 0x39
    2d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d10:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <LCD_VoidSendChar+0x390>
    2d16:	9a af       	std	Y+58, r25	; 0x3a
    2d18:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1);
			SwitchingCounter++;
    2d1a:	80 91 b2 00 	lds	r24, 0x00B2
    2d1e:	8f 5f       	subi	r24, 0xFF	; 255
    2d20:	80 93 b2 00 	sts	0x00B2, r24
			FirstLineCounter++;
    2d24:	80 91 b0 00 	lds	r24, 0x00B0
    2d28:	8f 5f       	subi	r24, 0xFF	; 255
    2d2a:	80 93 b0 00 	sts	0x00B0, r24
    2d2e:	c8 c2       	rjmp	.+1424   	; 0x32c0 <LCD_VoidSendChar+0x93e>
		}
		else if(SwitchingCounter>15&&SwitchingCounter<32){
    2d30:	80 91 b2 00 	lds	r24, 0x00B2
    2d34:	80 31       	cpi	r24, 0x10	; 16
    2d36:	08 f4       	brcc	.+2      	; 0x2d3a <LCD_VoidSendChar+0x3b8>
    2d38:	54 c1       	rjmp	.+680    	; 0x2fe2 <LCD_VoidSendChar+0x660>
    2d3a:	80 91 b2 00 	lds	r24, 0x00B2
    2d3e:	80 32       	cpi	r24, 0x20	; 32
    2d40:	08 f0       	brcs	.+2      	; 0x2d44 <LCD_VoidSendChar+0x3c2>
    2d42:	4f c1       	rjmp	.+670    	; 0x2fe2 <LCD_VoidSendChar+0x660>
			LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    2d44:	80 91 b1 00 	lds	r24, 0x00B1
    2d48:	fe 01       	movw	r30, r28
    2d4a:	ea 5a       	subi	r30, 0xAA	; 170
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	20 81       	ld	r18, Z
    2d50:	31 81       	ldd	r19, Z+1	; 0x01
    2d52:	61 e0       	ldi	r22, 0x01	; 1
    2d54:	a9 01       	movw	r20, r18
    2d56:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	ea 5a       	subi	r30, 0xAA	; 170
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	01 90       	ld	r0, Z+
    2d62:	f0 81       	ld	r31, Z
    2d64:	e0 2d       	mov	r30, r0
    2d66:	80 81       	ld	r24, Z
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ea 5a       	subi	r30, 0xAA	; 170
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	01 90       	ld	r0, Z+
    2d70:	f0 81       	ld	r31, Z
    2d72:	e0 2d       	mov	r30, r0
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	69 2f       	mov	r22, r25
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2d7e:	fe 01       	movw	r30, r28
    2d80:	ea 5a       	subi	r30, 0xAA	; 170
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	01 90       	ld	r0, Z+
    2d86:	f0 81       	ld	r31, Z
    2d88:	e0 2d       	mov	r30, r0
    2d8a:	82 81       	ldd	r24, Z+2	; 0x02
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	ea 5a       	subi	r30, 0xAA	; 170
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	01 90       	ld	r0, Z+
    2d94:	f0 81       	ld	r31, Z
    2d96:	e0 2d       	mov	r30, r0
    2d98:	93 81       	ldd	r25, Z+3	; 0x03
    2d9a:	69 2f       	mov	r22, r25
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2da2:	fe 01       	movw	r30, r28
    2da4:	ea 5a       	subi	r30, 0xAA	; 170
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	01 90       	ld	r0, Z+
    2daa:	f0 81       	ld	r31, Z
    2dac:	e0 2d       	mov	r30, r0
    2dae:	86 81       	ldd	r24, Z+6	; 0x06
    2db0:	fe 01       	movw	r30, r28
    2db2:	eb 5a       	subi	r30, 0xAB	; 171
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	60 81       	ld	r22, Z
    2db8:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	ea 5a       	subi	r30, 0xAA	; 170
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	01 90       	ld	r0, Z+
    2dc4:	f0 81       	ld	r31, Z
    2dc6:	e0 2d       	mov	r30, r0
    2dc8:	84 81       	ldd	r24, Z+4	; 0x04
    2dca:	fe 01       	movw	r30, r28
    2dcc:	ea 5a       	subi	r30, 0xAA	; 170
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	01 90       	ld	r0, Z+
    2dd2:	f0 81       	ld	r31, Z
    2dd4:	e0 2d       	mov	r30, r0
    2dd6:	95 81       	ldd	r25, Z+5	; 0x05
    2dd8:	69 2f       	mov	r22, r25
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e8       	ldi	r26, 0x80	; 128
    2de6:	bf e3       	ldi	r27, 0x3F	; 63
    2de8:	8d ab       	std	Y+53, r24	; 0x35
    2dea:	9e ab       	std	Y+54, r25	; 0x36
    2dec:	af ab       	std	Y+55, r26	; 0x37
    2dee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	6d a9       	ldd	r22, Y+53	; 0x35
    2df2:	7e a9       	ldd	r23, Y+54	; 0x36
    2df4:	8f a9       	ldd	r24, Y+55	; 0x37
    2df6:	98 ad       	ldd	r25, Y+56	; 0x38
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a ef       	ldi	r20, 0xFA	; 250
    2dfe:	54 e4       	ldi	r21, 0x44	; 68
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	89 ab       	std	Y+49, r24	; 0x31
    2e0a:	9a ab       	std	Y+50, r25	; 0x32
    2e0c:	ab ab       	std	Y+51, r26	; 0x33
    2e0e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e10:	69 a9       	ldd	r22, Y+49	; 0x31
    2e12:	7a a9       	ldd	r23, Y+50	; 0x32
    2e14:	8b a9       	ldd	r24, Y+51	; 0x33
    2e16:	9c a9       	ldd	r25, Y+52	; 0x34
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <LCD_VoidSendChar+0x4b0>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	98 ab       	std	Y+48, r25	; 0x30
    2e2e:	8f a7       	std	Y+47, r24	; 0x2f
    2e30:	3f c0       	rjmp	.+126    	; 0x2eb0 <LCD_VoidSendChar+0x52e>
	else if (__tmp > 65535)
    2e32:	69 a9       	ldd	r22, Y+49	; 0x31
    2e34:	7a a9       	ldd	r23, Y+50	; 0x32
    2e36:	8b a9       	ldd	r24, Y+51	; 0x33
    2e38:	9c a9       	ldd	r25, Y+52	; 0x34
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	4c f5       	brge	.+82     	; 0x2e9c <LCD_VoidSendChar+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e50:	98 ad       	ldd	r25, Y+56	; 0x38
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e2       	ldi	r20, 0x20	; 32
    2e58:	51 e4       	ldi	r21, 0x41	; 65
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	98 ab       	std	Y+48, r25	; 0x30
    2e70:	8f a7       	std	Y+47, r24	; 0x2f
    2e72:	0f c0       	rjmp	.+30     	; 0x2e92 <LCD_VoidSendChar+0x510>
    2e74:	88 ec       	ldi	r24, 0xC8	; 200
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9e a7       	std	Y+46, r25	; 0x2e
    2e7a:	8d a7       	std	Y+45, r24	; 0x2d
    2e7c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e7e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <LCD_VoidSendChar+0x4fe>
    2e84:	9e a7       	std	Y+46, r25	; 0x2e
    2e86:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	98 ab       	std	Y+48, r25	; 0x30
    2e90:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e94:	98 a9       	ldd	r25, Y+48	; 0x30
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	69 f7       	brne	.-38     	; 0x2e74 <LCD_VoidSendChar+0x4f2>
    2e9a:	14 c0       	rjmp	.+40     	; 0x2ec4 <LCD_VoidSendChar+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2ea0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	98 ab       	std	Y+48, r25	; 0x30
    2eae:	8f a7       	std	Y+47, r24	; 0x2f
    2eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb4:	9c a7       	std	Y+44, r25	; 0x2c
    2eb6:	8b a7       	std	Y+43, r24	; 0x2b
    2eb8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eba:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_VoidSendChar+0x53a>
    2ec0:	9c a7       	std	Y+44, r25	; 0x2c
    2ec2:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ea 5a       	subi	r30, 0xAA	; 170
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	01 90       	ld	r0, Z+
    2ecc:	f0 81       	ld	r31, Z
    2ece:	e0 2d       	mov	r30, r0
    2ed0:	84 81       	ldd	r24, Z+4	; 0x04
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ea 5a       	subi	r30, 0xAA	; 170
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	01 90       	ld	r0, Z+
    2eda:	f0 81       	ld	r31, Z
    2edc:	e0 2d       	mov	r30, r0
    2ede:	95 81       	ldd	r25, Z+5	; 0x05
    2ee0:	69 2f       	mov	r22, r25
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	a0 e8       	ldi	r26, 0x80	; 128
    2eee:	bf e3       	ldi	r27, 0x3F	; 63
    2ef0:	8f a3       	std	Y+39, r24	; 0x27
    2ef2:	98 a7       	std	Y+40, r25	; 0x28
    2ef4:	a9 a7       	std	Y+41, r26	; 0x29
    2ef6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef8:	6f a1       	ldd	r22, Y+39	; 0x27
    2efa:	78 a5       	ldd	r23, Y+40	; 0x28
    2efc:	89 a5       	ldd	r24, Y+41	; 0x29
    2efe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4a ef       	ldi	r20, 0xFA	; 250
    2f06:	54 e4       	ldi	r21, 0x44	; 68
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	8b a3       	std	Y+35, r24	; 0x23
    2f12:	9c a3       	std	Y+36, r25	; 0x24
    2f14:	ad a3       	std	Y+37, r26	; 0x25
    2f16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f18:	6b a1       	ldd	r22, Y+35	; 0x23
    2f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <LCD_VoidSendChar+0x5b8>
		__ticks = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9a a3       	std	Y+34, r25	; 0x22
    2f36:	89 a3       	std	Y+33, r24	; 0x21
    2f38:	3f c0       	rjmp	.+126    	; 0x2fb8 <LCD_VoidSendChar+0x636>
	else if (__tmp > 65535)
    2f3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f40:	9e a1       	ldd	r25, Y+38	; 0x26
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	3f ef       	ldi	r19, 0xFF	; 255
    2f46:	4f e7       	ldi	r20, 0x7F	; 127
    2f48:	57 e4       	ldi	r21, 0x47	; 71
    2f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4e:	18 16       	cp	r1, r24
    2f50:	4c f5       	brge	.+82     	; 0x2fa4 <LCD_VoidSendChar+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f52:	6f a1       	ldd	r22, Y+39	; 0x27
    2f54:	78 a5       	ldd	r23, Y+40	; 0x28
    2f56:	89 a5       	ldd	r24, Y+41	; 0x29
    2f58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e2       	ldi	r20, 0x20	; 32
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	bc 01       	movw	r22, r24
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	9a a3       	std	Y+34, r25	; 0x22
    2f78:	89 a3       	std	Y+33, r24	; 0x21
    2f7a:	0f c0       	rjmp	.+30     	; 0x2f9a <LCD_VoidSendChar+0x618>
    2f7c:	88 ec       	ldi	r24, 0xC8	; 200
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	98 a3       	std	Y+32, r25	; 0x20
    2f82:	8f 8f       	std	Y+31, r24	; 0x1f
    2f84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f86:	98 a1       	ldd	r25, Y+32	; 0x20
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <LCD_VoidSendChar+0x606>
    2f8c:	98 a3       	std	Y+32, r25	; 0x20
    2f8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f90:	89 a1       	ldd	r24, Y+33	; 0x21
    2f92:	9a a1       	ldd	r25, Y+34	; 0x22
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	9a a3       	std	Y+34, r25	; 0x22
    2f98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	69 f7       	brne	.-38     	; 0x2f7c <LCD_VoidSendChar+0x5fa>
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <LCD_VoidSendChar+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    2faa:	9e a1       	ldd	r25, Y+38	; 0x26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	9a a3       	std	Y+34, r25	; 0x22
    2fb6:	89 a3       	std	Y+33, r24	; 0x21
    2fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2fba:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fbe:	8d 8f       	std	Y+29, r24	; 0x1d
    2fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LCD_VoidSendChar+0x642>
    2fc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2fca:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			SwitchingCounter++;
    2fcc:	80 91 b2 00 	lds	r24, 0x00B2
    2fd0:	8f 5f       	subi	r24, 0xFF	; 255
    2fd2:	80 93 b2 00 	sts	0x00B2, r24
			SecondLineCounter++;
    2fd6:	80 91 b1 00 	lds	r24, 0x00B1
    2fda:	8f 5f       	subi	r24, 0xFF	; 255
    2fdc:	80 93 b1 00 	sts	0x00B1, r24
    2fe0:	6f c1       	rjmp	.+734    	; 0x32c0 <LCD_VoidSendChar+0x93e>
		}
		else{
			SwitchingCounter=0;
    2fe2:	10 92 b2 00 	sts	0x00B2, r1
			FirstLineCounter=0;
    2fe6:	10 92 b0 00 	sts	0x00B0, r1
			SecondLineCounter=0;
    2fea:	10 92 b1 00 	sts	0x00B1, r1
    2fee:	68 c1       	rjmp	.+720    	; 0x32c0 <LCD_VoidSendChar+0x93e>
			//LCD_VoidSendCommand(0x01,lcd);
		}
	}
	else if(Type->OneLine==YES&&Type->TwoLines==NO){
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e8 5a       	subi	r30, 0xA8	; 168
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	01 90       	ld	r0, Z+
    2ff8:	f0 81       	ld	r31, Z
    2ffa:	e0 2d       	mov	r30, r0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	09 f0       	breq	.+2      	; 0x3004 <LCD_VoidSendChar+0x682>
    3002:	5e c1       	rjmp	.+700    	; 0x32c0 <LCD_VoidSendChar+0x93e>
    3004:	fe 01       	movw	r30, r28
    3006:	e8 5a       	subi	r30, 0xA8	; 168
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	01 90       	ld	r0, Z+
    300c:	f0 81       	ld	r31, Z
    300e:	e0 2d       	mov	r30, r0
    3010:	81 81       	ldd	r24, Z+1	; 0x01
    3012:	88 23       	and	r24, r24
    3014:	09 f0       	breq	.+2      	; 0x3018 <LCD_VoidSendChar+0x696>
    3016:	54 c1       	rjmp	.+680    	; 0x32c0 <LCD_VoidSendChar+0x93e>
			if(SwitchingCounter<16&&Local_Char!='\0'){
    3018:	80 91 b2 00 	lds	r24, 0x00B2
    301c:	80 31       	cpi	r24, 0x10	; 16
    301e:	08 f0       	brcs	.+2      	; 0x3022 <LCD_VoidSendChar+0x6a0>
    3020:	4b c1       	rjmp	.+662    	; 0x32b8 <LCD_VoidSendChar+0x936>
    3022:	fe 01       	movw	r30, r28
    3024:	eb 5a       	subi	r30, 0xAB	; 171
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	88 23       	and	r24, r24
    302c:	09 f4       	brne	.+2      	; 0x3030 <LCD_VoidSendChar+0x6ae>
    302e:	44 c1       	rjmp	.+648    	; 0x32b8 <LCD_VoidSendChar+0x936>
				//LCD_VoidGoToXY(0,0,lcd);
				/*RS->LOw*/
				DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    3030:	fe 01       	movw	r30, r28
    3032:	ea 5a       	subi	r30, 0xAA	; 170
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	01 90       	ld	r0, Z+
    3038:	f0 81       	ld	r31, Z
    303a:	e0 2d       	mov	r30, r0
    303c:	80 81       	ld	r24, Z
    303e:	fe 01       	movw	r30, r28
    3040:	ea 5a       	subi	r30, 0xAA	; 170
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	01 90       	ld	r0, Z+
    3046:	f0 81       	ld	r31, Z
    3048:	e0 2d       	mov	r30, r0
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	69 2f       	mov	r22, r25
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
				/*RW-> LOW*/
				DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    3054:	fe 01       	movw	r30, r28
    3056:	ea 5a       	subi	r30, 0xAA	; 170
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	01 90       	ld	r0, Z+
    305c:	f0 81       	ld	r31, Z
    305e:	e0 2d       	mov	r30, r0
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	fe 01       	movw	r30, r28
    3064:	ea 5a       	subi	r30, 0xAA	; 170
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	01 90       	ld	r0, Z+
    306a:	f0 81       	ld	r31, Z
    306c:	e0 2d       	mov	r30, r0
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	69 2f       	mov	r22, r25
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
				/*Group = Command*/
				DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    3078:	fe 01       	movw	r30, r28
    307a:	ea 5a       	subi	r30, 0xAA	; 170
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	01 90       	ld	r0, Z+
    3080:	f0 81       	ld	r31, Z
    3082:	e0 2d       	mov	r30, r0
    3084:	86 81       	ldd	r24, Z+6	; 0x06
    3086:	fe 01       	movw	r30, r28
    3088:	eb 5a       	subi	r30, 0xAB	; 171
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	60 81       	ld	r22, Z
    308e:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_ErrStateSetPortValue>
				/*Enable*/
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    3092:	fe 01       	movw	r30, r28
    3094:	ea 5a       	subi	r30, 0xAA	; 170
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	01 90       	ld	r0, Z+
    309a:	f0 81       	ld	r31, Z
    309c:	e0 2d       	mov	r30, r0
    309e:	84 81       	ldd	r24, Z+4	; 0x04
    30a0:	fe 01       	movw	r30, r28
    30a2:	ea 5a       	subi	r30, 0xAA	; 170
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	01 90       	ld	r0, Z+
    30a8:	f0 81       	ld	r31, Z
    30aa:	e0 2d       	mov	r30, r0
    30ac:	95 81       	ldd	r25, Z+5	; 0x05
    30ae:	69 2f       	mov	r22, r25
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	a0 e8       	ldi	r26, 0x80	; 128
    30bc:	bf e3       	ldi	r27, 0x3F	; 63
    30be:	89 8f       	std	Y+25, r24	; 0x19
    30c0:	9a 8f       	std	Y+26, r25	; 0x1a
    30c2:	ab 8f       	std	Y+27, r26	; 0x1b
    30c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c6:	69 8d       	ldd	r22, Y+25	; 0x19
    30c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4a ef       	ldi	r20, 0xFA	; 250
    30d4:	54 e4       	ldi	r21, 0x44	; 68
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8d 8b       	std	Y+21, r24	; 0x15
    30e0:	9e 8b       	std	Y+22, r25	; 0x16
    30e2:	af 8b       	std	Y+23, r26	; 0x17
    30e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e6:	6d 89       	ldd	r22, Y+21	; 0x15
    30e8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ea:	8f 89       	ldd	r24, Y+23	; 0x17
    30ec:	98 8d       	ldd	r25, Y+24	; 0x18
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e8       	ldi	r20, 0x80	; 128
    30f4:	5f e3       	ldi	r21, 0x3F	; 63
    30f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fa:	88 23       	and	r24, r24
    30fc:	2c f4       	brge	.+10     	; 0x3108 <LCD_VoidSendChar+0x786>
		__ticks = 1;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 8b       	std	Y+20, r25	; 0x14
    3104:	8b 8b       	std	Y+19, r24	; 0x13
    3106:	3f c0       	rjmp	.+126    	; 0x3186 <LCD_VoidSendChar+0x804>
	else if (__tmp > 65535)
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	4c f5       	brge	.+82     	; 0x3172 <LCD_VoidSendChar+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3120:	69 8d       	ldd	r22, Y+25	; 0x19
    3122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
    3148:	0f c0       	rjmp	.+30     	; 0x3168 <LCD_VoidSendChar+0x7e6>
    314a:	88 ec       	ldi	r24, 0xC8	; 200
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9a 8b       	std	Y+18, r25	; 0x12
    3150:	89 8b       	std	Y+17, r24	; 0x11
    3152:	89 89       	ldd	r24, Y+17	; 0x11
    3154:	9a 89       	ldd	r25, Y+18	; 0x12
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <LCD_VoidSendChar+0x7d4>
    315a:	9a 8b       	std	Y+18, r25	; 0x12
    315c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	8b 89       	ldd	r24, Y+19	; 0x13
    3160:	9c 89       	ldd	r25, Y+20	; 0x14
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	9c 8b       	std	Y+20, r25	; 0x14
    3166:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3168:	8b 89       	ldd	r24, Y+19	; 0x13
    316a:	9c 89       	ldd	r25, Y+20	; 0x14
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	69 f7       	brne	.-38     	; 0x314a <LCD_VoidSendChar+0x7c8>
    3170:	14 c0       	rjmp	.+40     	; 0x319a <LCD_VoidSendChar+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3172:	6d 89       	ldd	r22, Y+21	; 0x15
    3174:	7e 89       	ldd	r23, Y+22	; 0x16
    3176:	8f 89       	ldd	r24, Y+23	; 0x17
    3178:	98 8d       	ldd	r25, Y+24	; 0x18
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9c 8b       	std	Y+20, r25	; 0x14
    3184:	8b 8b       	std	Y+19, r24	; 0x13
    3186:	8b 89       	ldd	r24, Y+19	; 0x13
    3188:	9c 89       	ldd	r25, Y+20	; 0x14
    318a:	98 8b       	std	Y+16, r25	; 0x10
    318c:	8f 87       	std	Y+15, r24	; 0x0f
    318e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3190:	98 89       	ldd	r25, Y+16	; 0x10
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_VoidSendChar+0x810>
    3196:	98 8b       	std	Y+16, r25	; 0x10
    3198:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1);
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    319a:	fe 01       	movw	r30, r28
    319c:	ea 5a       	subi	r30, 0xAA	; 170
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	01 90       	ld	r0, Z+
    31a2:	f0 81       	ld	r31, Z
    31a4:	e0 2d       	mov	r30, r0
    31a6:	84 81       	ldd	r24, Z+4	; 0x04
    31a8:	fe 01       	movw	r30, r28
    31aa:	ea 5a       	subi	r30, 0xAA	; 170
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	01 90       	ld	r0, Z+
    31b0:	f0 81       	ld	r31, Z
    31b2:	e0 2d       	mov	r30, r0
    31b4:	95 81       	ldd	r25, Z+5	; 0x05
    31b6:	69 2f       	mov	r22, r25
    31b8:	40 e0       	ldi	r20, 0x00	; 0
    31ba:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	a0 e8       	ldi	r26, 0x80	; 128
    31c4:	bf e3       	ldi	r27, 0x3F	; 63
    31c6:	8b 87       	std	Y+11, r24	; 0x0b
    31c8:	9c 87       	std	Y+12, r25	; 0x0c
    31ca:	ad 87       	std	Y+13, r26	; 0x0d
    31cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4a ef       	ldi	r20, 0xFA	; 250
    31dc:	54 e4       	ldi	r21, 0x44	; 68
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	8f 83       	std	Y+7, r24	; 0x07
    31e8:	98 87       	std	Y+8, r25	; 0x08
    31ea:	a9 87       	std	Y+9, r26	; 0x09
    31ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e8       	ldi	r20, 0x80	; 128
    31fc:	5f e3       	ldi	r21, 0x3F	; 63
    31fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3202:	88 23       	and	r24, r24
    3204:	2c f4       	brge	.+10     	; 0x3210 <LCD_VoidSendChar+0x88e>
		__ticks = 1;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	9e 83       	std	Y+6, r25	; 0x06
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	3f c0       	rjmp	.+126    	; 0x328e <LCD_VoidSendChar+0x90c>
	else if (__tmp > 65535)
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3224:	18 16       	cp	r1, r24
    3226:	4c f5       	brge	.+82     	; 0x327a <LCD_VoidSendChar+0x8f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	6b 85       	ldd	r22, Y+11	; 0x0b
    322a:	7c 85       	ldd	r23, Y+12	; 0x0c
    322c:	8d 85       	ldd	r24, Y+13	; 0x0d
    322e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e2       	ldi	r20, 0x20	; 32
    3236:	51 e4       	ldi	r21, 0x41	; 65
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	9e 83       	std	Y+6, r25	; 0x06
    324e:	8d 83       	std	Y+5, r24	; 0x05
    3250:	0f c0       	rjmp	.+30     	; 0x3270 <LCD_VoidSendChar+0x8ee>
    3252:	88 ec       	ldi	r24, 0xC8	; 200
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9c 83       	std	Y+4, r25	; 0x04
    3258:	8b 83       	std	Y+3, r24	; 0x03
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	9c 81       	ldd	r25, Y+4	; 0x04
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <LCD_VoidSendChar+0x8dc>
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3266:	8d 81       	ldd	r24, Y+5	; 0x05
    3268:	9e 81       	ldd	r25, Y+6	; 0x06
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	9e 83       	std	Y+6, r25	; 0x06
    326e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	69 f7       	brne	.-38     	; 0x3252 <LCD_VoidSendChar+0x8d0>
    3278:	14 c0       	rjmp	.+40     	; 0x32a2 <LCD_VoidSendChar+0x920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327a:	6f 81       	ldd	r22, Y+7	; 0x07
    327c:	78 85       	ldd	r23, Y+8	; 0x08
    327e:	89 85       	ldd	r24, Y+9	; 0x09
    3280:	9a 85       	ldd	r25, Y+10	; 0x0a
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	9e 83       	std	Y+6, r25	; 0x06
    328c:	8d 83       	std	Y+5, r24	; 0x05
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	9a 83       	std	Y+2, r25	; 0x02
    3294:	89 83       	std	Y+1, r24	; 0x01
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	9a 81       	ldd	r25, Y+2	; 0x02
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <LCD_VoidSendChar+0x918>
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1);
				SwitchingCounter++;
    32a2:	80 91 b2 00 	lds	r24, 0x00B2
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	80 93 b2 00 	sts	0x00B2, r24
				FirstLineCounter++;
    32ac:	80 91 b0 00 	lds	r24, 0x00B0
    32b0:	8f 5f       	subi	r24, 0xFF	; 255
    32b2:	80 93 b0 00 	sts	0x00B0, r24
    32b6:	04 c0       	rjmp	.+8      	; 0x32c0 <LCD_VoidSendChar+0x93e>
			}
			else{
				FirstLineCounter=0;
    32b8:	10 92 b0 00 	sts	0x00B0, r1
				SwitchingCounter=0;
    32bc:	10 92 b2 00 	sts	0x00B2, r1
				//LCD_VoidSendCommand(0x01,lcd);
			}
		}
	return 0;
    32c0:	80 e0       	ldi	r24, 0x00	; 0

}
    32c2:	c7 5a       	subi	r28, 0xA7	; 167
    32c4:	df 4f       	sbci	r29, 0xFF	; 255
    32c6:	0f b6       	in	r0, 0x3f	; 63
    32c8:	f8 94       	cli
    32ca:	de bf       	out	0x3e, r29	; 62
    32cc:	0f be       	out	0x3f, r0	; 63
    32ce:	cd bf       	out	0x3d, r28	; 61
    32d0:	cf 91       	pop	r28
    32d2:	df 91       	pop	r29
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	08 95       	ret

000032da <LCD_VoidInit>:
void LCD_VoidInit(LCD_Info *lcd){
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	ea 97       	sbiw	r28, 0x3a	; 58
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	9a af       	std	Y+58, r25	; 0x3a
    32f0:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(lcd->RS_group,lcd->RS_pin,DIO_OUT);
    32f2:	e9 ad       	ldd	r30, Y+57	; 0x39
    32f4:	fa ad       	ldd	r31, Y+58	; 0x3a
    32f6:	80 81       	ld	r24, Z
    32f8:	e9 ad       	ldd	r30, Y+57	; 0x39
    32fa:	fa ad       	ldd	r31, Y+58	; 0x3a
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	69 2f       	mov	r22, r25
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->RW_group,lcd->RW_pin,DIO_OUT);
    3306:	e9 ad       	ldd	r30, Y+57	; 0x39
    3308:	fa ad       	ldd	r31, Y+58	; 0x3a
    330a:	82 81       	ldd	r24, Z+2	; 0x02
    330c:	e9 ad       	ldd	r30, Y+57	; 0x39
    330e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	69 2f       	mov	r22, r25
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_group,lcd->E_pin,DIO_OUT);
    331a:	e9 ad       	ldd	r30, Y+57	; 0x39
    331c:	fa ad       	ldd	r31, Y+58	; 0x3a
    331e:	84 81       	ldd	r24, Z+4	; 0x04
    3320:	e9 ad       	ldd	r30, Y+57	; 0x39
    3322:	fa ad       	ldd	r31, Y+58	; 0x3a
    3324:	95 81       	ldd	r25, Z+5	; 0x05
    3326:	69 2f       	mov	r22, r25
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_group,0xFF);
    332e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3330:	fa ad       	ldd	r31, Y+58	; 0x3a
    3332:	86 81       	ldd	r24, Z+6	; 0x06
    3334:	6f ef       	ldi	r22, 0xFF	; 255
    3336:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <DIO_ErrStateSetGroupDirection>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	a0 e2       	ldi	r26, 0x20	; 32
    3340:	b2 e4       	ldi	r27, 0x42	; 66
    3342:	8d ab       	std	Y+53, r24	; 0x35
    3344:	9e ab       	std	Y+54, r25	; 0x36
    3346:	af ab       	std	Y+55, r26	; 0x37
    3348:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334a:	6d a9       	ldd	r22, Y+53	; 0x35
    334c:	7e a9       	ldd	r23, Y+54	; 0x36
    334e:	8f a9       	ldd	r24, Y+55	; 0x37
    3350:	98 ad       	ldd	r25, Y+56	; 0x38
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	4a ef       	ldi	r20, 0xFA	; 250
    3358:	54 e4       	ldi	r21, 0x44	; 68
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	89 ab       	std	Y+49, r24	; 0x31
    3364:	9a ab       	std	Y+50, r25	; 0x32
    3366:	ab ab       	std	Y+51, r26	; 0x33
    3368:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    336a:	69 a9       	ldd	r22, Y+49	; 0x31
    336c:	7a a9       	ldd	r23, Y+50	; 0x32
    336e:	8b a9       	ldd	r24, Y+51	; 0x33
    3370:	9c a9       	ldd	r25, Y+52	; 0x34
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e8       	ldi	r20, 0x80	; 128
    3378:	5f e3       	ldi	r21, 0x3F	; 63
    337a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    337e:	88 23       	and	r24, r24
    3380:	2c f4       	brge	.+10     	; 0x338c <LCD_VoidInit+0xb2>
		__ticks = 1;
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	98 ab       	std	Y+48, r25	; 0x30
    3388:	8f a7       	std	Y+47, r24	; 0x2f
    338a:	3f c0       	rjmp	.+126    	; 0x340a <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    338c:	69 a9       	ldd	r22, Y+49	; 0x31
    338e:	7a a9       	ldd	r23, Y+50	; 0x32
    3390:	8b a9       	ldd	r24, Y+51	; 0x33
    3392:	9c a9       	ldd	r25, Y+52	; 0x34
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	3f ef       	ldi	r19, 0xFF	; 255
    3398:	4f e7       	ldi	r20, 0x7F	; 127
    339a:	57 e4       	ldi	r21, 0x47	; 71
    339c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33a0:	18 16       	cp	r1, r24
    33a2:	4c f5       	brge	.+82     	; 0x33f6 <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a4:	6d a9       	ldd	r22, Y+53	; 0x35
    33a6:	7e a9       	ldd	r23, Y+54	; 0x36
    33a8:	8f a9       	ldd	r24, Y+55	; 0x37
    33aa:	98 ad       	ldd	r25, Y+56	; 0x38
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e2       	ldi	r20, 0x20	; 32
    33b2:	51 e4       	ldi	r21, 0x41	; 65
    33b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	98 ab       	std	Y+48, r25	; 0x30
    33ca:	8f a7       	std	Y+47, r24	; 0x2f
    33cc:	0f c0       	rjmp	.+30     	; 0x33ec <LCD_VoidInit+0x112>
    33ce:	88 ec       	ldi	r24, 0xC8	; 200
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9e a7       	std	Y+46, r25	; 0x2e
    33d4:	8d a7       	std	Y+45, r24	; 0x2d
    33d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <LCD_VoidInit+0x100>
    33de:	9e a7       	std	Y+46, r25	; 0x2e
    33e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33e4:	98 a9       	ldd	r25, Y+48	; 0x30
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	98 ab       	std	Y+48, r25	; 0x30
    33ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ee:	98 a9       	ldd	r25, Y+48	; 0x30
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	69 f7       	brne	.-38     	; 0x33ce <LCD_VoidInit+0xf4>
    33f4:	14 c0       	rjmp	.+40     	; 0x341e <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f6:	69 a9       	ldd	r22, Y+49	; 0x31
    33f8:	7a a9       	ldd	r23, Y+50	; 0x32
    33fa:	8b a9       	ldd	r24, Y+51	; 0x33
    33fc:	9c a9       	ldd	r25, Y+52	; 0x34
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	98 ab       	std	Y+48, r25	; 0x30
    3408:	8f a7       	std	Y+47, r24	; 0x2f
    340a:	8f a5       	ldd	r24, Y+47	; 0x2f
    340c:	98 a9       	ldd	r25, Y+48	; 0x30
    340e:	9c a7       	std	Y+44, r25	; 0x2c
    3410:	8b a7       	std	Y+43, r24	; 0x2b
    3412:	8b a5       	ldd	r24, Y+43	; 0x2b
    3414:	9c a5       	ldd	r25, Y+44	; 0x2c
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCD_VoidInit+0x13c>
    341a:	9c a7       	std	Y+44, r25	; 0x2c
    341c:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait more than 30 ms*/
	_delay_ms(40);
	/*Sent function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    341e:	29 ad       	ldd	r18, Y+57	; 0x39
    3420:	3a ad       	ldd	r19, Y+58	; 0x3a
    3422:	88 e3       	ldi	r24, 0x38	; 56
    3424:	b9 01       	movw	r22, r18
    3426:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_VoidSendCommand>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a0 e8       	ldi	r26, 0x80	; 128
    3430:	bf e3       	ldi	r27, 0x3F	; 63
    3432:	8f a3       	std	Y+39, r24	; 0x27
    3434:	98 a7       	std	Y+40, r25	; 0x28
    3436:	a9 a7       	std	Y+41, r26	; 0x29
    3438:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    343a:	6f a1       	ldd	r22, Y+39	; 0x27
    343c:	78 a5       	ldd	r23, Y+40	; 0x28
    343e:	89 a5       	ldd	r24, Y+41	; 0x29
    3440:	9a a5       	ldd	r25, Y+42	; 0x2a
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	4a ef       	ldi	r20, 0xFA	; 250
    3448:	54 e4       	ldi	r21, 0x44	; 68
    344a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	8b a3       	std	Y+35, r24	; 0x23
    3454:	9c a3       	std	Y+36, r25	; 0x24
    3456:	ad a3       	std	Y+37, r26	; 0x25
    3458:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    345a:	6b a1       	ldd	r22, Y+35	; 0x23
    345c:	7c a1       	ldd	r23, Y+36	; 0x24
    345e:	8d a1       	ldd	r24, Y+37	; 0x25
    3460:	9e a1       	ldd	r25, Y+38	; 0x26
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	2c f4       	brge	.+10     	; 0x347c <LCD_VoidInit+0x1a2>
		__ticks = 1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	9a a3       	std	Y+34, r25	; 0x22
    3478:	89 a3       	std	Y+33, r24	; 0x21
    347a:	3f c0       	rjmp	.+126    	; 0x34fa <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    347c:	6b a1       	ldd	r22, Y+35	; 0x23
    347e:	7c a1       	ldd	r23, Y+36	; 0x24
    3480:	8d a1       	ldd	r24, Y+37	; 0x25
    3482:	9e a1       	ldd	r25, Y+38	; 0x26
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	3f ef       	ldi	r19, 0xFF	; 255
    3488:	4f e7       	ldi	r20, 0x7F	; 127
    348a:	57 e4       	ldi	r21, 0x47	; 71
    348c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3490:	18 16       	cp	r1, r24
    3492:	4c f5       	brge	.+82     	; 0x34e6 <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3494:	6f a1       	ldd	r22, Y+39	; 0x27
    3496:	78 a5       	ldd	r23, Y+40	; 0x28
    3498:	89 a5       	ldd	r24, Y+41	; 0x29
    349a:	9a a5       	ldd	r25, Y+42	; 0x2a
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	40 e2       	ldi	r20, 0x20	; 32
    34a2:	51 e4       	ldi	r21, 0x41	; 65
    34a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	9a a3       	std	Y+34, r25	; 0x22
    34ba:	89 a3       	std	Y+33, r24	; 0x21
    34bc:	0f c0       	rjmp	.+30     	; 0x34dc <LCD_VoidInit+0x202>
    34be:	88 ec       	ldi	r24, 0xC8	; 200
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	98 a3       	std	Y+32, r25	; 0x20
    34c4:	8f 8f       	std	Y+31, r24	; 0x1f
    34c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34c8:	98 a1       	ldd	r25, Y+32	; 0x20
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <LCD_VoidInit+0x1f0>
    34ce:	98 a3       	std	Y+32, r25	; 0x20
    34d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d2:	89 a1       	ldd	r24, Y+33	; 0x21
    34d4:	9a a1       	ldd	r25, Y+34	; 0x22
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	9a a3       	std	Y+34, r25	; 0x22
    34da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34dc:	89 a1       	ldd	r24, Y+33	; 0x21
    34de:	9a a1       	ldd	r25, Y+34	; 0x22
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	69 f7       	brne	.-38     	; 0x34be <LCD_VoidInit+0x1e4>
    34e4:	14 c0       	rjmp	.+40     	; 0x350e <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e6:	6b a1       	ldd	r22, Y+35	; 0x23
    34e8:	7c a1       	ldd	r23, Y+36	; 0x24
    34ea:	8d a1       	ldd	r24, Y+37	; 0x25
    34ec:	9e a1       	ldd	r25, Y+38	; 0x26
    34ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f2:	dc 01       	movw	r26, r24
    34f4:	cb 01       	movw	r24, r22
    34f6:	9a a3       	std	Y+34, r25	; 0x22
    34f8:	89 a3       	std	Y+33, r24	; 0x21
    34fa:	89 a1       	ldd	r24, Y+33	; 0x21
    34fc:	9a a1       	ldd	r25, Y+34	; 0x22
    34fe:	9e 8f       	std	Y+30, r25	; 0x1e
    3500:	8d 8f       	std	Y+29, r24	; 0x1d
    3502:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3504:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <LCD_VoidInit+0x22c>
    350a:	9e 8f       	std	Y+30, r25	; 0x1e
    350c:	8d 8f       	std	Y+29, r24	; 0x1d
	/*WAIT 39us*/
	_delay_ms(1);
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    350e:	29 ad       	ldd	r18, Y+57	; 0x39
    3510:	3a ad       	ldd	r19, Y+58	; 0x3a
    3512:	8e e0       	ldi	r24, 0x0E	; 14
    3514:	b9 01       	movw	r22, r18
    3516:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_VoidSendCommand>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	a0 e8       	ldi	r26, 0x80	; 128
    3520:	bf e3       	ldi	r27, 0x3F	; 63
    3522:	89 8f       	std	Y+25, r24	; 0x19
    3524:	9a 8f       	std	Y+26, r25	; 0x1a
    3526:	ab 8f       	std	Y+27, r26	; 0x1b
    3528:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	69 8d       	ldd	r22, Y+25	; 0x19
    352c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	4a ef       	ldi	r20, 0xFA	; 250
    3538:	54 e4       	ldi	r21, 0x44	; 68
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8d 8b       	std	Y+21, r24	; 0x15
    3544:	9e 8b       	std	Y+22, r25	; 0x16
    3546:	af 8b       	std	Y+23, r26	; 0x17
    3548:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    354a:	6d 89       	ldd	r22, Y+21	; 0x15
    354c:	7e 89       	ldd	r23, Y+22	; 0x16
    354e:	8f 89       	ldd	r24, Y+23	; 0x17
    3550:	98 8d       	ldd	r25, Y+24	; 0x18
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	2c f4       	brge	.+10     	; 0x356c <LCD_VoidInit+0x292>
		__ticks = 1;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	9c 8b       	std	Y+20, r25	; 0x14
    3568:	8b 8b       	std	Y+19, r24	; 0x13
    356a:	3f c0       	rjmp	.+126    	; 0x35ea <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    356c:	6d 89       	ldd	r22, Y+21	; 0x15
    356e:	7e 89       	ldd	r23, Y+22	; 0x16
    3570:	8f 89       	ldd	r24, Y+23	; 0x17
    3572:	98 8d       	ldd	r25, Y+24	; 0x18
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	3f ef       	ldi	r19, 0xFF	; 255
    3578:	4f e7       	ldi	r20, 0x7F	; 127
    357a:	57 e4       	ldi	r21, 0x47	; 71
    357c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3580:	18 16       	cp	r1, r24
    3582:	4c f5       	brge	.+82     	; 0x35d6 <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	69 8d       	ldd	r22, Y+25	; 0x19
    3586:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3588:	8b 8d       	ldd	r24, Y+27	; 0x1b
    358a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e2       	ldi	r20, 0x20	; 32
    3592:	51 e4       	ldi	r21, 0x41	; 65
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9c 8b       	std	Y+20, r25	; 0x14
    35aa:	8b 8b       	std	Y+19, r24	; 0x13
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <LCD_VoidInit+0x2f2>
    35ae:	88 ec       	ldi	r24, 0xC8	; 200
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9a 8b       	std	Y+18, r25	; 0x12
    35b4:	89 8b       	std	Y+17, r24	; 0x11
    35b6:	89 89       	ldd	r24, Y+17	; 0x11
    35b8:	9a 89       	ldd	r25, Y+18	; 0x12
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <LCD_VoidInit+0x2e0>
    35be:	9a 8b       	std	Y+18, r25	; 0x12
    35c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c2:	8b 89       	ldd	r24, Y+19	; 0x13
    35c4:	9c 89       	ldd	r25, Y+20	; 0x14
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	9c 8b       	std	Y+20, r25	; 0x14
    35ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35cc:	8b 89       	ldd	r24, Y+19	; 0x13
    35ce:	9c 89       	ldd	r25, Y+20	; 0x14
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	69 f7       	brne	.-38     	; 0x35ae <LCD_VoidInit+0x2d4>
    35d4:	14 c0       	rjmp	.+40     	; 0x35fe <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d6:	6d 89       	ldd	r22, Y+21	; 0x15
    35d8:	7e 89       	ldd	r23, Y+22	; 0x16
    35da:	8f 89       	ldd	r24, Y+23	; 0x17
    35dc:	98 8d       	ldd	r25, Y+24	; 0x18
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9c 8b       	std	Y+20, r25	; 0x14
    35e8:	8b 8b       	std	Y+19, r24	; 0x13
    35ea:	8b 89       	ldd	r24, Y+19	; 0x13
    35ec:	9c 89       	ldd	r25, Y+20	; 0x14
    35ee:	98 8b       	std	Y+16, r25	; 0x10
    35f0:	8f 87       	std	Y+15, r24	; 0x0f
    35f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f4:	98 89       	ldd	r25, Y+16	; 0x10
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <LCD_VoidInit+0x31c>
    35fa:	98 8b       	std	Y+16, r25	; 0x10
    35fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*LCD Clear Display*/
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    35fe:	29 ad       	ldd	r18, Y+57	; 0x39
    3600:	3a ad       	ldd	r19, Y+58	; 0x3a
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	b9 01       	movw	r22, r18
    3606:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_VoidSendCommand>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a0 e8       	ldi	r26, 0x80	; 128
    3610:	bf e3       	ldi	r27, 0x3F	; 63
    3612:	8b 87       	std	Y+11, r24	; 0x0b
    3614:	9c 87       	std	Y+12, r25	; 0x0c
    3616:	ad 87       	std	Y+13, r26	; 0x0d
    3618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361a:	6b 85       	ldd	r22, Y+11	; 0x0b
    361c:	7c 85       	ldd	r23, Y+12	; 0x0c
    361e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3620:	9e 85       	ldd	r25, Y+14	; 0x0e
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a ef       	ldi	r20, 0xFA	; 250
    3628:	54 e4       	ldi	r21, 0x44	; 68
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	8f 83       	std	Y+7, r24	; 0x07
    3634:	98 87       	std	Y+8, r25	; 0x08
    3636:	a9 87       	std	Y+9, r26	; 0x09
    3638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    363a:	6f 81       	ldd	r22, Y+7	; 0x07
    363c:	78 85       	ldd	r23, Y+8	; 0x08
    363e:	89 85       	ldd	r24, Y+9	; 0x09
    3640:	9a 85       	ldd	r25, Y+10	; 0x0a
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e8       	ldi	r20, 0x80	; 128
    3648:	5f e3       	ldi	r21, 0x3F	; 63
    364a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364e:	88 23       	and	r24, r24
    3650:	2c f4       	brge	.+10     	; 0x365c <LCD_VoidInit+0x382>
		__ticks = 1;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	3f c0       	rjmp	.+126    	; 0x36da <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    365c:	6f 81       	ldd	r22, Y+7	; 0x07
    365e:	78 85       	ldd	r23, Y+8	; 0x08
    3660:	89 85       	ldd	r24, Y+9	; 0x09
    3662:	9a 85       	ldd	r25, Y+10	; 0x0a
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	3f ef       	ldi	r19, 0xFF	; 255
    3668:	4f e7       	ldi	r20, 0x7F	; 127
    366a:	57 e4       	ldi	r21, 0x47	; 71
    366c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3670:	18 16       	cp	r1, r24
    3672:	4c f5       	brge	.+82     	; 0x36c6 <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	6b 85       	ldd	r22, Y+11	; 0x0b
    3676:	7c 85       	ldd	r23, Y+12	; 0x0c
    3678:	8d 85       	ldd	r24, Y+13	; 0x0d
    367a:	9e 85       	ldd	r25, Y+14	; 0x0e
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e2       	ldi	r20, 0x20	; 32
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	9e 83       	std	Y+6, r25	; 0x06
    369a:	8d 83       	std	Y+5, r24	; 0x05
    369c:	0f c0       	rjmp	.+30     	; 0x36bc <LCD_VoidInit+0x3e2>
    369e:	88 ec       	ldi	r24, 0xC8	; 200
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	8b 83       	std	Y+3, r24	; 0x03
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	9c 81       	ldd	r25, Y+4	; 0x04
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <LCD_VoidInit+0x3d0>
    36ae:	9c 83       	std	Y+4, r25	; 0x04
    36b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b2:	8d 81       	ldd	r24, Y+5	; 0x05
    36b4:	9e 81       	ldd	r25, Y+6	; 0x06
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	9e 83       	std	Y+6, r25	; 0x06
    36ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36bc:	8d 81       	ldd	r24, Y+5	; 0x05
    36be:	9e 81       	ldd	r25, Y+6	; 0x06
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	69 f7       	brne	.-38     	; 0x369e <LCD_VoidInit+0x3c4>
    36c4:	14 c0       	rjmp	.+40     	; 0x36ee <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c6:	6f 81       	ldd	r22, Y+7	; 0x07
    36c8:	78 85       	ldd	r23, Y+8	; 0x08
    36ca:	89 85       	ldd	r24, Y+9	; 0x09
    36cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9e 83       	std	Y+6, r25	; 0x06
    36d8:	8d 83       	std	Y+5, r24	; 0x05
    36da:	8d 81       	ldd	r24, Y+5	; 0x05
    36dc:	9e 81       	ldd	r25, Y+6	; 0x06
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	9a 81       	ldd	r25, Y+2	; 0x02
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <LCD_VoidInit+0x40c>
    36ea:	9a 83       	std	Y+2, r25	; 0x02
    36ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    36ee:	ea 96       	adiw	r28, 0x3a	; 58
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <LCD_VoidSendString+0x6>
    3706:	00 d0       	rcall	.+0      	; 0x3708 <LCD_VoidSendString+0x8>
    3708:	00 d0       	rcall	.+0      	; 0x370a <LCD_VoidSendString+0xa>
    370a:	cd b7       	in	r28, 0x3d	; 61
    370c:	de b7       	in	r29, 0x3e	; 62
    370e:	9a 83       	std	Y+2, r25	; 0x02
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	7c 83       	std	Y+4, r23	; 0x04
    3714:	6b 83       	std	Y+3, r22	; 0x03
    3716:	5e 83       	std	Y+6, r21	; 0x06
    3718:	4d 83       	std	Y+5, r20	; 0x05
    371a:	0f c0       	rjmp	.+30     	; 0x373a <LCD_VoidSendString+0x3a>

	while (*Address_String != '\0') {
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
    371c:	e9 81       	ldd	r30, Y+1	; 0x01
    371e:	fa 81       	ldd	r31, Y+2	; 0x02
    3720:	80 81       	ld	r24, Z
    3722:	2b 81       	ldd	r18, Y+3	; 0x03
    3724:	3c 81       	ldd	r19, Y+4	; 0x04
    3726:	4d 81       	ldd	r20, Y+5	; 0x05
    3728:	5e 81       	ldd	r21, Y+6	; 0x06
    372a:	b9 01       	movw	r22, r18
    372c:	0e 94 c1 14 	call	0x2982	; 0x2982 <LCD_VoidSendChar>
		Address_String++; // Move to the next character
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	9a 81       	ldd	r25, Y+2	; 0x02
    3734:	01 96       	adiw	r24, 0x01	; 1
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){

	while (*Address_String != '\0') {
    373a:	e9 81       	ldd	r30, Y+1	; 0x01
    373c:	fa 81       	ldd	r31, Y+2	; 0x02
    373e:	80 81       	ld	r24, Z
    3740:	88 23       	and	r24, r24
    3742:	61 f7       	brne	.-40     	; 0x371c <LCD_VoidSendString+0x1c>
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
		Address_String++; // Move to the next character
	}
}
    3744:	26 96       	adiw	r28, 0x06	; 6
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	08 95       	ret

00003756 <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, LCD_Info *lcd) {
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	00 d0       	rcall	.+0      	; 0x375c <LCD_VoidGoToXY+0x6>
    375c:	00 d0       	rcall	.+0      	; 0x375e <LCD_VoidGoToXY+0x8>
    375e:	0f 92       	push	r0
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	8a 83       	std	Y+2, r24	; 0x02
    3766:	6b 83       	std	Y+3, r22	; 0x03
    3768:	5d 83       	std	Y+5, r21	; 0x05
    376a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Address = 0;
    376c:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the DDRAM address based on the row and column */
	if(Local_YPosition == 0) {
    376e:	8b 81       	ldd	r24, Y+3	; 0x03
    3770:	88 23       	and	r24, r24
    3772:	19 f4       	brne	.+6      	; 0x377a <LCD_VoidGoToXY+0x24>
		Address = LCD_FirstLine + Local_XPosition;
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <LCD_VoidGoToXY+0x2a>
	} else {
		Address = LCD_SecoundLine + Local_XPosition;
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	80 5c       	subi	r24, 0xC0	; 192
    377e:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Send the command to set the DDRAM address */
	LCD_VoidSendCommand(LCD_SetAddressDDRAM | Address, lcd);
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	80 68       	ori	r24, 0x80	; 128
    3784:	2c 81       	ldd	r18, Y+4	; 0x04
    3786:	3d 81       	ldd	r19, Y+5	; 0x05
    3788:	b9 01       	movw	r22, r18
    378a:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_VoidSendCommand>
}
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	0f 90       	pop	r0
    3798:	cf 91       	pop	r28
    379a:	df 91       	pop	r29
    379c:	08 95       	ret

0000379e <LCD_VoidSpecialCharacter>:

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	28 97       	sbiw	r28, 0x08	; 8
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	9b 83       	std	Y+3, r25	; 0x03
    37b4:	8a 83       	std	Y+2, r24	; 0x02
    37b6:	6c 83       	std	Y+4, r22	; 0x04
    37b8:	5e 83       	std	Y+6, r21	; 0x06
    37ba:	4d 83       	std	Y+5, r20	; 0x05
    37bc:	38 87       	std	Y+8, r19	; 0x08
    37be:	2f 83       	std	Y+7, r18	; 0x07
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
    37c0:	8c 81       	ldd	r24, Y+4	; 0x04
    37c2:	88 2f       	mov	r24, r24
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	08 96       	adiw	r24, 0x08	; 8
    37c8:	88 0f       	add	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	88 0f       	add	r24, r24
    37d2:	99 1f       	adc	r25, r25
    37d4:	2d 81       	ldd	r18, Y+5	; 0x05
    37d6:	3e 81       	ldd	r19, Y+6	; 0x06
    37d8:	b9 01       	movw	r22, r18
    37da:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_VoidSendCommand>
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    37de:	19 82       	std	Y+1, r1	; 0x01
    37e0:	13 c0       	rjmp	.+38     	; 0x3808 <LCD_VoidSpecialCharacter+0x6a>
		LCD_VoidSendChar(pattern[i],lcd,Type);
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	9b 81       	ldd	r25, Y+3	; 0x03
    37ec:	fc 01       	movw	r30, r24
    37ee:	e2 0f       	add	r30, r18
    37f0:	f3 1f       	adc	r31, r19
    37f2:	80 81       	ld	r24, Z
    37f4:	2d 81       	ldd	r18, Y+5	; 0x05
    37f6:	3e 81       	ldd	r19, Y+6	; 0x06
    37f8:	4f 81       	ldd	r20, Y+7	; 0x07
    37fa:	58 85       	ldd	r21, Y+8	; 0x08
    37fc:	b9 01       	movw	r22, r18
    37fe:	0e 94 c1 14 	call	0x2982	; 0x2982 <LCD_VoidSendChar>
}

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	8f 5f       	subi	r24, 0xFF	; 255
    3806:	89 83       	std	Y+1, r24	; 0x01
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	88 30       	cpi	r24, 0x08	; 8
    380c:	50 f3       	brcs	.-44     	; 0x37e2 <LCD_VoidSpecialCharacter+0x44>
		LCD_VoidSendChar(pattern[i],lcd,Type);
	}
	/*	Send the cursor to DDRAM + choose location */
	LCD_VoidGoToXY(1,1,lcd);
    380e:	2d 81       	ldd	r18, Y+5	; 0x05
    3810:	3e 81       	ldd	r19, Y+6	; 0x06
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	61 e0       	ldi	r22, 0x01	; 1
    3816:	a9 01       	movw	r20, r18
    3818:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
	LCD_VoidSendChar(location,lcd,Type);
    381c:	2d 81       	ldd	r18, Y+5	; 0x05
    381e:	3e 81       	ldd	r19, Y+6	; 0x06
    3820:	4f 81       	ldd	r20, Y+7	; 0x07
    3822:	58 85       	ldd	r21, Y+8	; 0x08
    3824:	8c 81       	ldd	r24, Y+4	; 0x04
    3826:	b9 01       	movw	r22, r18
    3828:	0e 94 c1 14 	call	0x2982	; 0x2982 <LCD_VoidSendChar>
}
    382c:	28 96       	adiw	r28, 0x08	; 8
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <LCD_VoidSendInt>:
void LCD_VoidSendInt(u32 Recieved_Number,LCD_Info *lcd,LCD_Line_Info *Type){
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	6c 97       	sbiw	r28, 0x1c	; 28
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	6d 8b       	std	Y+21, r22	; 0x15
    3854:	7e 8b       	std	Y+22, r23	; 0x16
    3856:	8f 8b       	std	Y+23, r24	; 0x17
    3858:	98 8f       	std	Y+24, r25	; 0x18
    385a:	5a 8f       	std	Y+26, r21	; 0x1a
    385c:	49 8f       	std	Y+25, r20	; 0x19
    385e:	3c 8f       	std	Y+28, r19	; 0x1c
    3860:	2b 8f       	std	Y+27, r18	; 0x1b
	u8 NumAsString[LCD_StringMax]={' '};
    3862:	8a e0       	ldi	r24, 0x0A	; 10
    3864:	fe 01       	movw	r30, r28
    3866:	3b 96       	adiw	r30, 0x0b	; 11
    3868:	df 01       	movw	r26, r30
    386a:	98 2f       	mov	r25, r24
    386c:	1d 92       	st	X+, r1
    386e:	9a 95       	dec	r25
    3870:	e9 f7       	brne	.-6      	; 0x386c <LCD_VoidSendInt+0x2e>
    3872:	80 e2       	ldi	r24, 0x20	; 32
    3874:	8b 87       	std	Y+11, r24	; 0x0b
	s32 LCD_StringCounter=0,FORCOUNTER;
    3876:	1f 82       	std	Y+7, r1	; 0x07
    3878:	18 86       	std	Y+8, r1	; 0x08
    387a:	19 86       	std	Y+9, r1	; 0x09
    387c:	1a 86       	std	Y+10, r1	; 0x0a
	u8 temp,Err=1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	89 83       	std	Y+1, r24	; 0x01

	if(Recieved_Number==0){
    3882:	8d 89       	ldd	r24, Y+21	; 0x15
    3884:	9e 89       	ldd	r25, Y+22	; 0x16
    3886:	af 89       	ldd	r26, Y+23	; 0x17
    3888:	b8 8d       	ldd	r27, Y+24	; 0x18
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	a1 05       	cpc	r26, r1
    388e:	b1 05       	cpc	r27, r1
    3890:	09 f0       	breq	.+2      	; 0x3894 <LCD_VoidSendInt+0x56>
    3892:	52 c0       	rjmp	.+164    	; 0x3938 <LCD_VoidSendInt+0xfa>
		LCD_VoidSendChar('0',lcd,Type);
    3894:	29 8d       	ldd	r18, Y+25	; 0x19
    3896:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3898:	4b 8d       	ldd	r20, Y+27	; 0x1b
    389a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    389c:	80 e3       	ldi	r24, 0x30	; 48
    389e:	b9 01       	movw	r22, r18
    38a0:	0e 94 c1 14 	call	0x2982	; 0x2982 <LCD_VoidSendChar>
    38a4:	52 c0       	rjmp	.+164    	; 0x394a <LCD_VoidSendInt+0x10c>
	}
	else{
		while(Recieved_Number!=0)
		{
			temp=Recieved_Number%10;
    38a6:	8d 89       	ldd	r24, Y+21	; 0x15
    38a8:	9e 89       	ldd	r25, Y+22	; 0x16
    38aa:	af 89       	ldd	r26, Y+23	; 0x17
    38ac:	b8 8d       	ldd	r27, Y+24	; 0x18
    38ae:	2a e0       	ldi	r18, 0x0A	; 10
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	bc 01       	movw	r22, r24
    38b8:	cd 01       	movw	r24, r26
    38ba:	0e 94 df 21 	call	0x43be	; 0x43be <__udivmodsi4>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	8a 83       	std	Y+2, r24	; 0x02
			Recieved_Number=Recieved_Number-temp;
    38c4:	8a 81       	ldd	r24, Y+2	; 0x02
    38c6:	28 2f       	mov	r18, r24
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	40 e0       	ldi	r20, 0x00	; 0
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	8d 89       	ldd	r24, Y+21	; 0x15
    38d0:	9e 89       	ldd	r25, Y+22	; 0x16
    38d2:	af 89       	ldd	r26, Y+23	; 0x17
    38d4:	b8 8d       	ldd	r27, Y+24	; 0x18
    38d6:	82 1b       	sub	r24, r18
    38d8:	93 0b       	sbc	r25, r19
    38da:	a4 0b       	sbc	r26, r20
    38dc:	b5 0b       	sbc	r27, r21
    38de:	8d 8b       	std	Y+21, r24	; 0x15
    38e0:	9e 8b       	std	Y+22, r25	; 0x16
    38e2:	af 8b       	std	Y+23, r26	; 0x17
    38e4:	b8 8f       	std	Y+24, r27	; 0x18
			NumAsString[LCD_StringCounter]=temp;
    38e6:	8f 81       	ldd	r24, Y+7	; 0x07
    38e8:	98 85       	ldd	r25, Y+8	; 0x08
    38ea:	a9 85       	ldd	r26, Y+9	; 0x09
    38ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    38ee:	9e 01       	movw	r18, r28
    38f0:	25 5f       	subi	r18, 0xF5	; 245
    38f2:	3f 4f       	sbci	r19, 0xFF	; 255
    38f4:	f9 01       	movw	r30, r18
    38f6:	e8 0f       	add	r30, r24
    38f8:	f9 1f       	adc	r31, r25
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	80 83       	st	Z, r24
			Recieved_Number=Recieved_Number/10;
    38fe:	8d 89       	ldd	r24, Y+21	; 0x15
    3900:	9e 89       	ldd	r25, Y+22	; 0x16
    3902:	af 89       	ldd	r26, Y+23	; 0x17
    3904:	b8 8d       	ldd	r27, Y+24	; 0x18
    3906:	2a e0       	ldi	r18, 0x0A	; 10
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	50 e0       	ldi	r21, 0x00	; 0
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	0e 94 df 21 	call	0x43be	; 0x43be <__udivmodsi4>
    3916:	da 01       	movw	r26, r20
    3918:	c9 01       	movw	r24, r18
    391a:	8d 8b       	std	Y+21, r24	; 0x15
    391c:	9e 8b       	std	Y+22, r25	; 0x16
    391e:	af 8b       	std	Y+23, r26	; 0x17
    3920:	b8 8f       	std	Y+24, r27	; 0x18
			LCD_StringCounter++;
    3922:	8f 81       	ldd	r24, Y+7	; 0x07
    3924:	98 85       	ldd	r25, Y+8	; 0x08
    3926:	a9 85       	ldd	r26, Y+9	; 0x09
    3928:	ba 85       	ldd	r27, Y+10	; 0x0a
    392a:	01 96       	adiw	r24, 0x01	; 1
    392c:	a1 1d       	adc	r26, r1
    392e:	b1 1d       	adc	r27, r1
    3930:	8f 83       	std	Y+7, r24	; 0x07
    3932:	98 87       	std	Y+8, r25	; 0x08
    3934:	a9 87       	std	Y+9, r26	; 0x09
    3936:	ba 87       	std	Y+10, r27	; 0x0a

	if(Recieved_Number==0){
		LCD_VoidSendChar('0',lcd,Type);
	}
	else{
		while(Recieved_Number!=0)
    3938:	8d 89       	ldd	r24, Y+21	; 0x15
    393a:	9e 89       	ldd	r25, Y+22	; 0x16
    393c:	af 89       	ldd	r26, Y+23	; 0x17
    393e:	b8 8d       	ldd	r27, Y+24	; 0x18
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	a1 05       	cpc	r26, r1
    3944:	b1 05       	cpc	r27, r1
    3946:	09 f0       	breq	.+2      	; 0x394a <LCD_VoidSendInt+0x10c>
    3948:	ae cf       	rjmp	.-164    	; 0x38a6 <LCD_VoidSendInt+0x68>
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    394a:	8f 81       	ldd	r24, Y+7	; 0x07
    394c:	98 85       	ldd	r25, Y+8	; 0x08
    394e:	a9 85       	ldd	r26, Y+9	; 0x09
    3950:	ba 85       	ldd	r27, Y+10	; 0x0a
    3952:	01 97       	sbiw	r24, 0x01	; 1
    3954:	a1 09       	sbc	r26, r1
    3956:	b1 09       	sbc	r27, r1
    3958:	8b 83       	std	Y+3, r24	; 0x03
    395a:	9c 83       	std	Y+4, r25	; 0x04
    395c:	ad 83       	std	Y+5, r26	; 0x05
    395e:	be 83       	std	Y+6, r27	; 0x06
    3960:	1f c0       	rjmp	.+62     	; 0x39a0 <LCD_VoidSendInt+0x162>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	ad 81       	ldd	r26, Y+5	; 0x05
    3968:	be 81       	ldd	r27, Y+6	; 0x06
    396a:	9e 01       	movw	r18, r28
    396c:	25 5f       	subi	r18, 0xF5	; 245
    396e:	3f 4f       	sbci	r19, 0xFF	; 255
    3970:	f9 01       	movw	r30, r18
    3972:	e8 0f       	add	r30, r24
    3974:	f9 1f       	adc	r31, r25
    3976:	80 81       	ld	r24, Z
    3978:	80 5d       	subi	r24, 0xD0	; 208
    397a:	29 8d       	ldd	r18, Y+25	; 0x19
    397c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    397e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3980:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3982:	b9 01       	movw	r22, r18
    3984:	0e 94 c1 14 	call	0x2982	; 0x2982 <LCD_VoidSendChar>
    3988:	89 83       	std	Y+1, r24	; 0x01
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    398a:	8b 81       	ldd	r24, Y+3	; 0x03
    398c:	9c 81       	ldd	r25, Y+4	; 0x04
    398e:	ad 81       	ldd	r26, Y+5	; 0x05
    3990:	be 81       	ldd	r27, Y+6	; 0x06
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	a1 09       	sbc	r26, r1
    3996:	b1 09       	sbc	r27, r1
    3998:	8b 83       	std	Y+3, r24	; 0x03
    399a:	9c 83       	std	Y+4, r25	; 0x04
    399c:	ad 83       	std	Y+5, r26	; 0x05
    399e:	be 83       	std	Y+6, r27	; 0x06
    39a0:	8b 81       	ldd	r24, Y+3	; 0x03
    39a2:	9c 81       	ldd	r25, Y+4	; 0x04
    39a4:	ad 81       	ldd	r26, Y+5	; 0x05
    39a6:	be 81       	ldd	r27, Y+6	; 0x06
    39a8:	bb 23       	and	r27, r27
    39aa:	dc f6       	brge	.-74     	; 0x3962 <LCD_VoidSendInt+0x124>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);

	}
	//LCD_VoidSendChar('\0',lcd,Type);

}
    39ac:	6c 96       	adiw	r28, 0x1c	; 28
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	f8 94       	cli
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	cf 91       	pop	r28
    39ba:	df 91       	pop	r29
    39bc:	08 95       	ret

000039be <KP_ErrStateInit>:
		{'7','8','9','/'},
		{'4','5','6','*'},
		{'1','2','3','-'},
		{'C','0','=','+'}
};
void KP_ErrStateInit(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO){
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	00 d0       	rcall	.+0      	; 0x39c4 <KP_ErrStateInit+0x6>
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <KP_ErrStateInit+0x8>
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	7c 83       	std	Y+4, r23	; 0x04
    39d0:	6b 83       	std	Y+3, r22	; 0x03
	//u8 ROW,COL,ReadPin;
	//KPRPORT ROWP=KP_ROW_PORT1;
	//KPCPORT COLP=KP_COL_PORT1;
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_OUT);
    39d2:	e9 81       	ldd	r30, Y+1	; 0x01
    39d4:	fa 81       	ldd	r31, Y+2	; 0x02
    39d6:	91 81       	ldd	r25, Z+1	; 0x01
    39d8:	83 e4       	ldi	r24, 0x43	; 67
    39da:	69 2f       	mov	r22, r25
    39dc:	41 e0       	ldi	r20, 0x01	; 1
    39de:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_OUT);
    39e2:	e9 81       	ldd	r30, Y+1	; 0x01
    39e4:	fa 81       	ldd	r31, Y+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	83 e4       	ldi	r24, 0x43	; 67
    39ea:	69 2f       	mov	r22, r25
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_OUT);
    39f2:	e9 81       	ldd	r30, Y+1	; 0x01
    39f4:	fa 81       	ldd	r31, Y+2	; 0x02
    39f6:	95 81       	ldd	r25, Z+5	; 0x05
    39f8:	83 e4       	ldi	r24, 0x43	; 67
    39fa:	69 2f       	mov	r22, r25
    39fc:	41 e0       	ldi	r20, 0x01	; 1
    39fe:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_OUT);
    3a02:	e9 81       	ldd	r30, Y+1	; 0x01
    3a04:	fa 81       	ldd	r31, Y+2	; 0x02
    3a06:	97 81       	ldd	r25, Z+7	; 0x07
    3a08:	83 e4       	ldi	r24, 0x43	; 67
    3a0a:	69 2f       	mov	r22, r25
    3a0c:	41 e0       	ldi	r20, 0x01	; 1
    3a0e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_IN);
    3a12:	eb 81       	ldd	r30, Y+3	; 0x03
    3a14:	fc 81       	ldd	r31, Y+4	; 0x04
    3a16:	91 81       	ldd	r25, Z+1	; 0x01
    3a18:	83 e4       	ldi	r24, 0x43	; 67
    3a1a:	69 2f       	mov	r22, r25
    3a1c:	40 e0       	ldi	r20, 0x00	; 0
    3a1e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_IN);
    3a22:	eb 81       	ldd	r30, Y+3	; 0x03
    3a24:	fc 81       	ldd	r31, Y+4	; 0x04
    3a26:	93 81       	ldd	r25, Z+3	; 0x03
    3a28:	83 e4       	ldi	r24, 0x43	; 67
    3a2a:	69 2f       	mov	r22, r25
    3a2c:	40 e0       	ldi	r20, 0x00	; 0
    3a2e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_IN);
    3a32:	eb 81       	ldd	r30, Y+3	; 0x03
    3a34:	fc 81       	ldd	r31, Y+4	; 0x04
    3a36:	95 81       	ldd	r25, Z+5	; 0x05
    3a38:	83 e4       	ldi	r24, 0x43	; 67
    3a3a:	69 2f       	mov	r22, r25
    3a3c:	40 e0       	ldi	r20, 0x00	; 0
    3a3e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_IN);
    3a42:	eb 81       	ldd	r30, Y+3	; 0x03
    3a44:	fc 81       	ldd	r31, Y+4	; 0x04
    3a46:	97 81       	ldd	r25, Z+7	; 0x07
    3a48:	83 e4       	ldi	r24, 0x43	; 67
    3a4a:	69 2f       	mov	r22, r25
    3a4c:	40 e0       	ldi	r20, 0x00	; 0
    3a4e:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN1,DIO_HIGH);
    3a52:	e9 81       	ldd	r30, Y+1	; 0x01
    3a54:	fa 81       	ldd	r31, Y+2	; 0x02
    3a56:	91 81       	ldd	r25, Z+1	; 0x01
    3a58:	83 e4       	ldi	r24, 0x43	; 67
    3a5a:	69 2f       	mov	r22, r25
    3a5c:	41 e0       	ldi	r20, 0x01	; 1
    3a5e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN2,DIO_HIGH);
    3a62:	e9 81       	ldd	r30, Y+1	; 0x01
    3a64:	fa 81       	ldd	r31, Y+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	83 e4       	ldi	r24, 0x43	; 67
    3a6a:	69 2f       	mov	r22, r25
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN3,DIO_HIGH);
    3a72:	e9 81       	ldd	r30, Y+1	; 0x01
    3a74:	fa 81       	ldd	r31, Y+2	; 0x02
    3a76:	95 81       	ldd	r25, Z+5	; 0x05
    3a78:	83 e4       	ldi	r24, 0x43	; 67
    3a7a:	69 2f       	mov	r22, r25
    3a7c:	41 e0       	ldi	r20, 0x01	; 1
    3a7e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_RPP_INFO->ROW_PIN4,DIO_HIGH);
    3a82:	e9 81       	ldd	r30, Y+1	; 0x01
    3a84:	fa 81       	ldd	r31, Y+2	; 0x02
    3a86:	97 81       	ldd	r25, Z+7	; 0x07
    3a88:	83 e4       	ldi	r24, 0x43	; 67
    3a8a:	69 2f       	mov	r22, r25
    3a8c:	41 e0       	ldi	r20, 0x01	; 1
    3a8e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN1,DIO_HIGH);
    3a92:	eb 81       	ldd	r30, Y+3	; 0x03
    3a94:	fc 81       	ldd	r31, Y+4	; 0x04
    3a96:	91 81       	ldd	r25, Z+1	; 0x01
    3a98:	83 e4       	ldi	r24, 0x43	; 67
    3a9a:	69 2f       	mov	r22, r25
    3a9c:	41 e0       	ldi	r20, 0x01	; 1
    3a9e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN2,DIO_HIGH);
    3aa2:	eb 81       	ldd	r30, Y+3	; 0x03
    3aa4:	fc 81       	ldd	r31, Y+4	; 0x04
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	83 e4       	ldi	r24, 0x43	; 67
    3aaa:	69 2f       	mov	r22, r25
    3aac:	41 e0       	ldi	r20, 0x01	; 1
    3aae:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN3,DIO_HIGH);
    3ab2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ab4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ab6:	95 81       	ldd	r25, Z+5	; 0x05
    3ab8:	83 e4       	ldi	r24, 0x43	; 67
    3aba:	69 2f       	mov	r22, r25
    3abc:	41 e0       	ldi	r20, 0x01	; 1
    3abe:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(PORT_C,KP_CPP_INFO->COL_PIN4,DIO_HIGH);
    3ac2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ac4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ac6:	97 81       	ldd	r25, Z+7	; 0x07
    3ac8:	83 e4       	ldi	r24, 0x43	; 67
    3aca:	69 2f       	mov	r22, r25
    3acc:	41 e0       	ldi	r20, 0x01	; 1
    3ace:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>

}
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	cf 91       	pop	r28
    3adc:	df 91       	pop	r29
    3ade:	08 95       	ret

00003ae0 <KP_ErrStateRead>:
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
    3ae0:	df 93       	push	r29
    3ae2:	cf 93       	push	r28
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	69 97       	sbiw	r28, 0x19	; 25
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	9c 8b       	std	Y+20, r25	; 0x14
    3af6:	8b 8b       	std	Y+19, r24	; 0x13
    3af8:	7e 8b       	std	Y+22, r23	; 0x16
    3afa:	6d 8b       	std	Y+21, r22	; 0x15
    3afc:	58 8f       	std	Y+24, r21	; 0x18
    3afe:	4f 8b       	std	Y+23, r20	; 0x17
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    3b00:	19 8a       	std	Y+17, r1	; 0x11
    3b02:	cf c0       	rjmp	.+414    	; 0x3ca2 <KP_ErrStateRead+0x1c2>
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);
    3b04:	83 e4       	ldi	r24, 0x43	; 67
    3b06:	69 89       	ldd	r22, Y+17	; 0x11
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>

		for(COL=4;COL<8;COL++){
    3b0e:	84 e0       	ldi	r24, 0x04	; 4
    3b10:	88 8b       	std	Y+16, r24	; 0x10
    3b12:	bb c0       	rjmp	.+374    	; 0x3c8a <KP_ErrStateRead+0x1aa>
			ErrVal=DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    3b14:	9e 01       	movw	r18, r28
    3b16:	2e 5e       	subi	r18, 0xEE	; 238
    3b18:	3f 4f       	sbci	r19, 0xFF	; 255
    3b1a:	83 e4       	ldi	r24, 0x43	; 67
    3b1c:	68 89       	ldd	r22, Y+16	; 0x10
    3b1e:	a9 01       	movw	r20, r18
    3b20:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_ErrStateReadPinValue>
    3b24:	8f 87       	std	Y+15, r24	; 0x0f
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	a0 ef       	ldi	r26, 0xF0	; 240
    3b2c:	b1 e4       	ldi	r27, 0x41	; 65
    3b2e:	8b 87       	std	Y+11, r24	; 0x0b
    3b30:	9c 87       	std	Y+12, r25	; 0x0c
    3b32:	ad 87       	std	Y+13, r26	; 0x0d
    3b34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	4a ef       	ldi	r20, 0xFA	; 250
    3b44:	54 e4       	ldi	r21, 0x44	; 68
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	8f 83       	std	Y+7, r24	; 0x07
    3b50:	98 87       	std	Y+8, r25	; 0x08
    3b52:	a9 87       	std	Y+9, r26	; 0x09
    3b54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b56:	6f 81       	ldd	r22, Y+7	; 0x07
    3b58:	78 85       	ldd	r23, Y+8	; 0x08
    3b5a:	89 85       	ldd	r24, Y+9	; 0x09
    3b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	40 e8       	ldi	r20, 0x80	; 128
    3b64:	5f e3       	ldi	r21, 0x3F	; 63
    3b66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b6a:	88 23       	and	r24, r24
    3b6c:	2c f4       	brge	.+10     	; 0x3b78 <KP_ErrStateRead+0x98>
		__ticks = 1;
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	9e 83       	std	Y+6, r25	; 0x06
    3b74:	8d 83       	std	Y+5, r24	; 0x05
    3b76:	3f c0       	rjmp	.+126    	; 0x3bf6 <KP_ErrStateRead+0x116>
	else if (__tmp > 65535)
    3b78:	6f 81       	ldd	r22, Y+7	; 0x07
    3b7a:	78 85       	ldd	r23, Y+8	; 0x08
    3b7c:	89 85       	ldd	r24, Y+9	; 0x09
    3b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	3f ef       	ldi	r19, 0xFF	; 255
    3b84:	4f e7       	ldi	r20, 0x7F	; 127
    3b86:	57 e4       	ldi	r21, 0x47	; 71
    3b88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b8c:	18 16       	cp	r1, r24
    3b8e:	4c f5       	brge	.+82     	; 0x3be2 <KP_ErrStateRead+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e2       	ldi	r20, 0x20	; 32
    3b9e:	51 e4       	ldi	r21, 0x41	; 65
    3ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	bc 01       	movw	r22, r24
    3baa:	cd 01       	movw	r24, r26
    3bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	9e 83       	std	Y+6, r25	; 0x06
    3bb6:	8d 83       	std	Y+5, r24	; 0x05
    3bb8:	0f c0       	rjmp	.+30     	; 0x3bd8 <KP_ErrStateRead+0xf8>
    3bba:	88 ec       	ldi	r24, 0xC8	; 200
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	9c 83       	std	Y+4, r25	; 0x04
    3bc0:	8b 83       	std	Y+3, r24	; 0x03
    3bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <KP_ErrStateRead+0xe6>
    3bca:	9c 83       	std	Y+4, r25	; 0x04
    3bcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bce:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	9e 83       	std	Y+6, r25	; 0x06
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	9e 81       	ldd	r25, Y+6	; 0x06
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	69 f7       	brne	.-38     	; 0x3bba <KP_ErrStateRead+0xda>
    3be0:	14 c0       	rjmp	.+40     	; 0x3c0a <KP_ErrStateRead+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3be2:	6f 81       	ldd	r22, Y+7	; 0x07
    3be4:	78 85       	ldd	r23, Y+8	; 0x08
    3be6:	89 85       	ldd	r24, Y+9	; 0x09
    3be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9e 83       	std	Y+6, r25	; 0x06
    3bf4:	8d 83       	std	Y+5, r24	; 0x05
    3bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfa:	9a 83       	std	Y+2, r25	; 0x02
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <KP_ErrStateRead+0x122>
    3c06:	9a 83       	std	Y+2, r25	; 0x02
    3c08:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(30);
			if(ErrVal==DIO_OK&&ReadPin==0){
    3c0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c0c:	88 23       	and	r24, r24
    3c0e:	d1 f5       	brne	.+116    	; 0x3c84 <KP_ErrStateRead+0x1a4>
    3c10:	8a 89       	ldd	r24, Y+18	; 0x12
    3c12:	88 23       	and	r24, r24
    3c14:	b9 f5       	brne	.+110    	; 0x3c84 <KP_ErrStateRead+0x1a4>
				DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    3c16:	84 e4       	ldi	r24, 0x44	; 68
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
    3c20:	84 e4       	ldi	r24, 0x44	; 68
    3c22:	60 e0       	ldi	r22, 0x00	; 0
    3c24:	41 e0       	ldi	r20, 0x01	; 1
    3c26:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    3c2a:	83 e4       	ldi	r24, 0x43	; 67
    3c2c:	69 89       	ldd	r22, Y+17	; 0x11
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
    3c34:	89 89       	ldd	r24, Y+17	; 0x11
    3c36:	48 2f       	mov	r20, r24
    3c38:	50 e0       	ldi	r21, 0x00	; 0
    3c3a:	88 89       	ldd	r24, Y+16	; 0x10
    3c3c:	88 2f       	mov	r24, r24
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	9c 01       	movw	r18, r24
    3c42:	24 50       	subi	r18, 0x04	; 4
    3c44:	30 40       	sbci	r19, 0x00	; 0
    3c46:	ca 01       	movw	r24, r20
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	88 0f       	add	r24, r24
    3c4e:	99 1f       	adc	r25, r25
    3c50:	82 0f       	add	r24, r18
    3c52:	93 1f       	adc	r25, r19
    3c54:	fc 01       	movw	r30, r24
    3c56:	ea 57       	subi	r30, 0x7A	; 122
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 81       	ld	r24, Z
    3c5c:	ef 89       	ldd	r30, Y+23	; 0x17
    3c5e:	f8 8d       	ldd	r31, Y+24	; 0x18
    3c60:	80 83       	st	Z, r24
    3c62:	0b c0       	rjmp	.+22     	; 0x3c7a <KP_ErrStateRead+0x19a>
				// test could be removed
				while(ReadPin==0){
					DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
    3c64:	9e 01       	movw	r18, r28
    3c66:	2e 5e       	subi	r18, 0xEE	; 238
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	83 e4       	ldi	r24, 0x43	; 67
    3c6c:	68 89       	ldd	r22, Y+16	; 0x10
    3c6e:	a9 01       	movw	r20, r18
    3c70:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_ErrStateReadPinValue>
					if(ReadPin==1)
    3c74:	8a 89       	ldd	r24, Y+18	; 0x12
    3c76:	81 30       	cpi	r24, 0x01	; 1
    3c78:	19 f0       	breq	.+6      	; 0x3c80 <KP_ErrStateRead+0x1a0>
				DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
				// test could be removed
				while(ReadPin==0){
    3c7a:	8a 89       	ldd	r24, Y+18	; 0x12
    3c7c:	88 23       	and	r24, r24
    3c7e:	91 f3       	breq	.-28     	; 0x3c64 <KP_ErrStateRead+0x184>
					DIO_ErrStateReadPinValue(PORT_C,COL,&ReadPin);
					if(ReadPin==1)
						break;
				}
				return OK;
    3c80:	19 8e       	std	Y+25, r1	; 0x19
    3c82:	15 c0       	rjmp	.+42     	; 0x3cae <KP_ErrStateRead+0x1ce>
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_LOW);

		for(COL=4;COL<8;COL++){
    3c84:	88 89       	ldd	r24, Y+16	; 0x10
    3c86:	8f 5f       	subi	r24, 0xFF	; 255
    3c88:	88 8b       	std	Y+16, r24	; 0x10
    3c8a:	88 89       	ldd	r24, Y+16	; 0x10
    3c8c:	88 30       	cpi	r24, 0x08	; 8
    3c8e:	08 f4       	brcc	.+2      	; 0x3c92 <KP_ErrStateRead+0x1b2>
    3c90:	41 cf       	rjmp	.-382    	; 0x3b14 <KP_ErrStateRead+0x34>
						break;
				}
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
    3c92:	83 e4       	ldi	r24, 0x43	; 67
    3c94:	69 89       	ldd	r22, Y+17	; 0x11
    3c96:	41 e0       	ldi	r20, 0x01	; 1
    3c98:	0e 94 52 09 	call	0x12a4	; 0x12a4 <DIO_ErrStateSetPinValue>
}
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    3c9c:	89 89       	ldd	r24, Y+17	; 0x11
    3c9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ca0:	89 8b       	std	Y+17, r24	; 0x11
    3ca2:	89 89       	ldd	r24, Y+17	; 0x11
    3ca4:	84 30       	cpi	r24, 0x04	; 4
    3ca6:	08 f4       	brcc	.+2      	; 0x3caa <KP_ErrStateRead+0x1ca>
    3ca8:	2d cf       	rjmp	.-422    	; 0x3b04 <KP_ErrStateRead+0x24>
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_C,ROW,DIO_HIGH);
	}
	return Error;
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	89 8f       	std	Y+25, r24	; 0x19
    3cae:	89 8d       	ldd	r24, Y+25	; 0x19
	//Flag=0;
}
    3cb0:	69 96       	adiw	r28, 0x19	; 25
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	cf 91       	pop	r28
    3cbe:	df 91       	pop	r29
    3cc0:	08 95       	ret

00003cc2 <main>:
u8 Button;
LCD_Line_Info type ={YES,NO};LCD_Line_Info type2 ={NO,YES};
LCD_Info lcd={RS_PORT,RS_PIN,RW_PORT,RW_PIN,E_PORT,E_PIN,DATA_PORT};
void TimerCountUpDown(void);
void main()
{
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	00 d0       	rcall	.+0      	; 0x3cc8 <main+0x6>
    3cc8:	0f 92       	push	r0
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
	u16 x=0;
    3cce:	1b 82       	std	Y+3, r1	; 0x03
    3cd0:	1a 82       	std	Y+2, r1	; 0x02
	u8 data;
	//u8 Sec1,Sec2,Min1,Min2,Hour1,Hour2;
	EnableGlobalInterrupt();
    3cd2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <EnableGlobalInterrupt>
	T0_VoidInit();
    3cd6:	0e 94 a3 05 	call	0xb46	; 0xb46 <T0_VoidInit>
	LCD_VoidInit(&lcd);
    3cda:	8a e9       	ldi	r24, 0x9A	; 154
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	0e 94 6d 19 	call	0x32da	; 0x32da <LCD_VoidInit>
	DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
    3ce2:	84 e4       	ldi	r24, 0x44	; 68
    3ce4:	60 e0       	ldi	r22, 0x00	; 0
    3ce6:	41 e0       	ldi	r20, 0x01	; 1
    3ce8:	0e 94 3d 08 	call	0x107a	; 0x107a <DIO_ErrStateSetPinDirection>
	/*01 34 67*/
	LCD_VoidSendString("00:00:00",&lcd,&type2);
    3cec:	80 e6       	ldi	r24, 0x60	; 96
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	2a e9       	ldi	r18, 0x9A	; 154
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	48 e9       	ldi	r20, 0x98	; 152
    3cf6:	50 e0       	ldi	r21, 0x00	; 0
    3cf8:	b9 01       	movw	r22, r18
    3cfa:	0e 94 80 1b 	call	0x3700	; 0x3700 <LCD_VoidSendString>
	Timer0_u8SetCallBack(TimerCountUpDown);
    3cfe:	84 e8       	ldi	r24, 0x84	; 132
    3d00:	9e e1       	ldi	r25, 0x1E	; 30
    3d02:	0e 94 df 05 	call	0xbbe	; 0xbbe <Timer0_u8SetCallBack>
    3d06:	ff cf       	rjmp	.-2      	; 0x3d06 <main+0x44>

00003d08 <TimerCountUpDown>:
	 */
	}

}

void TimerCountUpDown(void){
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	cd b7       	in	r28, 0x3d	; 61
    3d0e:	de b7       	in	r29, 0x3e	; 62
	//if(Button==0){
	//TOGGLE_BIT(PORTD_ITI,PIN_0);
	static u8 Sec1,Sec2,Min1,Min2,Hour1,Hour2;
	Sec1++;
    3d10:	80 91 b8 00 	lds	r24, 0x00B8
    3d14:	8f 5f       	subi	r24, 0xFF	; 255
    3d16:	80 93 b8 00 	sts	0x00B8, r24
	if(Sec1==9){
    3d1a:	80 91 b8 00 	lds	r24, 0x00B8
    3d1e:	89 30       	cpi	r24, 0x09	; 9
    3d20:	b9 f4       	brne	.+46     	; 0x3d50 <TimerCountUpDown+0x48>
		LCD_VoidGoToXY(7,0,&lcd);
    3d22:	2a e9       	ldi	r18, 0x9A	; 154
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	87 e0       	ldi	r24, 0x07	; 7
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	a9 01       	movw	r20, r18
    3d2c:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    3d30:	80 91 b8 00 	lds	r24, 0x00B8
    3d34:	88 2f       	mov	r24, r24
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	a0 e0       	ldi	r26, 0x00	; 0
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	2a e9       	ldi	r18, 0x9A	; 154
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	e6 e9       	ldi	r30, 0x96	; 150
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	bc 01       	movw	r22, r24
    3d46:	cd 01       	movw	r24, r26
    3d48:	a9 01       	movw	r20, r18
    3d4a:	9f 01       	movw	r18, r30
    3d4c:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>

	}
	if(Sec1<9){
    3d50:	80 91 b8 00 	lds	r24, 0x00B8
    3d54:	89 30       	cpi	r24, 0x09	; 9
    3d56:	b8 f4       	brcc	.+46     	; 0x3d86 <TimerCountUpDown+0x7e>
		LCD_VoidGoToXY(7,0,&lcd);
    3d58:	2a e9       	ldi	r18, 0x9A	; 154
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	87 e0       	ldi	r24, 0x07	; 7
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	a9 01       	movw	r20, r18
    3d62:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    3d66:	80 91 b8 00 	lds	r24, 0x00B8
    3d6a:	88 2f       	mov	r24, r24
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	a0 e0       	ldi	r26, 0x00	; 0
    3d70:	b0 e0       	ldi	r27, 0x00	; 0
    3d72:	2a e9       	ldi	r18, 0x9A	; 154
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	e6 e9       	ldi	r30, 0x96	; 150
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	a9 01       	movw	r20, r18
    3d80:	9f 01       	movw	r18, r30
    3d82:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		//DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);

	}
	if(Sec1>=10&&Sec2<5){
    3d86:	80 91 b8 00 	lds	r24, 0x00B8
    3d8a:	8a 30       	cpi	r24, 0x0A	; 10
    3d8c:	c8 f1       	brcs	.+114    	; 0x3e00 <TimerCountUpDown+0xf8>
    3d8e:	80 91 b7 00 	lds	r24, 0x00B7
    3d92:	85 30       	cpi	r24, 0x05	; 5
    3d94:	a8 f5       	brcc	.+106    	; 0x3e00 <TimerCountUpDown+0xf8>
		Sec2++;
    3d96:	80 91 b7 00 	lds	r24, 0x00B7
    3d9a:	8f 5f       	subi	r24, 0xFF	; 255
    3d9c:	80 93 b7 00 	sts	0x00B7, r24
		Sec1=0;
    3da0:	10 92 b8 00 	sts	0x00B8, r1
		LCD_VoidGoToXY(7,0,&lcd);
    3da4:	2a e9       	ldi	r18, 0x9A	; 154
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	87 e0       	ldi	r24, 0x07	; 7
    3daa:	60 e0       	ldi	r22, 0x00	; 0
    3dac:	a9 01       	movw	r20, r18
    3dae:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    3db2:	80 91 b8 00 	lds	r24, 0x00B8
    3db6:	88 2f       	mov	r24, r24
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	a0 e0       	ldi	r26, 0x00	; 0
    3dbc:	b0 e0       	ldi	r27, 0x00	; 0
    3dbe:	2a e9       	ldi	r18, 0x9A	; 154
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	e6 e9       	ldi	r30, 0x96	; 150
    3dc4:	f0 e0       	ldi	r31, 0x00	; 0
    3dc6:	bc 01       	movw	r22, r24
    3dc8:	cd 01       	movw	r24, r26
    3dca:	a9 01       	movw	r20, r18
    3dcc:	9f 01       	movw	r18, r30
    3dce:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(6,0,&lcd);
    3dd2:	2a e9       	ldi	r18, 0x9A	; 154
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	86 e0       	ldi	r24, 0x06	; 6
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	a9 01       	movw	r20, r18
    3ddc:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec2,&lcd,&type);
    3de0:	80 91 b7 00 	lds	r24, 0x00B7
    3de4:	88 2f       	mov	r24, r24
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	a0 e0       	ldi	r26, 0x00	; 0
    3dea:	b0 e0       	ldi	r27, 0x00	; 0
    3dec:	2a e9       	ldi	r18, 0x9A	; 154
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	e6 e9       	ldi	r30, 0x96	; 150
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	bc 01       	movw	r22, r24
    3df6:	cd 01       	movw	r24, r26
    3df8:	a9 01       	movw	r20, r18
    3dfa:	9f 01       	movw	r18, r30
    3dfc:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>


	}
	if(Sec1>=10&&Sec2>=5&&Min1<=9){
    3e00:	80 91 b8 00 	lds	r24, 0x00B8
    3e04:	8a 30       	cpi	r24, 0x0A	; 10
    3e06:	08 f4       	brcc	.+2      	; 0x3e0a <TimerCountUpDown+0x102>
    3e08:	58 c0       	rjmp	.+176    	; 0x3eba <TimerCountUpDown+0x1b2>
    3e0a:	80 91 b7 00 	lds	r24, 0x00B7
    3e0e:	85 30       	cpi	r24, 0x05	; 5
    3e10:	08 f4       	brcc	.+2      	; 0x3e14 <TimerCountUpDown+0x10c>
    3e12:	53 c0       	rjmp	.+166    	; 0x3eba <TimerCountUpDown+0x1b2>
    3e14:	80 91 b6 00 	lds	r24, 0x00B6
    3e18:	8a 30       	cpi	r24, 0x0A	; 10
    3e1a:	08 f0       	brcs	.+2      	; 0x3e1e <TimerCountUpDown+0x116>
    3e1c:	4e c0       	rjmp	.+156    	; 0x3eba <TimerCountUpDown+0x1b2>
		Sec1=0;
    3e1e:	10 92 b8 00 	sts	0x00B8, r1
		Sec2=0;
    3e22:	10 92 b7 00 	sts	0x00B7, r1
		Min1++;
    3e26:	80 91 b6 00 	lds	r24, 0x00B6
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	80 93 b6 00 	sts	0x00B6, r24
		LCD_VoidGoToXY(7,0,&lcd);
    3e30:	2a e9       	ldi	r18, 0x9A	; 154
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	87 e0       	ldi	r24, 0x07	; 7
    3e36:	60 e0       	ldi	r22, 0x00	; 0
    3e38:	a9 01       	movw	r20, r18
    3e3a:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    3e3e:	80 91 b8 00 	lds	r24, 0x00B8
    3e42:	88 2f       	mov	r24, r24
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	a0 e0       	ldi	r26, 0x00	; 0
    3e48:	b0 e0       	ldi	r27, 0x00	; 0
    3e4a:	2a e9       	ldi	r18, 0x9A	; 154
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	e6 e9       	ldi	r30, 0x96	; 150
    3e50:	f0 e0       	ldi	r31, 0x00	; 0
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	a9 01       	movw	r20, r18
    3e58:	9f 01       	movw	r18, r30
    3e5a:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(6,0,&lcd);
    3e5e:	2a e9       	ldi	r18, 0x9A	; 154
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	86 e0       	ldi	r24, 0x06	; 6
    3e64:	60 e0       	ldi	r22, 0x00	; 0
    3e66:	a9 01       	movw	r20, r18
    3e68:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec2,&lcd,&type);
    3e6c:	80 91 b7 00 	lds	r24, 0x00B7
    3e70:	88 2f       	mov	r24, r24
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	a0 e0       	ldi	r26, 0x00	; 0
    3e76:	b0 e0       	ldi	r27, 0x00	; 0
    3e78:	2a e9       	ldi	r18, 0x9A	; 154
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	e6 e9       	ldi	r30, 0x96	; 150
    3e7e:	f0 e0       	ldi	r31, 0x00	; 0
    3e80:	bc 01       	movw	r22, r24
    3e82:	cd 01       	movw	r24, r26
    3e84:	a9 01       	movw	r20, r18
    3e86:	9f 01       	movw	r18, r30
    3e88:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(4,0,&lcd);
    3e8c:	2a e9       	ldi	r18, 0x9A	; 154
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	84 e0       	ldi	r24, 0x04	; 4
    3e92:	60 e0       	ldi	r22, 0x00	; 0
    3e94:	a9 01       	movw	r20, r18
    3e96:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min1,&lcd,&type);
    3e9a:	80 91 b6 00 	lds	r24, 0x00B6
    3e9e:	88 2f       	mov	r24, r24
    3ea0:	90 e0       	ldi	r25, 0x00	; 0
    3ea2:	a0 e0       	ldi	r26, 0x00	; 0
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	2a e9       	ldi	r18, 0x9A	; 154
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	e6 e9       	ldi	r30, 0x96	; 150
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	bc 01       	movw	r22, r24
    3eb0:	cd 01       	movw	r24, r26
    3eb2:	a9 01       	movw	r20, r18
    3eb4:	9f 01       	movw	r18, r30
    3eb6:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>


	}
	if(Sec1>=10&&Sec2>=5&&Min1>9&&Min2<=5){
    3eba:	80 91 b8 00 	lds	r24, 0x00B8
    3ebe:	8a 30       	cpi	r24, 0x0A	; 10
    3ec0:	08 f4       	brcc	.+2      	; 0x3ec4 <TimerCountUpDown+0x1bc>
    3ec2:	76 c0       	rjmp	.+236    	; 0x3fb0 <TimerCountUpDown+0x2a8>
    3ec4:	80 91 b7 00 	lds	r24, 0x00B7
    3ec8:	85 30       	cpi	r24, 0x05	; 5
    3eca:	08 f4       	brcc	.+2      	; 0x3ece <TimerCountUpDown+0x1c6>
    3ecc:	71 c0       	rjmp	.+226    	; 0x3fb0 <TimerCountUpDown+0x2a8>
    3ece:	80 91 b6 00 	lds	r24, 0x00B6
    3ed2:	8a 30       	cpi	r24, 0x0A	; 10
    3ed4:	08 f4       	brcc	.+2      	; 0x3ed8 <TimerCountUpDown+0x1d0>
    3ed6:	6c c0       	rjmp	.+216    	; 0x3fb0 <TimerCountUpDown+0x2a8>
    3ed8:	80 91 b5 00 	lds	r24, 0x00B5
    3edc:	86 30       	cpi	r24, 0x06	; 6
    3ede:	08 f0       	brcs	.+2      	; 0x3ee2 <TimerCountUpDown+0x1da>
    3ee0:	67 c0       	rjmp	.+206    	; 0x3fb0 <TimerCountUpDown+0x2a8>

		Min1=0;
    3ee2:	10 92 b6 00 	sts	0x00B6, r1
		Sec1=0;
    3ee6:	10 92 b8 00 	sts	0x00B8, r1
		Sec2=0;
    3eea:	10 92 b7 00 	sts	0x00B7, r1
		LCD_VoidGoToXY(7,0,&lcd);
    3eee:	2a e9       	ldi	r18, 0x9A	; 154
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	87 e0       	ldi	r24, 0x07	; 7
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	a9 01       	movw	r20, r18
    3ef8:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    3efc:	80 91 b8 00 	lds	r24, 0x00B8
    3f00:	88 2f       	mov	r24, r24
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	a0 e0       	ldi	r26, 0x00	; 0
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	2a e9       	ldi	r18, 0x9A	; 154
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	e6 e9       	ldi	r30, 0x96	; 150
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	a9 01       	movw	r20, r18
    3f16:	9f 01       	movw	r18, r30
    3f18:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(6,0,&lcd);
    3f1c:	2a e9       	ldi	r18, 0x9A	; 154
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	86 e0       	ldi	r24, 0x06	; 6
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	a9 01       	movw	r20, r18
    3f26:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec2,&lcd,&type);
    3f2a:	80 91 b7 00 	lds	r24, 0x00B7
    3f2e:	88 2f       	mov	r24, r24
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	a0 e0       	ldi	r26, 0x00	; 0
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	2a e9       	ldi	r18, 0x9A	; 154
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	e6 e9       	ldi	r30, 0x96	; 150
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	bc 01       	movw	r22, r24
    3f40:	cd 01       	movw	r24, r26
    3f42:	a9 01       	movw	r20, r18
    3f44:	9f 01       	movw	r18, r30
    3f46:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(4,0,&lcd);
    3f4a:	2a e9       	ldi	r18, 0x9A	; 154
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	84 e0       	ldi	r24, 0x04	; 4
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	a9 01       	movw	r20, r18
    3f54:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min1,&lcd,&type);
    3f58:	80 91 b6 00 	lds	r24, 0x00B6
    3f5c:	88 2f       	mov	r24, r24
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	a0 e0       	ldi	r26, 0x00	; 0
    3f62:	b0 e0       	ldi	r27, 0x00	; 0
    3f64:	2a e9       	ldi	r18, 0x9A	; 154
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	e6 e9       	ldi	r30, 0x96	; 150
    3f6a:	f0 e0       	ldi	r31, 0x00	; 0
    3f6c:	bc 01       	movw	r22, r24
    3f6e:	cd 01       	movw	r24, r26
    3f70:	a9 01       	movw	r20, r18
    3f72:	9f 01       	movw	r18, r30
    3f74:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(3,0,&lcd);
    3f78:	2a e9       	ldi	r18, 0x9A	; 154
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	83 e0       	ldi	r24, 0x03	; 3
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	a9 01       	movw	r20, r18
    3f82:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min2,&lcd,&type);
    3f86:	80 91 b5 00 	lds	r24, 0x00B5
    3f8a:	88 2f       	mov	r24, r24
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	a0 e0       	ldi	r26, 0x00	; 0
    3f90:	b0 e0       	ldi	r27, 0x00	; 0
    3f92:	2a e9       	ldi	r18, 0x9A	; 154
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	e6 e9       	ldi	r30, 0x96	; 150
    3f98:	f0 e0       	ldi	r31, 0x00	; 0
    3f9a:	bc 01       	movw	r22, r24
    3f9c:	cd 01       	movw	r24, r26
    3f9e:	a9 01       	movw	r20, r18
    3fa0:	9f 01       	movw	r18, r30
    3fa2:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		Min2++;
    3fa6:	80 91 b5 00 	lds	r24, 0x00B5
    3faa:	8f 5f       	subi	r24, 0xFF	; 255
    3fac:	80 93 b5 00 	sts	0x00B5, r24
	}
	if(Sec1>=10&&Sec2>=5&&Min1>=9&&Min2>=5&&Hour1<=9){
    3fb0:	80 91 b8 00 	lds	r24, 0x00B8
    3fb4:	8a 30       	cpi	r24, 0x0A	; 10
    3fb6:	08 f4       	brcc	.+2      	; 0x3fba <TimerCountUpDown+0x2b2>
    3fb8:	94 c0       	rjmp	.+296    	; 0x40e2 <TimerCountUpDown+0x3da>
    3fba:	80 91 b7 00 	lds	r24, 0x00B7
    3fbe:	85 30       	cpi	r24, 0x05	; 5
    3fc0:	08 f4       	brcc	.+2      	; 0x3fc4 <TimerCountUpDown+0x2bc>
    3fc2:	8f c0       	rjmp	.+286    	; 0x40e2 <TimerCountUpDown+0x3da>
    3fc4:	80 91 b6 00 	lds	r24, 0x00B6
    3fc8:	89 30       	cpi	r24, 0x09	; 9
    3fca:	08 f4       	brcc	.+2      	; 0x3fce <TimerCountUpDown+0x2c6>
    3fcc:	8a c0       	rjmp	.+276    	; 0x40e2 <TimerCountUpDown+0x3da>
    3fce:	80 91 b5 00 	lds	r24, 0x00B5
    3fd2:	85 30       	cpi	r24, 0x05	; 5
    3fd4:	08 f4       	brcc	.+2      	; 0x3fd8 <TimerCountUpDown+0x2d0>
    3fd6:	85 c0       	rjmp	.+266    	; 0x40e2 <TimerCountUpDown+0x3da>
    3fd8:	80 91 b4 00 	lds	r24, 0x00B4
    3fdc:	8a 30       	cpi	r24, 0x0A	; 10
    3fde:	08 f0       	brcs	.+2      	; 0x3fe2 <TimerCountUpDown+0x2da>
    3fe0:	80 c0       	rjmp	.+256    	; 0x40e2 <TimerCountUpDown+0x3da>

		Min2=0;
    3fe2:	10 92 b5 00 	sts	0x00B5, r1
		Min1=0;
    3fe6:	10 92 b6 00 	sts	0x00B6, r1
		Sec1=0;
    3fea:	10 92 b8 00 	sts	0x00B8, r1
		Sec2=0;
    3fee:	10 92 b7 00 	sts	0x00B7, r1
		LCD_VoidGoToXY(7,0,&lcd);
    3ff2:	2a e9       	ldi	r18, 0x9A	; 154
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	87 e0       	ldi	r24, 0x07	; 7
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	a9 01       	movw	r20, r18
    3ffc:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    4000:	80 91 b8 00 	lds	r24, 0x00B8
    4004:	88 2f       	mov	r24, r24
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	a0 e0       	ldi	r26, 0x00	; 0
    400a:	b0 e0       	ldi	r27, 0x00	; 0
    400c:	2a e9       	ldi	r18, 0x9A	; 154
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	e6 e9       	ldi	r30, 0x96	; 150
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	bc 01       	movw	r22, r24
    4016:	cd 01       	movw	r24, r26
    4018:	a9 01       	movw	r20, r18
    401a:	9f 01       	movw	r18, r30
    401c:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(6,0,&lcd);
    4020:	2a e9       	ldi	r18, 0x9A	; 154
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	86 e0       	ldi	r24, 0x06	; 6
    4026:	60 e0       	ldi	r22, 0x00	; 0
    4028:	a9 01       	movw	r20, r18
    402a:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec2,&lcd,&type);
    402e:	80 91 b7 00 	lds	r24, 0x00B7
    4032:	88 2f       	mov	r24, r24
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	a0 e0       	ldi	r26, 0x00	; 0
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	2a e9       	ldi	r18, 0x9A	; 154
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	e6 e9       	ldi	r30, 0x96	; 150
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	bc 01       	movw	r22, r24
    4044:	cd 01       	movw	r24, r26
    4046:	a9 01       	movw	r20, r18
    4048:	9f 01       	movw	r18, r30
    404a:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(4,0,&lcd);
    404e:	2a e9       	ldi	r18, 0x9A	; 154
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	84 e0       	ldi	r24, 0x04	; 4
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	a9 01       	movw	r20, r18
    4058:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min1,&lcd,&type);
    405c:	80 91 b6 00 	lds	r24, 0x00B6
    4060:	88 2f       	mov	r24, r24
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	a0 e0       	ldi	r26, 0x00	; 0
    4066:	b0 e0       	ldi	r27, 0x00	; 0
    4068:	2a e9       	ldi	r18, 0x9A	; 154
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	e6 e9       	ldi	r30, 0x96	; 150
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	a9 01       	movw	r20, r18
    4076:	9f 01       	movw	r18, r30
    4078:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(3,0,&lcd);
    407c:	2a e9       	ldi	r18, 0x9A	; 154
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	83 e0       	ldi	r24, 0x03	; 3
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	a9 01       	movw	r20, r18
    4086:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min2,&lcd,&type);
    408a:	80 91 b5 00 	lds	r24, 0x00B5
    408e:	88 2f       	mov	r24, r24
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	a0 e0       	ldi	r26, 0x00	; 0
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	2a e9       	ldi	r18, 0x9A	; 154
    4098:	30 e0       	ldi	r19, 0x00	; 0
    409a:	e6 e9       	ldi	r30, 0x96	; 150
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	bc 01       	movw	r22, r24
    40a0:	cd 01       	movw	r24, r26
    40a2:	a9 01       	movw	r20, r18
    40a4:	9f 01       	movw	r18, r30
    40a6:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(1,0,&lcd);
    40aa:	2a e9       	ldi	r18, 0x9A	; 154
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	a9 01       	movw	r20, r18
    40b4:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Hour1,&lcd,&type);
    40b8:	80 91 b4 00 	lds	r24, 0x00B4
    40bc:	88 2f       	mov	r24, r24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	a0 e0       	ldi	r26, 0x00	; 0
    40c2:	b0 e0       	ldi	r27, 0x00	; 0
    40c4:	2a e9       	ldi	r18, 0x9A	; 154
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	e6 e9       	ldi	r30, 0x96	; 150
    40ca:	f0 e0       	ldi	r31, 0x00	; 0
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	a9 01       	movw	r20, r18
    40d2:	9f 01       	movw	r18, r30
    40d4:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		Hour1++;
    40d8:	80 91 b4 00 	lds	r24, 0x00B4
    40dc:	8f 5f       	subi	r24, 0xFF	; 255
    40de:	80 93 b4 00 	sts	0x00B4, r24
	}
	if(Sec1>=10&&Sec2>=5&&Min1>=9&&Min2>=5&&Hour1>=9&&Hour2<=5){
    40e2:	80 91 b8 00 	lds	r24, 0x00B8
    40e6:	8a 30       	cpi	r24, 0x0A	; 10
    40e8:	08 f4       	brcc	.+2      	; 0x40ec <TimerCountUpDown+0x3e4>
    40ea:	b2 c0       	rjmp	.+356    	; 0x4250 <TimerCountUpDown+0x548>
    40ec:	80 91 b7 00 	lds	r24, 0x00B7
    40f0:	85 30       	cpi	r24, 0x05	; 5
    40f2:	08 f4       	brcc	.+2      	; 0x40f6 <TimerCountUpDown+0x3ee>
    40f4:	ad c0       	rjmp	.+346    	; 0x4250 <TimerCountUpDown+0x548>
    40f6:	80 91 b6 00 	lds	r24, 0x00B6
    40fa:	89 30       	cpi	r24, 0x09	; 9
    40fc:	08 f4       	brcc	.+2      	; 0x4100 <TimerCountUpDown+0x3f8>
    40fe:	a8 c0       	rjmp	.+336    	; 0x4250 <TimerCountUpDown+0x548>
    4100:	80 91 b5 00 	lds	r24, 0x00B5
    4104:	85 30       	cpi	r24, 0x05	; 5
    4106:	08 f4       	brcc	.+2      	; 0x410a <TimerCountUpDown+0x402>
    4108:	a3 c0       	rjmp	.+326    	; 0x4250 <TimerCountUpDown+0x548>
    410a:	80 91 b4 00 	lds	r24, 0x00B4
    410e:	89 30       	cpi	r24, 0x09	; 9
    4110:	08 f4       	brcc	.+2      	; 0x4114 <TimerCountUpDown+0x40c>
    4112:	9e c0       	rjmp	.+316    	; 0x4250 <TimerCountUpDown+0x548>
    4114:	80 91 b3 00 	lds	r24, 0x00B3
    4118:	86 30       	cpi	r24, 0x06	; 6
    411a:	08 f0       	brcs	.+2      	; 0x411e <TimerCountUpDown+0x416>
    411c:	99 c0       	rjmp	.+306    	; 0x4250 <TimerCountUpDown+0x548>
		Hour1=0;
    411e:	10 92 b4 00 	sts	0x00B4, r1
		Min2=0;
    4122:	10 92 b5 00 	sts	0x00B5, r1
		Min1=0;
    4126:	10 92 b6 00 	sts	0x00B6, r1
		Sec1=0;
    412a:	10 92 b8 00 	sts	0x00B8, r1
		Sec2=0;
    412e:	10 92 b7 00 	sts	0x00B7, r1
		LCD_VoidGoToXY(7,0,&lcd);
    4132:	2a e9       	ldi	r18, 0x9A	; 154
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	87 e0       	ldi	r24, 0x07	; 7
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	a9 01       	movw	r20, r18
    413c:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    4140:	80 91 b8 00 	lds	r24, 0x00B8
    4144:	88 2f       	mov	r24, r24
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	a0 e0       	ldi	r26, 0x00	; 0
    414a:	b0 e0       	ldi	r27, 0x00	; 0
    414c:	2a e9       	ldi	r18, 0x9A	; 154
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	e6 e9       	ldi	r30, 0x96	; 150
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	a9 01       	movw	r20, r18
    415a:	9f 01       	movw	r18, r30
    415c:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(6,0,&lcd);
    4160:	2a e9       	ldi	r18, 0x9A	; 154
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	86 e0       	ldi	r24, 0x06	; 6
    4166:	60 e0       	ldi	r22, 0x00	; 0
    4168:	a9 01       	movw	r20, r18
    416a:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec2,&lcd,&type);
    416e:	80 91 b7 00 	lds	r24, 0x00B7
    4172:	88 2f       	mov	r24, r24
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	a0 e0       	ldi	r26, 0x00	; 0
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	2a e9       	ldi	r18, 0x9A	; 154
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	e6 e9       	ldi	r30, 0x96	; 150
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	bc 01       	movw	r22, r24
    4184:	cd 01       	movw	r24, r26
    4186:	a9 01       	movw	r20, r18
    4188:	9f 01       	movw	r18, r30
    418a:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(4,0,&lcd);
    418e:	2a e9       	ldi	r18, 0x9A	; 154
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	84 e0       	ldi	r24, 0x04	; 4
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	a9 01       	movw	r20, r18
    4198:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min1,&lcd,&type);
    419c:	80 91 b6 00 	lds	r24, 0x00B6
    41a0:	88 2f       	mov	r24, r24
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	a0 e0       	ldi	r26, 0x00	; 0
    41a6:	b0 e0       	ldi	r27, 0x00	; 0
    41a8:	2a e9       	ldi	r18, 0x9A	; 154
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	e6 e9       	ldi	r30, 0x96	; 150
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	bc 01       	movw	r22, r24
    41b2:	cd 01       	movw	r24, r26
    41b4:	a9 01       	movw	r20, r18
    41b6:	9f 01       	movw	r18, r30
    41b8:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(3,0,&lcd);
    41bc:	2a e9       	ldi	r18, 0x9A	; 154
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	83 e0       	ldi	r24, 0x03	; 3
    41c2:	60 e0       	ldi	r22, 0x00	; 0
    41c4:	a9 01       	movw	r20, r18
    41c6:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min2,&lcd,&type);
    41ca:	80 91 b5 00 	lds	r24, 0x00B5
    41ce:	88 2f       	mov	r24, r24
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	a0 e0       	ldi	r26, 0x00	; 0
    41d4:	b0 e0       	ldi	r27, 0x00	; 0
    41d6:	2a e9       	ldi	r18, 0x9A	; 154
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	e6 e9       	ldi	r30, 0x96	; 150
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	bc 01       	movw	r22, r24
    41e0:	cd 01       	movw	r24, r26
    41e2:	a9 01       	movw	r20, r18
    41e4:	9f 01       	movw	r18, r30
    41e6:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(1,0,&lcd);
    41ea:	2a e9       	ldi	r18, 0x9A	; 154
    41ec:	30 e0       	ldi	r19, 0x00	; 0
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	a9 01       	movw	r20, r18
    41f4:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Hour1,&lcd,&type);
    41f8:	80 91 b4 00 	lds	r24, 0x00B4
    41fc:	88 2f       	mov	r24, r24
    41fe:	90 e0       	ldi	r25, 0x00	; 0
    4200:	a0 e0       	ldi	r26, 0x00	; 0
    4202:	b0 e0       	ldi	r27, 0x00	; 0
    4204:	2a e9       	ldi	r18, 0x9A	; 154
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	e6 e9       	ldi	r30, 0x96	; 150
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	bc 01       	movw	r22, r24
    420e:	cd 01       	movw	r24, r26
    4210:	a9 01       	movw	r20, r18
    4212:	9f 01       	movw	r18, r30
    4214:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(0,0,&lcd);
    4218:	2a e9       	ldi	r18, 0x9A	; 154
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	60 e0       	ldi	r22, 0x00	; 0
    4220:	a9 01       	movw	r20, r18
    4222:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Hour2,&lcd,&type);
    4226:	80 91 b3 00 	lds	r24, 0x00B3
    422a:	88 2f       	mov	r24, r24
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	a0 e0       	ldi	r26, 0x00	; 0
    4230:	b0 e0       	ldi	r27, 0x00	; 0
    4232:	2a e9       	ldi	r18, 0x9A	; 154
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	e6 e9       	ldi	r30, 0x96	; 150
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	bc 01       	movw	r22, r24
    423c:	cd 01       	movw	r24, r26
    423e:	a9 01       	movw	r20, r18
    4240:	9f 01       	movw	r18, r30
    4242:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		Hour2++;
    4246:	80 91 b3 00 	lds	r24, 0x00B3
    424a:	8f 5f       	subi	r24, 0xFF	; 255
    424c:	80 93 b3 00 	sts	0x00B3, r24

	}
	if(Sec1>=10&&Sec2>=5&&Min1>=9&&Min2>=5&&Hour1>=9&&Hour2>=5){
    4250:	80 91 b8 00 	lds	r24, 0x00B8
    4254:	8a 30       	cpi	r24, 0x0A	; 10
    4256:	08 f4       	brcc	.+2      	; 0x425a <TimerCountUpDown+0x552>
    4258:	af c0       	rjmp	.+350    	; 0x43b8 <TimerCountUpDown+0x6b0>
    425a:	80 91 b7 00 	lds	r24, 0x00B7
    425e:	85 30       	cpi	r24, 0x05	; 5
    4260:	08 f4       	brcc	.+2      	; 0x4264 <TimerCountUpDown+0x55c>
    4262:	aa c0       	rjmp	.+340    	; 0x43b8 <TimerCountUpDown+0x6b0>
    4264:	80 91 b6 00 	lds	r24, 0x00B6
    4268:	89 30       	cpi	r24, 0x09	; 9
    426a:	08 f4       	brcc	.+2      	; 0x426e <TimerCountUpDown+0x566>
    426c:	a5 c0       	rjmp	.+330    	; 0x43b8 <TimerCountUpDown+0x6b0>
    426e:	80 91 b5 00 	lds	r24, 0x00B5
    4272:	85 30       	cpi	r24, 0x05	; 5
    4274:	08 f4       	brcc	.+2      	; 0x4278 <TimerCountUpDown+0x570>
    4276:	a0 c0       	rjmp	.+320    	; 0x43b8 <TimerCountUpDown+0x6b0>
    4278:	80 91 b4 00 	lds	r24, 0x00B4
    427c:	89 30       	cpi	r24, 0x09	; 9
    427e:	08 f4       	brcc	.+2      	; 0x4282 <TimerCountUpDown+0x57a>
    4280:	9b c0       	rjmp	.+310    	; 0x43b8 <TimerCountUpDown+0x6b0>
    4282:	80 91 b3 00 	lds	r24, 0x00B3
    4286:	85 30       	cpi	r24, 0x05	; 5
    4288:	08 f4       	brcc	.+2      	; 0x428c <TimerCountUpDown+0x584>
    428a:	96 c0       	rjmp	.+300    	; 0x43b8 <TimerCountUpDown+0x6b0>
		Hour2=0;
    428c:	10 92 b3 00 	sts	0x00B3, r1
		Hour1=0;
    4290:	10 92 b4 00 	sts	0x00B4, r1
		Min2=0;
    4294:	10 92 b5 00 	sts	0x00B5, r1
		Min1=0;
    4298:	10 92 b6 00 	sts	0x00B6, r1
		Sec1=0;
    429c:	10 92 b8 00 	sts	0x00B8, r1
		Sec2=0;
    42a0:	10 92 b7 00 	sts	0x00B7, r1
		LCD_VoidGoToXY(7,0,&lcd);
    42a4:	2a e9       	ldi	r18, 0x9A	; 154
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	87 e0       	ldi	r24, 0x07	; 7
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	a9 01       	movw	r20, r18
    42ae:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec1,&lcd,&type);
    42b2:	80 91 b8 00 	lds	r24, 0x00B8
    42b6:	88 2f       	mov	r24, r24
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	a0 e0       	ldi	r26, 0x00	; 0
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	2a e9       	ldi	r18, 0x9A	; 154
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	e6 e9       	ldi	r30, 0x96	; 150
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	bc 01       	movw	r22, r24
    42c8:	cd 01       	movw	r24, r26
    42ca:	a9 01       	movw	r20, r18
    42cc:	9f 01       	movw	r18, r30
    42ce:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(6,0,&lcd);
    42d2:	2a e9       	ldi	r18, 0x9A	; 154
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	86 e0       	ldi	r24, 0x06	; 6
    42d8:	60 e0       	ldi	r22, 0x00	; 0
    42da:	a9 01       	movw	r20, r18
    42dc:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Sec2,&lcd,&type);
    42e0:	80 91 b7 00 	lds	r24, 0x00B7
    42e4:	88 2f       	mov	r24, r24
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	a0 e0       	ldi	r26, 0x00	; 0
    42ea:	b0 e0       	ldi	r27, 0x00	; 0
    42ec:	2a e9       	ldi	r18, 0x9A	; 154
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	e6 e9       	ldi	r30, 0x96	; 150
    42f2:	f0 e0       	ldi	r31, 0x00	; 0
    42f4:	bc 01       	movw	r22, r24
    42f6:	cd 01       	movw	r24, r26
    42f8:	a9 01       	movw	r20, r18
    42fa:	9f 01       	movw	r18, r30
    42fc:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(4,0,&lcd);
    4300:	2a e9       	ldi	r18, 0x9A	; 154
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	84 e0       	ldi	r24, 0x04	; 4
    4306:	60 e0       	ldi	r22, 0x00	; 0
    4308:	a9 01       	movw	r20, r18
    430a:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min1,&lcd,&type);
    430e:	80 91 b6 00 	lds	r24, 0x00B6
    4312:	88 2f       	mov	r24, r24
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	a0 e0       	ldi	r26, 0x00	; 0
    4318:	b0 e0       	ldi	r27, 0x00	; 0
    431a:	2a e9       	ldi	r18, 0x9A	; 154
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	e6 e9       	ldi	r30, 0x96	; 150
    4320:	f0 e0       	ldi	r31, 0x00	; 0
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	a9 01       	movw	r20, r18
    4328:	9f 01       	movw	r18, r30
    432a:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(3,0,&lcd);
    432e:	2a e9       	ldi	r18, 0x9A	; 154
    4330:	30 e0       	ldi	r19, 0x00	; 0
    4332:	83 e0       	ldi	r24, 0x03	; 3
    4334:	60 e0       	ldi	r22, 0x00	; 0
    4336:	a9 01       	movw	r20, r18
    4338:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Min2,&lcd,&type);
    433c:	80 91 b5 00 	lds	r24, 0x00B5
    4340:	88 2f       	mov	r24, r24
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	a0 e0       	ldi	r26, 0x00	; 0
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	2a e9       	ldi	r18, 0x9A	; 154
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	e6 e9       	ldi	r30, 0x96	; 150
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	bc 01       	movw	r22, r24
    4352:	cd 01       	movw	r24, r26
    4354:	a9 01       	movw	r20, r18
    4356:	9f 01       	movw	r18, r30
    4358:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(1,0,&lcd);
    435c:	2a e9       	ldi	r18, 0x9A	; 154
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	a9 01       	movw	r20, r18
    4366:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Hour1,&lcd,&type);
    436a:	80 91 b4 00 	lds	r24, 0x00B4
    436e:	88 2f       	mov	r24, r24
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	a0 e0       	ldi	r26, 0x00	; 0
    4374:	b0 e0       	ldi	r27, 0x00	; 0
    4376:	2a e9       	ldi	r18, 0x9A	; 154
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	e6 e9       	ldi	r30, 0x96	; 150
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	bc 01       	movw	r22, r24
    4380:	cd 01       	movw	r24, r26
    4382:	a9 01       	movw	r20, r18
    4384:	9f 01       	movw	r18, r30
    4386:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
		LCD_VoidGoToXY(0,0,&lcd);
    438a:	2a e9       	ldi	r18, 0x9A	; 154
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	60 e0       	ldi	r22, 0x00	; 0
    4392:	a9 01       	movw	r20, r18
    4394:	0e 94 ab 1b 	call	0x3756	; 0x3756 <LCD_VoidGoToXY>
		LCD_VoidSendInt(Hour2,&lcd,&type);
    4398:	80 91 b3 00 	lds	r24, 0x00B3
    439c:	88 2f       	mov	r24, r24
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	a0 e0       	ldi	r26, 0x00	; 0
    43a2:	b0 e0       	ldi	r27, 0x00	; 0
    43a4:	2a e9       	ldi	r18, 0x9A	; 154
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	e6 e9       	ldi	r30, 0x96	; 150
    43aa:	f0 e0       	ldi	r31, 0x00	; 0
    43ac:	bc 01       	movw	r22, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	a9 01       	movw	r20, r18
    43b2:	9f 01       	movw	r18, r30
    43b4:	0e 94 1f 1c 	call	0x383e	; 0x383e <LCD_VoidSendInt>
	}
	//}
}
    43b8:	cf 91       	pop	r28
    43ba:	df 91       	pop	r29
    43bc:	08 95       	ret

000043be <__udivmodsi4>:
    43be:	a1 e2       	ldi	r26, 0x21	; 33
    43c0:	1a 2e       	mov	r1, r26
    43c2:	aa 1b       	sub	r26, r26
    43c4:	bb 1b       	sub	r27, r27
    43c6:	fd 01       	movw	r30, r26
    43c8:	0d c0       	rjmp	.+26     	; 0x43e4 <__udivmodsi4_ep>

000043ca <__udivmodsi4_loop>:
    43ca:	aa 1f       	adc	r26, r26
    43cc:	bb 1f       	adc	r27, r27
    43ce:	ee 1f       	adc	r30, r30
    43d0:	ff 1f       	adc	r31, r31
    43d2:	a2 17       	cp	r26, r18
    43d4:	b3 07       	cpc	r27, r19
    43d6:	e4 07       	cpc	r30, r20
    43d8:	f5 07       	cpc	r31, r21
    43da:	20 f0       	brcs	.+8      	; 0x43e4 <__udivmodsi4_ep>
    43dc:	a2 1b       	sub	r26, r18
    43de:	b3 0b       	sbc	r27, r19
    43e0:	e4 0b       	sbc	r30, r20
    43e2:	f5 0b       	sbc	r31, r21

000043e4 <__udivmodsi4_ep>:
    43e4:	66 1f       	adc	r22, r22
    43e6:	77 1f       	adc	r23, r23
    43e8:	88 1f       	adc	r24, r24
    43ea:	99 1f       	adc	r25, r25
    43ec:	1a 94       	dec	r1
    43ee:	69 f7       	brne	.-38     	; 0x43ca <__udivmodsi4_loop>
    43f0:	60 95       	com	r22
    43f2:	70 95       	com	r23
    43f4:	80 95       	com	r24
    43f6:	90 95       	com	r25
    43f8:	9b 01       	movw	r18, r22
    43fa:	ac 01       	movw	r20, r24
    43fc:	bd 01       	movw	r22, r26
    43fe:	cf 01       	movw	r24, r30
    4400:	08 95       	ret

00004402 <__prologue_saves__>:
    4402:	2f 92       	push	r2
    4404:	3f 92       	push	r3
    4406:	4f 92       	push	r4
    4408:	5f 92       	push	r5
    440a:	6f 92       	push	r6
    440c:	7f 92       	push	r7
    440e:	8f 92       	push	r8
    4410:	9f 92       	push	r9
    4412:	af 92       	push	r10
    4414:	bf 92       	push	r11
    4416:	cf 92       	push	r12
    4418:	df 92       	push	r13
    441a:	ef 92       	push	r14
    441c:	ff 92       	push	r15
    441e:	0f 93       	push	r16
    4420:	1f 93       	push	r17
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	cd b7       	in	r28, 0x3d	; 61
    4428:	de b7       	in	r29, 0x3e	; 62
    442a:	ca 1b       	sub	r28, r26
    442c:	db 0b       	sbc	r29, r27
    442e:	0f b6       	in	r0, 0x3f	; 63
    4430:	f8 94       	cli
    4432:	de bf       	out	0x3e, r29	; 62
    4434:	0f be       	out	0x3f, r0	; 63
    4436:	cd bf       	out	0x3d, r28	; 61
    4438:	09 94       	ijmp

0000443a <__epilogue_restores__>:
    443a:	2a 88       	ldd	r2, Y+18	; 0x12
    443c:	39 88       	ldd	r3, Y+17	; 0x11
    443e:	48 88       	ldd	r4, Y+16	; 0x10
    4440:	5f 84       	ldd	r5, Y+15	; 0x0f
    4442:	6e 84       	ldd	r6, Y+14	; 0x0e
    4444:	7d 84       	ldd	r7, Y+13	; 0x0d
    4446:	8c 84       	ldd	r8, Y+12	; 0x0c
    4448:	9b 84       	ldd	r9, Y+11	; 0x0b
    444a:	aa 84       	ldd	r10, Y+10	; 0x0a
    444c:	b9 84       	ldd	r11, Y+9	; 0x09
    444e:	c8 84       	ldd	r12, Y+8	; 0x08
    4450:	df 80       	ldd	r13, Y+7	; 0x07
    4452:	ee 80       	ldd	r14, Y+6	; 0x06
    4454:	fd 80       	ldd	r15, Y+5	; 0x05
    4456:	0c 81       	ldd	r16, Y+4	; 0x04
    4458:	1b 81       	ldd	r17, Y+3	; 0x03
    445a:	aa 81       	ldd	r26, Y+2	; 0x02
    445c:	b9 81       	ldd	r27, Y+1	; 0x01
    445e:	ce 0f       	add	r28, r30
    4460:	d1 1d       	adc	r29, r1
    4462:	0f b6       	in	r0, 0x3f	; 63
    4464:	f8 94       	cli
    4466:	de bf       	out	0x3e, r29	; 62
    4468:	0f be       	out	0x3f, r0	; 63
    446a:	cd bf       	out	0x3d, r28	; 61
    446c:	ed 01       	movw	r28, r26
    446e:	08 95       	ret

00004470 <_exit>:
    4470:	f8 94       	cli

00004472 <__stop_program>:
    4472:	ff cf       	rjmp	.-2      	; 0x4472 <__stop_program>
