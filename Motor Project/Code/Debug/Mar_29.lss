
Mar_29.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000459e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  0000459e  00004632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080015a  0080015a  0000472c  2**0
                  ALLOC
  3 .stab         000068dc  00000000  00000000  0000472c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004cbd  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000fcc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000fe05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ff75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00011bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00012aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00013858  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000139b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_1>
       8:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_2>
       c:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_3>
      10:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0a 21 	call	0x4214	; 0x4214 <main>
      8a:	0c 94 cd 22 	jmp	0x459a	; 0x459a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 96 22 	jmp	0x452c	; 0x452c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e1       	ldi	r26, 0x11	; 17
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 be 22 	jmp	0x457c	; 0x457c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 be 22 	jmp	0x457c	; 0x457c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 96 22 	jmp	0x452c	; 0x452c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e1       	ldi	r24, 0x11	; 17
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 be 22 	jmp	0x457c	; 0x457c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 be 22 	jmp	0x457c	; 0x457c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a2 22 	jmp	0x4544	; 0x4544 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 be 22 	jmp	0x457c	; 0x457c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a6 22 	jmp	0x454c	; 0x454c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <RTOS_VoidStart>:
#include "../GIE/GIE.h"
#include "RTOS_Interface.h"
#include "../Timer0/Timer0_Interface.h"

Task_t SystemTasks[TASK_NUM]={{Null}};
void RTOS_VoidStart(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	Timer0_VoidSetOCR0(&voidScheduler);
     b4e:	8e e7       	ldi	r24, 0x7E	; 126
     b50:	96 e0       	ldi	r25, 0x06	; 6
     b52:	0e 94 5d 07 	call	0xeba	; 0xeba <Timer0_VoidSetOCR0>
	GIEEnable();
     b56:	0e 94 ce 07 	call	0xf9c	; 0xf9c <GIEEnable>
	T0_VoidInit();
     b5a:	0e 94 25 07 	call	0xe4a	; 0xe4a <T0_VoidInit>

}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <RTOS_VoidCreatetask>:
u8 RTOS_VoidCreatetask(u8 Copy_u8Priority,u16 Copy_u16Periodicity,void (*Copy_pvTaskFunc)(void),u16 Copy_u16FirstDelay){
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	28 97       	sbiw	r28, 0x08	; 8
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	8a 83       	std	Y+2, r24	; 0x02
     b7a:	7c 83       	std	Y+4, r23	; 0x04
     b7c:	6b 83       	std	Y+3, r22	; 0x03
     b7e:	5e 83       	std	Y+6, r21	; 0x06
     b80:	4d 83       	std	Y+5, r20	; 0x05
     b82:	38 87       	std	Y+8, r19	; 0x08
     b84:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState= R_CREATED;
     b86:	19 82       	std	Y+1, r1	; 0x01
	/* check if the required priority empty or used for another task */
	if(SystemTasks[Copy_u8Priority].TaskFun==NULL){
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	c9 01       	movw	r24, r18
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	82 1b       	sub	r24, r18
     b9e:	93 0b       	sbc	r25, r19
     ba0:	fc 01       	movw	r30, r24
     ba2:	e4 5a       	subi	r30, 0xA4	; 164
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	80 81       	ld	r24, Z
     ba8:	91 81       	ldd	r25, Z+1	; 0x01
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	09 f0       	breq	.+2      	; 0xbb0 <RTOS_VoidCreatetask+0x4c>
     bae:	4a c0       	rjmp	.+148    	; 0xc44 <RTOS_VoidCreatetask+0xe0>
		SystemTasks[Copy_u8Priority].Periodicity=Copy_u16Periodicity;
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	c9 01       	movw	r24, r18
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	82 1b       	sub	r24, r18
     bc6:	93 0b       	sbc	r25, r19
     bc8:	fc 01       	movw	r30, r24
     bca:	e6 5a       	subi	r30, 0xA6	; 166
     bcc:	fe 4f       	sbci	r31, 0xFE	; 254
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].TaskFun=Copy_pvTaskFunc;
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	c9 01       	movw	r24, r18
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	82 1b       	sub	r24, r18
     bec:	93 0b       	sbc	r25, r19
     bee:	fc 01       	movw	r30, r24
     bf0:	e4 5a       	subi	r30, 0xA4	; 164
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	8d 81       	ldd	r24, Y+5	; 0x05
     bf6:	9e 81       	ldd	r25, Y+6	; 0x06
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].State=TASK_RESUMED; /* Initialize Task State */
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	c9 01       	movw	r24, r18
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	82 1b       	sub	r24, r18
     c12:	93 0b       	sbc	r25, r19
     c14:	fc 01       	movw	r30, r24
     c16:	e2 5a       	subi	r30, 0xA2	; 162
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	10 82       	st	Z, r1
		SystemTasks[Copy_u8Priority].FirstDelay=Copy_u16FirstDelay; /* assign first delay */
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	c9 01       	movw	r24, r18
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	82 1b       	sub	r24, r18
     c32:	93 0b       	sbc	r25, r19
     c34:	fc 01       	movw	r30, r24
     c36:	e1 5a       	subi	r30, 0xA1	; 161
     c38:	fe 4f       	sbci	r31, 0xFE	; 254
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
     c3e:	91 83       	std	Z+1, r25	; 0x01
     c40:	80 83       	st	Z, r24
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <RTOS_VoidCreatetask+0xe4>
	}
	else{
		Local_u8ErrorState= R_Error;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
}
     c4a:	28 96       	adiw	r28, 0x08	; 8
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <RTOS_VoidSuspendTask>:
void RTOS_VoidSuspendTask(u8 Copy_u8Priority){
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	0f 92       	push	r0
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State=TASK_SUSPENDED;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	c9 01       	movw	r24, r18
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	82 1b       	sub	r24, r18
     c7e:	93 0b       	sbc	r25, r19
     c80:	fc 01       	movw	r30, r24
     c82:	e2 5a       	subi	r30, 0xA2	; 162
     c84:	fe 4f       	sbci	r31, 0xFE	; 254
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 83       	st	Z, r24
}
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <RTOS_VoidResumeTask>:
void RTOS_VoidResumeTask(u8 Copy_u8Priority){
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State=TASK_RESUMED;
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	c9 01       	movw	r24, r18
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 1b       	sub	r24, r18
     cb4:	93 0b       	sbc	r25, r19
     cb6:	fc 01       	movw	r30, r24
     cb8:	e2 5a       	subi	r30, 0xA2	; 162
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	10 82       	st	Z, r1
}
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <RTOS_VoidDeleteTask>:
void RTOS_VoidDeleteTask(u8 Copy_u8Priority){
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	0f 92       	push	r0
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].TaskFun=Null;
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	c9 01       	movw	r24, r18
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	82 1b       	sub	r24, r18
     ce8:	93 0b       	sbc	r25, r19
     cea:	fc 01       	movw	r30, r24
     cec:	e4 5a       	subi	r30, 0xA4	; 164
     cee:	fe 4f       	sbci	r31, 0xFE	; 254
     cf0:	11 82       	std	Z+1, r1	; 0x01
     cf2:	10 82       	st	Z, r1
}
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <voidScheduler>:
static void voidScheduler(void){
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	//static u16 Local_u16Tickcounter=0; changed to use first delay
	u8 Local_u8TaskCounter;
	//Local_u16Tickcounter++;
	/* Loop on all tasks to check their priodicity */
	for(Local_u8TaskCounter=0;Local_u8TaskCounter<TASK_NUM;Local_u8TaskCounter++)
     d06:	19 82       	std	Y+1, r1	; 0x01
     d08:	98 c0       	rjmp	.+304    	; 0xe3a <voidScheduler+0x13e>
	{
		/* Suspended or Not  */
		if(SystemTasks[Local_u8TaskCounter].State==TASK_RESUMED){
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	c9 01       	movw	r24, r18
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	82 1b       	sub	r24, r18
     d20:	93 0b       	sbc	r25, r19
     d22:	fc 01       	movw	r30, r24
     d24:	e2 5a       	subi	r30, 0xA2	; 162
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	09 f0       	breq	.+2      	; 0xd30 <voidScheduler+0x34>
     d2e:	82 c0       	rjmp	.+260    	; 0xe34 <voidScheduler+0x138>
			/* INVOKE THE TASK FUNCTION */
			//if((Local_u16Tickcounter%SystemTasks[Local_u8TaskCounter].Periodicity)==0){
			if(SystemTasks[Local_u8TaskCounter].FirstDelay==0){
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	c9 01       	movw	r24, r18
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	82 1b       	sub	r24, r18
     d46:	93 0b       	sbc	r25, r19
     d48:	fc 01       	movw	r30, r24
     d4a:	e1 5a       	subi	r30, 0xA1	; 161
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	09 f0       	breq	.+2      	; 0xd58 <voidScheduler+0x5c>
     d56:	6e c0       	rjmp	.+220    	; 0xe34 <voidScheduler+0x138>

				if(SystemTasks[Local_u8TaskCounter].TaskFun!=Null){
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	c9 01       	movw	r24, r18
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	82 1b       	sub	r24, r18
     d6e:	93 0b       	sbc	r25, r19
     d70:	fc 01       	movw	r30, r24
     d72:	e4 5a       	subi	r30, 0xA4	; 164
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	c9 f1       	breq	.+114    	; 0xdf0 <voidScheduler+0xf4>
					SystemTasks[Local_u8TaskCounter].TaskFun();
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	c9 01       	movw	r24, r18
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	82 1b       	sub	r24, r18
     d94:	93 0b       	sbc	r25, r19
     d96:	fc 01       	movw	r30, r24
     d98:	e4 5a       	subi	r30, 0xA4	; 164
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	01 90       	ld	r0, Z+
     d9e:	f0 81       	ld	r31, Z
     da0:	e0 2d       	mov	r30, r0
     da2:	09 95       	icall
					/* Assign the first delay parameter periodicity-1 */
					SystemTasks[Local_u8TaskCounter].FirstDelay = SystemTasks[Local_u8TaskCounter].Periodicity-1;
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	48 2f       	mov	r20, r24
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	c9 01       	movw	r24, r18
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	82 1b       	sub	r24, r18
     dc0:	93 0b       	sbc	r25, r19
     dc2:	fc 01       	movw	r30, r24
     dc4:	e6 5a       	subi	r30, 0xA6	; 166
     dc6:	fe 4f       	sbci	r31, 0xFE	; 254
     dc8:	80 81       	ld	r24, Z
     dca:	91 81       	ldd	r25, Z+1	; 0x01
     dcc:	9c 01       	movw	r18, r24
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	30 40       	sbci	r19, 0x00	; 0
     dd2:	ca 01       	movw	r24, r20
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	84 1b       	sub	r24, r20
     de2:	95 0b       	sbc	r25, r21
     de4:	fc 01       	movw	r30, r24
     de6:	e1 5a       	subi	r30, 0xA1	; 161
     de8:	fe 4f       	sbci	r31, 0xFE	; 254
     dea:	31 83       	std	Z+1, r19	; 0x01
     dec:	20 83       	st	Z, r18
     dee:	22 c0       	rjmp	.+68     	; 0xe34 <voidScheduler+0x138>
				}
				else
				{
					/* Decrement the first delay */
					SystemTasks[Local_u8TaskCounter].FirstDelay--;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	c9 01       	movw	r24, r18
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	82 1b       	sub	r24, r18
     e06:	93 0b       	sbc	r25, r19
     e08:	fc 01       	movw	r30, r24
     e0a:	e1 5a       	subi	r30, 0xA1	; 161
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	ac 01       	movw	r20, r24
     e14:	41 50       	subi	r20, 0x01	; 1
     e16:	50 40       	sbci	r21, 0x00	; 0
     e18:	c9 01       	movw	r24, r18
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	82 1b       	sub	r24, r18
     e28:	93 0b       	sbc	r25, r19
     e2a:	fc 01       	movw	r30, r24
     e2c:	e1 5a       	subi	r30, 0xA1	; 161
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	51 83       	std	Z+1, r21	; 0x01
     e32:	40 83       	st	Z, r20
static void voidScheduler(void){
	//static u16 Local_u16Tickcounter=0; changed to use first delay
	u8 Local_u8TaskCounter;
	//Local_u16Tickcounter++;
	/* Loop on all tasks to check their priodicity */
	for(Local_u8TaskCounter=0;Local_u8TaskCounter<TASK_NUM;Local_u8TaskCounter++)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	08 f4       	brcc	.+2      	; 0xe42 <voidScheduler+0x146>
     e40:	64 cf       	rjmp	.-312    	; 0xd0a <voidScheduler+0xe>
		else
		{
			/* Task Suspended Do nothing */
		}
	}
}
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <T0_VoidInit>:
 */


#include "Timer0_Interface.h"
static void (*T0_pvCallBackfun)(void)=Null;
void T0_VoidInit(void){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	/* Setting Prescaler*/
	Prescale;
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8e 7f       	andi	r24, 0xFE	; 254
     e5e:	8c 93       	st	X, r24
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	82 60       	ori	r24, 0x02	; 2
     e6c:	8c 93       	st	X, r24
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8b 7f       	andi	r24, 0xFB	; 251
     e7a:	8c 93       	st	X, r24

	/* Setting CTC Mode On */
	CLEAR_BIT(TCCR0_Reg,TCCR0_WGM00);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7b       	andi	r24, 0xBF	; 191
     e88:	8c 93       	st	X, r24
	SET_BIT(TCCR0_Reg,TCCR0_WGM01);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	8c 93       	st	X, r24

	/* Enable T0 Interrupt */
	SET_BIT(TIMSK_Reg,TIMSK_OCIE0);
     e98:	a9 e5       	ldi	r26, 0x59	; 89
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e9 e5       	ldi	r30, 0x59	; 89
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK_Reg,TIMSK_TOIE0);
     ea6:	a9 e5       	ldi	r26, 0x59	; 89
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e9 e5       	ldi	r30, 0x59	; 89
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	8c 93       	st	X, r24

}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <Timer0_VoidSetOCR0>:
void Timer0_VoidSetOCR0(u8 *OCR0_Value){
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <Timer0_VoidSetOCR0+0x6>
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
	OCR0_Reg=*OCR0_Value;
     ec8:	ec e5       	ldi	r30, 0x5C	; 92
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	a9 81       	ldd	r26, Y+1	; 0x01
     ece:	ba 81       	ldd	r27, Y+2	; 0x02
     ed0:	8c 91       	ld	r24, X
     ed2:	80 83       	st	Z, r24

}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <Timer0_u8SetCallBack>:
u8 Timer0_u8SetCallBack(void (*Copy_pvCallBackfun)(void)){
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <Timer0_u8SetCallBack+0x6>
     ee4:	0f 92       	push	r0
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackfun!=Null){
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	49 f0       	breq	.+18     	; 0xf08 <Timer0_u8SetCallBack+0x2a>
		T0_pvCallBackfun=Copy_pvCallBackfun;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	90 93 70 01 	sts	0x0170, r25
     efe:	80 93 6f 01 	sts	0x016F, r24
		return 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	8b 83       	std	Y+3, r24	; 0x03
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <Timer0_u8SetCallBack+0x2c>
	}
	else
		/*Nothing*/
		return 0;
     f08:	1b 82       	std	Y+3, r1	; 0x03
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <__vector_10>:
//ISR(TIMER0_COMP_VECT)
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	static u16 counter=0;
	counter++;
     f42:	80 91 71 01 	lds	r24, 0x0171
     f46:	90 91 72 01 	lds	r25, 0x0172
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	90 93 72 01 	sts	0x0172, r25
     f50:	80 93 71 01 	sts	0x0171, r24
	if(counter==IFCOND){
     f54:	80 91 71 01 	lds	r24, 0x0171
     f58:	90 91 72 01 	lds	r25, 0x0172
     f5c:	2f e0       	ldi	r18, 0x0F	; 15
     f5e:	80 3a       	cpi	r24, 0xA0	; 160
     f60:	92 07       	cpc	r25, r18
     f62:	49 f4       	brne	.+18     	; 0xf76 <__vector_10+0x5e>
		//if(T0_pvCallBackfun!=Null){
		T0_pvCallBackfun();
     f64:	e0 91 6f 01 	lds	r30, 0x016F
     f68:	f0 91 70 01 	lds	r31, 0x0170
     f6c:	09 95       	icall
		counter=0;
     f6e:	10 92 72 01 	sts	0x0172, r1
     f72:	10 92 71 01 	sts	0x0171, r1
		//}
	}
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <GIEEnable>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "GIE.h"
void GIEEnable(void){
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
     fa4:	af e5       	ldi	r26, 0x5F	; 95
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ef e5       	ldi	r30, 0x5F	; 95
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	8c 93       	st	X, r24
}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <WDT_voidEnable>:
 *      Author: Mazen
 */

#include "Watchdog_Interface.h"
void WDT_voidEnable(void)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
SET_BIT(WDTCR_Reg,WDTCR_WDE);
     fc0:	a1 e4       	ldi	r26, 0x41	; 65
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e4       	ldi	r30, 0x41	; 65
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	88 60       	ori	r24, 0x08	; 8
     fcc:	8c 93       	st	X, r24

}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <WDT_voidDisable>:
void WDT_voidDisable(void){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
WDTCR_Reg=(1<<WDTCR_WDTOE)|(1<<WDTCR_WDE);
     fdc:	e1 e4       	ldi	r30, 0x41	; 65
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	88 e1       	ldi	r24, 0x18	; 24
     fe2:	80 83       	st	Z, r24
WDTCR_Reg=0;
     fe4:	e1 e4       	ldi	r30, 0x41	; 65
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	10 82       	st	Z, r1
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <WDT_ErrStateSleep>:
WDErr WDT_ErrStateSleep(u8 SleepTime){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <WDT_ErrStateSleep+0x6>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	89 83       	std	Y+1, r24	; 0x01
if(SleepTime<8){
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	88 30       	cpi	r24, 0x08	; 8
    1000:	88 f4       	brcc	.+34     	; 0x1024 <WDT_ErrStateSleep+0x34>
	WDTCR_Reg&=0b11111000;
    1002:	a1 e4       	ldi	r26, 0x41	; 65
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e4       	ldi	r30, 0x41	; 65
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 7f       	andi	r24, 0xF8	; 248
    100e:	8c 93       	st	X, r24
	WDTCR_Reg|=SleepTime;
    1010:	a1 e4       	ldi	r26, 0x41	; 65
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e1 e4       	ldi	r30, 0x41	; 65
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	90 81       	ld	r25, Z
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	89 2b       	or	r24, r25
    101e:	8c 93       	st	X, r24
}
else{
	return WDTime_Wrong;
}
return WDTime_OK;
    1020:	1a 82       	std	Y+2, r1	; 0x02
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <WDT_ErrStateSleep+0x38>
if(SleepTime<8){
	WDTCR_Reg&=0b11111000;
	WDTCR_Reg|=SleepTime;
}
else{
	return WDTime_Wrong;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	8a 83       	std	Y+2, r24	; 0x02
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
}
return WDTime_OK;
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <T2_VoidFPWMInit>:

#include "T2_FASTPWM_Interface.h"
#include "../T2_Mode.h"
#if Mode==FPWM

void T2_VoidFPWMInit(void){
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	/* Set fast pwm  */
	CLEAR_BIT(TCCR2_Reg,TCCR2_FPWM_FOC2);
    103c:	a5 e4       	ldi	r26, 0x45	; 69
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e5 e4       	ldi	r30, 0x45	; 69
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8f 77       	andi	r24, 0x7F	; 127
    1048:	8c 93       	st	X, r24
	/* Set CTC Mode */
	SET_BIT(TCCR2_Reg,TCCR2_FPWM_WGM20);
    104a:	a5 e4       	ldi	r26, 0x45	; 69
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e4       	ldi	r30, 0x45	; 69
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 64       	ori	r24, 0x40	; 64
    1056:	8c 93       	st	X, r24
	SET_BIT(TCCR2_Reg,TCCR2_FPWM_WGM21);
    1058:	a5 e4       	ldi	r26, 0x45	; 69
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e5 e4       	ldi	r30, 0x45	; 69
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	88 60       	ori	r24, 0x08	; 8
    1064:	8c 93       	st	X, r24
	/* Inverting Mode */
	SET_BIT(TCCR2_Reg,TCCR2_FPWM_COM20);
    1066:	a5 e4       	ldi	r26, 0x45	; 69
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e5 e4       	ldi	r30, 0x45	; 69
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 61       	ori	r24, 0x10	; 16
    1072:	8c 93       	st	X, r24
	SET_BIT(TCCR2_Reg,TCCR2_FPWM_COM21);
    1074:	a5 e4       	ldi	r26, 0x45	; 69
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e4       	ldi	r30, 0x45	; 69
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 62       	ori	r24, 0x20	; 32
    1080:	8c 93       	st	X, r24
	/* Prescale 8bit */
	Set_Prescaler;
    1082:	a5 e4       	ldi	r26, 0x45	; 69
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e4       	ldi	r30, 0x45	; 69
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8c 93       	st	X, r24
    1090:	a5 e4       	ldi	r26, 0x45	; 69
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e4       	ldi	r30, 0x45	; 69
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8d 7f       	andi	r24, 0xFD	; 253
    109c:	8c 93       	st	X, r24
    109e:	a5 e4       	ldi	r26, 0x45	; 69
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e4       	ldi	r30, 0x45	; 69
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	8c 93       	st	X, r24
	/* Enable Interrupt */
	SET_BIT(TIMSK_Reg,TIMSK_FPWM_OCIE2);
    10ac:	a9 e5       	ldi	r26, 0x59	; 89
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e9 e5       	ldi	r30, 0x59	; 89
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 68       	ori	r24, 0x80	; 128
    10b8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK_Reg,TIMSK_FPWM_TOIE2);
    10ba:	a9 e5       	ldi	r26, 0x59	; 89
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e9 e5       	ldi	r30, 0x59	; 89
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	8f 7b       	andi	r24, 0xBF	; 191
    10c6:	8c 93       	st	X, r24

}
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <T2_VoidSetOCR2>:
void T2_VoidSetOCR2(u8 OCR){
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
	OCR2_Reg=OCR;
    10da:	e3 e4       	ldi	r30, 0x43	; 67
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	80 83       	st	Z, r24

}
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <__vector_4>:
 * this function comes from main by calling T2_VoidSetCallback
 * */


void __vector_4(void) __attribute__((signal));
void __vector_4(void){
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62




}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <INT2_VoidSETINT2>:
 *      Author: Mazen
 */
#include "EXTINT2_Interface.h"
void (*INT2_CallbackAddress)(void)=Null;

void INT2_VoidSETINT2(void){
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
EnableGlobalInterrupt();
    1112:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <EnableGlobalInterrupt>
ENABLEINT2_GICR_Reg;
    1116:	ab e5       	ldi	r26, 0x5B	; 91
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	eb e5       	ldi	r30, 0x5B	; 91
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	80 62       	ori	r24, 0x20	; 32
    1122:	8c 93       	st	X, r24
ENABLEINT2_FALLING_EDGE;
    1124:	a4 e5       	ldi	r26, 0x54	; 84
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e5       	ldi	r30, 0x54	; 84
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	8c 93       	st	X, r24
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <INT2_SetCallBack>:
INT2_Err INT2_SetCallBack(void (*INT2CB)(void)){
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <INT2_SetCallBack+0x6>
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01
	if(INT2CB!=Null){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	49 f0       	breq	.+18     	; 0x1162 <INT2_SetCallBack+0x2a>
	INT2CB=INT2_CallbackAddress;
    1150:	80 91 73 01 	lds	r24, 0x0173
    1154:	90 91 74 01 	lds	r25, 0x0174
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		return INT2_PTR_NULL;
	}
	return INT2_PTR_OK;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	8b 83       	std	Y+3, r24	; 0x03
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <INT2_SetCallBack+0x2e>
	if(INT2CB!=Null){
	INT2CB=INT2_CallbackAddress;
	}
	else
	{
		return INT2_PTR_NULL;
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	8b 83       	std	Y+3, r24	; 0x03
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT2_PTR_OK;
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
if(INT2_CallbackAddress!=Null){
    119e:	80 91 73 01 	lds	r24, 0x0173
    11a2:	90 91 74 01 	lds	r25, 0x0174
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <__vector_3+0x40>
	INT2_CallbackAddress();
    11aa:	e0 91 73 01 	lds	r30, 0x0173
    11ae:	f0 91 74 01 	lds	r31, 0x0174
    11b2:	09 95       	icall
}
else{
//Nothing
}
}
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <INT1_VoidSETINT1>:
 */
#include "EXTINT1_Interface.h"

void (*INT1_CallbackAddress)(void)=Null;

void INT1_VoidSETINT1(void){
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	EnableGlobalInterrupt();
    11e2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <EnableGlobalInterrupt>
	ENABLEINT1_GICR_Reg;
    11e6:	ab e5       	ldi	r26, 0x5B	; 91
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e5       	ldi	r30, 0x5B	; 91
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 68       	ori	r24, 0x80	; 128
    11f2:	8c 93       	st	X, r24
#if CaseINT1==INT1_LowLevel
	ENABLEINT1_LOW_LEVEL;
    11f4:	a5 e5       	ldi	r26, 0x55	; 85
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e5       	ldi	r30, 0x55	; 85
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8b 7f       	andi	r24, 0xFB	; 251
    1200:	8c 93       	st	X, r24
    1202:	a5 e5       	ldi	r26, 0x55	; 85
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	87 7f       	andi	r24, 0xF7	; 247
    120e:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT0_AnyLogicalChange
	ENABLEINT1_ANY_LOGIC;
    1210:	a5 e5       	ldi	r26, 0x55	; 85
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e5       	ldi	r30, 0x55	; 85
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	84 60       	ori	r24, 0x04	; 4
    121c:	8c 93       	st	X, r24
    121e:	a5 e5       	ldi	r26, 0x55	; 85
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e5       	ldi	r30, 0x55	; 85
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	87 7f       	andi	r24, 0xF7	; 247
    122a:	8c 93       	st	X, r24
#endif
#if CaseINT1 ==INT1_FallingEdge
	ENABLEINT1_FALLING_EDGE;
    122c:	a5 e5       	ldi	r26, 0x55	; 85
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e5 e5       	ldi	r30, 0x55	; 85
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8b 7f       	andi	r24, 0xFB	; 251
    1238:	8c 93       	st	X, r24
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 60       	ori	r24, 0x08	; 8
    1246:	8c 93       	st	X, r24
#endif
#if CaseINT1==INT1_RisingEdge
	ENABLEINT1_RISING_EDGE;
    1248:	a5 e5       	ldi	r26, 0x55	; 85
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	8c 93       	st	X, r24
    1256:	a5 e5       	ldi	r26, 0x55	; 85
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e5 e5       	ldi	r30, 0x55	; 85
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	88 60       	ori	r24, 0x08	; 8
    1262:	8c 93       	st	X, r24
#endif
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <INT1_SetCallBack>:

INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <INT1_SetCallBack+0x6>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
	if(INT1CB!=Null){
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	49 f0       	breq	.+18     	; 0x1294 <INT1_SetCallBack+0x2a>
	INT1CB=INT1_CallbackAddress;
    1282:	80 91 75 01 	lds	r24, 0x0175
    1286:	90 91 76 01 	lds	r25, 0x0176
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
	}
	else{
		return INT1_PTR_NULL;
	}
	return INT1_PTR_OK;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <INT1_SetCallBack+0x2e>
INT1_Err INT1_SetCallBack(void (*INT1CB)(void)){
	if(INT1CB!=Null){
	INT1CB=INT1_CallbackAddress;
	}
	else{
		return INT1_PTR_NULL;
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return INT1_PTR_OK;

}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <__vector_2>:

void __vector_2 (void) __attribute__((signal));
void __vector_2(void){
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	2f 93       	push	r18
    12b2:	3f 93       	push	r19
    12b4:	4f 93       	push	r20
    12b6:	5f 93       	push	r21
    12b8:	6f 93       	push	r22
    12ba:	7f 93       	push	r23
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	af 93       	push	r26
    12c2:	bf 93       	push	r27
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	if(INT1_CallbackAddress!=Null){
    12d0:	80 91 75 01 	lds	r24, 0x0175
    12d4:	90 91 76 01 	lds	r25, 0x0176
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	29 f0       	breq	.+10     	; 0x12e6 <__vector_2+0x40>
		INT1_CallbackAddress();
    12dc:	e0 91 75 01 	lds	r30, 0x0175
    12e0:	f0 91 76 01 	lds	r31, 0x0176
    12e4:	09 95       	icall
	}
	else{
		//Do Nothing
	}
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <INT0_VoidSETINT0>:
 */

#include "EXTINT0_Interface.h"
void (*INT0_CallbackAddress)(void)=Null;

void INT0_VoidSETINT0(void){
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	DIO_ErrStateSetPinDirection(PORT_D,PIN_2,DIO_IN);
    1314:	84 e4       	ldi	r24, 0x44	; 68
    1316:	62 e0       	ldi	r22, 0x02	; 2
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinValue(PORT_D,PIN_2,DIO_HIGH);
    131e:	84 e4       	ldi	r24, 0x44	; 68
    1320:	62 e0       	ldi	r22, 0x02	; 2
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
	SET_BIT(GICR_Reg,GICR_INT0_BIT);
    1328:	ab e5       	ldi	r26, 0x5B	; 91
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e5       	ldi	r30, 0x5B	; 91
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 64       	ori	r24, 0x40	; 64
    1334:	8c 93       	st	X, r24
#elif CaseINT0==INT0_AnyLogicalChange
	ENABLEINT0_ANY_LOGIC;

#elif CaseINT0 ==INT0_FallingEdge
	//ENABLEINT0_FALLING_EDGE;
	CLEAR_BIT(MCUCR_Reg,ISC00);
    1336:	a5 e5       	ldi	r26, 0x55	; 85
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e5 e5       	ldi	r30, 0x55	; 85
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8e 7f       	andi	r24, 0xFE	; 254
    1342:	8c 93       	st	X, r24
	SET_BIT(MCUCR_Reg,ISC01);
    1344:	a5 e5       	ldi	r26, 0x55	; 85
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e5 e5       	ldi	r30, 0x55	; 85
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	82 60       	ori	r24, 0x02	; 2
    1350:	8c 93       	st	X, r24

#elif CaseINT0==INT0_RisingEdge
	ENABLEINT0_RISING_EDGE;
#endif
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <INT0_SetCallBack>:

INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <INT0_SetCallBack+0x6>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	89 83       	std	Y+1, r24	; 0x01
if(INT0CB != Null){
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	49 f0       	breq	.+18     	; 0x1382 <INT0_SetCallBack+0x2a>
	INT0_CallbackAddress=INT0CB;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	90 93 78 01 	sts	0x0178, r25
    1378:	80 93 77 01 	sts	0x0177, r24
	}
else{
	return INT0_PTR_NULL;
}
return INT0_PTR_OK;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <INT0_SetCallBack+0x2e>
INT0_Err INT0_SetCallBack(void (*INT0CB)(void)){
if(INT0CB != Null){
	INT0_CallbackAddress=INT0CB;
	}
else{
	return INT0_PTR_NULL;
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
}
return INT0_PTR_OK;
}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	4f 93       	push	r20
    13a4:	5f 93       	push	r21
    13a6:	6f 93       	push	r22
    13a8:	7f 93       	push	r23
    13aa:	8f 93       	push	r24
    13ac:	9f 93       	push	r25
    13ae:	af 93       	push	r26
    13b0:	bf 93       	push	r27
    13b2:	ef 93       	push	r30
    13b4:	ff 93       	push	r31
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62

//	if(INT0_CallbackAddress!=Null){
		INT0_CallbackAddress();
    13be:	e0 91 77 01 	lds	r30, 0x0177
    13c2:	f0 91 78 01 	lds	r31, 0x0178
    13c6:	09 95       	icall

//	}
	//else{
		//nothing
	//}
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <DIO_ErrStateSetPinDirection>:
 *      Author: Mazen
 */

#include "DIO_Interface.h"

DIO_Err DIO_ErrStateSetPinDirection(PORT_Name port,PIN_Number pin,Direction direction){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    13f6:	28 97       	sbiw	r28, 0x08	; 8
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	6a 83       	std	Y+2, r22	; 0x02
    1406:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	08 f0       	brcs	.+2      	; 0x1410 <DIO_ErrStateSetPinDirection+0x22>
    140e:	f8 c0       	rjmp	.+496    	; 0x1600 <DIO_ErrStateSetPinDirection+0x212>
		{
			if(direction == DIO_OUT)
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	09 f0       	breq	.+2      	; 0x1418 <DIO_ErrStateSetPinDirection+0x2a>
    1416:	73 c0       	rjmp	.+230    	; 0x14fe <DIO_ErrStateSetPinDirection+0x110>
			{
				switch(port)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	38 87       	std	Y+8, r19	; 0x08
    1420:	2f 83       	std	Y+7, r18	; 0x07
    1422:	8f 81       	ldd	r24, Y+7	; 0x07
    1424:	98 85       	ldd	r25, Y+8	; 0x08
    1426:	82 34       	cpi	r24, 0x42	; 66
    1428:	91 05       	cpc	r25, r1
    142a:	51 f1       	breq	.+84     	; 0x1480 <DIO_ErrStateSetPinDirection+0x92>
    142c:	2f 81       	ldd	r18, Y+7	; 0x07
    142e:	38 85       	ldd	r19, Y+8	; 0x08
    1430:	23 34       	cpi	r18, 0x43	; 67
    1432:	31 05       	cpc	r19, r1
    1434:	34 f4       	brge	.+12     	; 0x1442 <DIO_ErrStateSetPinDirection+0x54>
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	81 34       	cpi	r24, 0x41	; 65
    143c:	91 05       	cpc	r25, r1
    143e:	61 f0       	breq	.+24     	; 0x1458 <DIO_ErrStateSetPinDirection+0x6a>
    1440:	5b c0       	rjmp	.+182    	; 0x14f8 <DIO_ErrStateSetPinDirection+0x10a>
    1442:	2f 81       	ldd	r18, Y+7	; 0x07
    1444:	38 85       	ldd	r19, Y+8	; 0x08
    1446:	23 34       	cpi	r18, 0x43	; 67
    1448:	31 05       	cpc	r19, r1
    144a:	71 f1       	breq	.+92     	; 0x14a8 <DIO_ErrStateSetPinDirection+0xba>
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	98 85       	ldd	r25, Y+8	; 0x08
    1450:	84 34       	cpi	r24, 0x44	; 68
    1452:	91 05       	cpc	r25, r1
    1454:	e9 f1       	breq	.+122    	; 0x14d0 <DIO_ErrStateSetPinDirection+0xe2>
    1456:	50 c0       	rjmp	.+160    	; 0x14f8 <DIO_ErrStateSetPinDirection+0x10a>
				{
				case 'A': SET_BIT(DDRA_ITI,pin); break;
    1458:	aa e3       	ldi	r26, 0x3A	; 58
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ea e3       	ldi	r30, 0x3A	; 58
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 2e       	mov	r0, r18
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_ErrStateSetPinDirection+0x88>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_ErrStateSetPinDirection+0x84>
    147a:	84 2b       	or	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	be c0       	rjmp	.+380    	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': SET_BIT(DDRB_ITI,pin); break;
    1480:	a7 e3       	ldi	r26, 0x37	; 55
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e7 e3       	ldi	r30, 0x37	; 55
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_ErrStateSetPinDirection+0xb0>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_ErrStateSetPinDirection+0xac>
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	aa c0       	rjmp	.+340    	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': SET_BIT(DDRC_ITI,pin); break;
    14a8:	a4 e3       	ldi	r26, 0x34	; 52
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e4 e3       	ldi	r30, 0x34	; 52
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_ErrStateSetPinDirection+0xd8>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_ErrStateSetPinDirection+0xd4>
    14ca:	84 2b       	or	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	96 c0       	rjmp	.+300    	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': SET_BIT(DDRD_ITI,pin); break;
    14d0:	a1 e3       	ldi	r26, 0x31	; 49
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e1 e3       	ldi	r30, 0x31	; 49
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_ErrStateSetPinDirection+0x100>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_ErrStateSetPinDirection+0xfc>
    14f2:	84 2b       	or	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	82 c0       	rjmp	.+260    	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	83 c0       	rjmp	.+262    	; 0x1604 <DIO_ErrStateSetPinDirection+0x216>
				}

			}
			else if(direction == DIO_IN)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	88 23       	and	r24, r24
    1502:	09 f0       	breq	.+2      	; 0x1506 <DIO_ErrStateSetPinDirection+0x118>
    1504:	78 c0       	rjmp	.+240    	; 0x15f6 <DIO_ErrStateSetPinDirection+0x208>
			{
				switch(port)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	82 34       	cpi	r24, 0x42	; 66
    1516:	91 05       	cpc	r25, r1
    1518:	61 f1       	breq	.+88     	; 0x1572 <DIO_ErrStateSetPinDirection+0x184>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	23 34       	cpi	r18, 0x43	; 67
    1520:	31 05       	cpc	r19, r1
    1522:	34 f4       	brge	.+12     	; 0x1530 <DIO_ErrStateSetPinDirection+0x142>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	81 34       	cpi	r24, 0x41	; 65
    152a:	91 05       	cpc	r25, r1
    152c:	69 f0       	breq	.+26     	; 0x1548 <DIO_ErrStateSetPinDirection+0x15a>
    152e:	60 c0       	rjmp	.+192    	; 0x15f0 <DIO_ErrStateSetPinDirection+0x202>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	23 34       	cpi	r18, 0x43	; 67
    1536:	31 05       	cpc	r19, r1
    1538:	89 f1       	breq	.+98     	; 0x159c <DIO_ErrStateSetPinDirection+0x1ae>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	84 34       	cpi	r24, 0x44	; 68
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <DIO_ErrStateSetPinDirection+0x158>
    1544:	40 c0       	rjmp	.+128    	; 0x15c6 <DIO_ErrStateSetPinDirection+0x1d8>
    1546:	54 c0       	rjmp	.+168    	; 0x15f0 <DIO_ErrStateSetPinDirection+0x202>
				{
				case 'A': CLEAR_BIT(DDRA_ITI,pin); break;
    1548:	aa e3       	ldi	r26, 0x3A	; 58
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ea e3       	ldi	r30, 0x3A	; 58
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_ErrStateSetPinDirection+0x178>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_ErrStateSetPinDirection+0x174>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	45 c0       	rjmp	.+138    	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				case 'B': CLEAR_BIT(DDRB_ITI,pin); break;
    1572:	a7 e3       	ldi	r26, 0x37	; 55
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e7 e3       	ldi	r30, 0x37	; 55
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_ErrStateSetPinDirection+0x1a2>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_ErrStateSetPinDirection+0x19e>
    1594:	80 95       	com	r24
    1596:	84 23       	and	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	30 c0       	rjmp	.+96     	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				case 'C': CLEAR_BIT(DDRC_ITI,pin); break;
    159c:	a4 e3       	ldi	r26, 0x34	; 52
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 e3       	ldi	r30, 0x34	; 52
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_ErrStateSetPinDirection+0x1cc>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_ErrStateSetPinDirection+0x1c8>
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	1b c0       	rjmp	.+54     	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				case 'D': CLEAR_BIT(DDRD_ITI,pin); break;
    15c6:	a1 e3       	ldi	r26, 0x31	; 49
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e1 e3       	ldi	r30, 0x31	; 49
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_ErrStateSetPinDirection+0x1f6>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_ErrStateSetPinDirection+0x1f2>
    15e8:	80 95       	com	r24
    15ea:	84 23       	and	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <DIO_ErrStateSetPinDirection+0x20e>
				default: return DIO_ERROR_PORT;				}
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
    15f6:	23 e0       	ldi	r18, 0x03	; 3
    15f8:	2e 83       	std	Y+6, r18	; 0x06
    15fa:	04 c0       	rjmp	.+8      	; 0x1604 <DIO_ErrStateSetPinDirection+0x216>
		}
	else
		return DIO_ERROR_PIN;
	return DIO_OK;
    15fc:	1e 82       	std	Y+6, r1	; 0x06
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_ErrStateSetPinDirection+0x216>
			}
			else
				return DIO_ERROR_Direction;
		}
	else
		return DIO_ERROR_PIN;
    1600:	32 e0       	ldi	r19, 0x02	; 2
    1602:	3e 83       	std	Y+6, r19	; 0x06
    1604:	8e 81       	ldd	r24, Y+6	; 0x06
	return DIO_OK;
}
    1606:	28 96       	adiw	r28, 0x08	; 8
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <DIO_ErrStateSetPinValue>:
DIO_Err DIO_ErrStateSetPinValue(PORT_Name port,PIN_Number pin,Volt val){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	28 97       	sbiw	r28, 0x08	; 8
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6a 83       	std	Y+2, r22	; 0x02
    1630:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	88 30       	cpi	r24, 0x08	; 8
    1636:	08 f0       	brcs	.+2      	; 0x163a <DIO_ErrStateSetPinValue+0x22>
    1638:	f8 c0       	rjmp	.+496    	; 0x182a <DIO_ErrStateSetPinValue+0x212>
			{
				if(val == DIO_HIGH)
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	09 f0       	breq	.+2      	; 0x1642 <DIO_ErrStateSetPinValue+0x2a>
    1640:	73 c0       	rjmp	.+230    	; 0x1728 <DIO_ErrStateSetPinValue+0x110>
				{
					switch(port)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	38 87       	std	Y+8, r19	; 0x08
    164a:	2f 83       	std	Y+7, r18	; 0x07
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	98 85       	ldd	r25, Y+8	; 0x08
    1650:	82 34       	cpi	r24, 0x42	; 66
    1652:	91 05       	cpc	r25, r1
    1654:	51 f1       	breq	.+84     	; 0x16aa <DIO_ErrStateSetPinValue+0x92>
    1656:	2f 81       	ldd	r18, Y+7	; 0x07
    1658:	38 85       	ldd	r19, Y+8	; 0x08
    165a:	23 34       	cpi	r18, 0x43	; 67
    165c:	31 05       	cpc	r19, r1
    165e:	34 f4       	brge	.+12     	; 0x166c <DIO_ErrStateSetPinValue+0x54>
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	98 85       	ldd	r25, Y+8	; 0x08
    1664:	81 34       	cpi	r24, 0x41	; 65
    1666:	91 05       	cpc	r25, r1
    1668:	61 f0       	breq	.+24     	; 0x1682 <DIO_ErrStateSetPinValue+0x6a>
    166a:	5b c0       	rjmp	.+182    	; 0x1722 <DIO_ErrStateSetPinValue+0x10a>
    166c:	2f 81       	ldd	r18, Y+7	; 0x07
    166e:	38 85       	ldd	r19, Y+8	; 0x08
    1670:	23 34       	cpi	r18, 0x43	; 67
    1672:	31 05       	cpc	r19, r1
    1674:	71 f1       	breq	.+92     	; 0x16d2 <DIO_ErrStateSetPinValue+0xba>
    1676:	8f 81       	ldd	r24, Y+7	; 0x07
    1678:	98 85       	ldd	r25, Y+8	; 0x08
    167a:	84 34       	cpi	r24, 0x44	; 68
    167c:	91 05       	cpc	r25, r1
    167e:	e9 f1       	breq	.+122    	; 0x16fa <DIO_ErrStateSetPinValue+0xe2>
    1680:	50 c0       	rjmp	.+160    	; 0x1722 <DIO_ErrStateSetPinValue+0x10a>
					{
					case 'A': SET_BIT(PORTA_ITI,pin); break;
    1682:	ab e3       	ldi	r26, 0x3B	; 59
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	eb e3       	ldi	r30, 0x3B	; 59
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_ErrStateSetPinValue+0x88>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_ErrStateSetPinValue+0x84>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	be c0       	rjmp	.+380    	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': SET_BIT(PORTB_ITI,pin); break;
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_ErrStateSetPinValue+0xb0>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_ErrStateSetPinValue+0xac>
    16cc:	84 2b       	or	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	aa c0       	rjmp	.+340    	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': SET_BIT(PORTC_ITI,pin); break;
    16d2:	a5 e3       	ldi	r26, 0x35	; 53
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e3       	ldi	r30, 0x35	; 53
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	48 2f       	mov	r20, r24
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 2e       	mov	r0, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_ErrStateSetPinValue+0xd8>
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_ErrStateSetPinValue+0xd4>
    16f4:	84 2b       	or	r24, r20
    16f6:	8c 93       	st	X, r24
    16f8:	96 c0       	rjmp	.+300    	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': SET_BIT(PORTD_ITI,pin); break;
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_ErrStateSetPinValue+0x100>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_ErrStateSetPinValue+0xfc>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	82 c0       	rjmp	.+260    	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	83 c0       	rjmp	.+262    	; 0x182e <DIO_ErrStateSetPinValue+0x216>
					}
				}
				else if(val == DIO_LOW)
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 23       	and	r24, r24
    172c:	09 f0       	breq	.+2      	; 0x1730 <DIO_ErrStateSetPinValue+0x118>
    172e:	78 c0       	rjmp	.+240    	; 0x1820 <DIO_ErrStateSetPinValue+0x208>
				{
					switch(port)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3d 83       	std	Y+5, r19	; 0x05
    1738:	2c 83       	std	Y+4, r18	; 0x04
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	82 34       	cpi	r24, 0x42	; 66
    1740:	91 05       	cpc	r25, r1
    1742:	61 f1       	breq	.+88     	; 0x179c <DIO_ErrStateSetPinValue+0x184>
    1744:	2c 81       	ldd	r18, Y+4	; 0x04
    1746:	3d 81       	ldd	r19, Y+5	; 0x05
    1748:	23 34       	cpi	r18, 0x43	; 67
    174a:	31 05       	cpc	r19, r1
    174c:	34 f4       	brge	.+12     	; 0x175a <DIO_ErrStateSetPinValue+0x142>
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	81 34       	cpi	r24, 0x41	; 65
    1754:	91 05       	cpc	r25, r1
    1756:	69 f0       	breq	.+26     	; 0x1772 <DIO_ErrStateSetPinValue+0x15a>
    1758:	60 c0       	rjmp	.+192    	; 0x181a <DIO_ErrStateSetPinValue+0x202>
    175a:	2c 81       	ldd	r18, Y+4	; 0x04
    175c:	3d 81       	ldd	r19, Y+5	; 0x05
    175e:	23 34       	cpi	r18, 0x43	; 67
    1760:	31 05       	cpc	r19, r1
    1762:	89 f1       	breq	.+98     	; 0x17c6 <DIO_ErrStateSetPinValue+0x1ae>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	84 34       	cpi	r24, 0x44	; 68
    176a:	91 05       	cpc	r25, r1
    176c:	09 f4       	brne	.+2      	; 0x1770 <DIO_ErrStateSetPinValue+0x158>
    176e:	40 c0       	rjmp	.+128    	; 0x17f0 <DIO_ErrStateSetPinValue+0x1d8>
    1770:	54 c0       	rjmp	.+168    	; 0x181a <DIO_ErrStateSetPinValue+0x202>
					{
					case 'A': CLEAR_BIT(PORTA_ITI,pin); break;
    1772:	ab e3       	ldi	r26, 0x3B	; 59
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	eb e3       	ldi	r30, 0x3B	; 59
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_ErrStateSetPinValue+0x178>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_ErrStateSetPinValue+0x174>
    1794:	80 95       	com	r24
    1796:	84 23       	and	r24, r20
    1798:	8c 93       	st	X, r24
    179a:	45 c0       	rjmp	.+138    	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					case 'B': CLEAR_BIT(PORTB_ITI,pin); break;
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_ErrStateSetPinValue+0x1a2>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_ErrStateSetPinValue+0x19e>
    17be:	80 95       	com	r24
    17c0:	84 23       	and	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	30 c0       	rjmp	.+96     	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					case 'C': CLEAR_BIT(PORTC_ITI,pin); break;
    17c6:	a5 e3       	ldi	r26, 0x35	; 53
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_ErrStateSetPinValue+0x1cc>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_ErrStateSetPinValue+0x1c8>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	1b c0       	rjmp	.+54     	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					case 'D': CLEAR_BIT(PORTD_ITI,pin); break;
    17f0:	a2 e3       	ldi	r26, 0x32	; 50
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e2 e3       	ldi	r30, 0x32	; 50
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_ErrStateSetPinValue+0x1f6>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <DIO_ErrStateSetPinValue+0x1f2>
    1812:	80 95       	com	r24
    1814:	84 23       	and	r24, r20
    1816:	8c 93       	st	X, r24
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <DIO_ErrStateSetPinValue+0x20e>
					default: return DIO_ERROR_PORT;					}
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	07 c0       	rjmp	.+14     	; 0x182e <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
    1820:	24 e0       	ldi	r18, 0x04	; 4
    1822:	2e 83       	std	Y+6, r18	; 0x06
    1824:	04 c0       	rjmp	.+8      	; 0x182e <DIO_ErrStateSetPinValue+0x216>
			}
		else
			return DIO_ERROR_PIN;
		return DIO_OK;
    1826:	1e 82       	std	Y+6, r1	; 0x06
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_ErrStateSetPinValue+0x216>
				}
				else
					return DIO_ERROR_VALUE;
			}
		else
			return DIO_ERROR_PIN;
    182a:	32 e0       	ldi	r19, 0x02	; 2
    182c:	3e 83       	std	Y+6, r19	; 0x06
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
		return DIO_OK;
}
    1830:	28 96       	adiw	r28, 0x08	; 8
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <DIO_ErrStateReadPinValue>:
DIO_Err DIO_ErrStateReadPinValue(PORT_Name port,PIN_Number pin,u8 *value){
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	27 97       	sbiw	r28, 0x07	; 7
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	6a 83       	std	Y+2, r22	; 0x02
    185a:	5c 83       	std	Y+4, r21	; 0x04
    185c:	4b 83       	std	Y+3, r20	; 0x03
	if(pin>=0 && pin<=7)
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 30       	cpi	r24, 0x08	; 8
    1862:	08 f0       	brcs	.+2      	; 0x1866 <DIO_ErrStateReadPinValue+0x24>
    1864:	76 c0       	rjmp	.+236    	; 0x1952 <DIO_ErrStateReadPinValue+0x110>
				{
						switch(port)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3f 83       	std	Y+7, r19	; 0x07
    186e:	2e 83       	std	Y+6, r18	; 0x06
    1870:	4e 81       	ldd	r20, Y+6	; 0x06
    1872:	5f 81       	ldd	r21, Y+7	; 0x07
    1874:	42 34       	cpi	r20, 0x42	; 66
    1876:	51 05       	cpc	r21, r1
    1878:	59 f1       	breq	.+86     	; 0x18d0 <DIO_ErrStateReadPinValue+0x8e>
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	9f 81       	ldd	r25, Y+7	; 0x07
    187e:	83 34       	cpi	r24, 0x43	; 67
    1880:	91 05       	cpc	r25, r1
    1882:	34 f4       	brge	.+12     	; 0x1890 <DIO_ErrStateReadPinValue+0x4e>
    1884:	2e 81       	ldd	r18, Y+6	; 0x06
    1886:	3f 81       	ldd	r19, Y+7	; 0x07
    1888:	21 34       	cpi	r18, 0x41	; 65
    188a:	31 05       	cpc	r19, r1
    188c:	69 f0       	breq	.+26     	; 0x18a8 <DIO_ErrStateReadPinValue+0x66>
    188e:	5c c0       	rjmp	.+184    	; 0x1948 <DIO_ErrStateReadPinValue+0x106>
    1890:	4e 81       	ldd	r20, Y+6	; 0x06
    1892:	5f 81       	ldd	r21, Y+7	; 0x07
    1894:	43 34       	cpi	r20, 0x43	; 67
    1896:	51 05       	cpc	r21, r1
    1898:	79 f1       	breq	.+94     	; 0x18f8 <DIO_ErrStateReadPinValue+0xb6>
    189a:	8e 81       	ldd	r24, Y+6	; 0x06
    189c:	9f 81       	ldd	r25, Y+7	; 0x07
    189e:	84 34       	cpi	r24, 0x44	; 68
    18a0:	91 05       	cpc	r25, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <DIO_ErrStateReadPinValue+0x64>
    18a4:	3d c0       	rjmp	.+122    	; 0x1920 <DIO_ErrStateReadPinValue+0xde>
    18a6:	50 c0       	rjmp	.+160    	; 0x1948 <DIO_ErrStateReadPinValue+0x106>
						{
						case 'A':*value= GET_BIT(PINA_ITI,pin); break;
    18a8:	e9 e3       	ldi	r30, 0x39	; 57
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a9 01       	movw	r20, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <DIO_ErrStateReadPinValue+0x7e>
    18bc:	55 95       	asr	r21
    18be:	47 95       	ror	r20
    18c0:	8a 95       	dec	r24
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <DIO_ErrStateReadPinValue+0x7a>
    18c4:	ca 01       	movw	r24, r20
    18c6:	81 70       	andi	r24, 0x01	; 1
    18c8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ca:	fc 81       	ldd	r31, Y+4	; 0x04
    18cc:	80 83       	st	Z, r24
    18ce:	3f c0       	rjmp	.+126    	; 0x194e <DIO_ErrStateReadPinValue+0x10c>
						case 'B':*value= GET_BIT(PINB_ITI,pin); break;
    18d0:	e6 e3       	ldi	r30, 0x36	; 54
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_ErrStateReadPinValue+0xa6>
    18e4:	55 95       	asr	r21
    18e6:	47 95       	ror	r20
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_ErrStateReadPinValue+0xa2>
    18ec:	ca 01       	movw	r24, r20
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	eb 81       	ldd	r30, Y+3	; 0x03
    18f2:	fc 81       	ldd	r31, Y+4	; 0x04
    18f4:	80 83       	st	Z, r24
    18f6:	2b c0       	rjmp	.+86     	; 0x194e <DIO_ErrStateReadPinValue+0x10c>
						case 'C':*value= GET_BIT(PINC_ITI,pin); break;
    18f8:	e3 e3       	ldi	r30, 0x33	; 51
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_ErrStateReadPinValue+0xce>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_ErrStateReadPinValue+0xca>
    1914:	ca 01       	movw	r24, r20
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	eb 81       	ldd	r30, Y+3	; 0x03
    191a:	fc 81       	ldd	r31, Y+4	; 0x04
    191c:	80 83       	st	Z, r24
    191e:	17 c0       	rjmp	.+46     	; 0x194e <DIO_ErrStateReadPinValue+0x10c>
						case 'D':*value= GET_BIT(PIND_ITI,pin); break;
    1920:	e0 e3       	ldi	r30, 0x30	; 48
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 01       	movw	r20, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_ErrStateReadPinValue+0xf6>
    1934:	55 95       	asr	r21
    1936:	47 95       	ror	r20
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_ErrStateReadPinValue+0xf2>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	eb 81       	ldd	r30, Y+3	; 0x03
    1942:	fc 81       	ldd	r31, Y+4	; 0x04
    1944:	80 83       	st	Z, r24
    1946:	03 c0       	rjmp	.+6      	; 0x194e <DIO_ErrStateReadPinValue+0x10c>
						default: return DIO_ERROR_PORT;
    1948:	51 e0       	ldi	r21, 0x01	; 1
    194a:	5d 83       	std	Y+5, r21	; 0x05
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <DIO_ErrStateReadPinValue+0x114>
						}

				}
			else
				return DIO_ERROR_PIN;
			return DIO_OK;
    194e:	1d 82       	std	Y+5, r1	; 0x05
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_ErrStateReadPinValue+0x114>
						default: return DIO_ERROR_PORT;
						}

				}
			else
				return DIO_ERROR_PIN;
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
			return DIO_OK;
}
    1958:	27 96       	adiw	r28, 0x07	; 7
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <DIO_ErrStateSetGroupDirection>:

DIO_Err  DIO_ErrStateSetGroupDirection(PORT_Name port ,Direction direction)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <DIO_ErrStateSetGroupDirection+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <DIO_ErrStateSetGroupDirection+0x8>
    1972:	0f 92       	push	r0
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	6a 83       	std	Y+2, r22	; 0x02
	if (direction <= 0xff && direction>=0x00)
	{
		switch(port)
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3d 83       	std	Y+5, r19	; 0x05
    1984:	2c 83       	std	Y+4, r18	; 0x04
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	9d 81       	ldd	r25, Y+5	; 0x05
    198a:	82 34       	cpi	r24, 0x42	; 66
    198c:	91 05       	cpc	r25, r1
    198e:	d9 f0       	breq	.+54     	; 0x19c6 <DIO_ErrStateSetGroupDirection+0x5c>
    1990:	2c 81       	ldd	r18, Y+4	; 0x04
    1992:	3d 81       	ldd	r19, Y+5	; 0x05
    1994:	23 34       	cpi	r18, 0x43	; 67
    1996:	31 05       	cpc	r19, r1
    1998:	34 f4       	brge	.+12     	; 0x19a6 <DIO_ErrStateSetGroupDirection+0x3c>
    199a:	8c 81       	ldd	r24, Y+4	; 0x04
    199c:	9d 81       	ldd	r25, Y+5	; 0x05
    199e:	81 34       	cpi	r24, 0x41	; 65
    19a0:	91 05       	cpc	r25, r1
    19a2:	61 f0       	breq	.+24     	; 0x19bc <DIO_ErrStateSetGroupDirection+0x52>
    19a4:	1f c0       	rjmp	.+62     	; 0x19e4 <DIO_ErrStateSetGroupDirection+0x7a>
    19a6:	2c 81       	ldd	r18, Y+4	; 0x04
    19a8:	3d 81       	ldd	r19, Y+5	; 0x05
    19aa:	23 34       	cpi	r18, 0x43	; 67
    19ac:	31 05       	cpc	r19, r1
    19ae:	81 f0       	breq	.+32     	; 0x19d0 <DIO_ErrStateSetGroupDirection+0x66>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	84 34       	cpi	r24, 0x44	; 68
    19b6:	91 05       	cpc	r25, r1
    19b8:	81 f0       	breq	.+32     	; 0x19da <DIO_ErrStateSetGroupDirection+0x70>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <DIO_ErrStateSetGroupDirection+0x7a>
		{
		case 'A': DDRA_ITI =   direction ;break ;
    19bc:	ea e3       	ldi	r30, 0x3A	; 58
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	80 83       	st	Z, r24
    19c4:	12 c0       	rjmp	.+36     	; 0x19ea <DIO_ErrStateSetGroupDirection+0x80>
		case 'B': DDRB_ITI =   direction ;break ;
    19c6:	e7 e3       	ldi	r30, 0x37	; 55
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	80 83       	st	Z, r24
    19ce:	0d c0       	rjmp	.+26     	; 0x19ea <DIO_ErrStateSetGroupDirection+0x80>
		case 'C': DDRC_ITI =   direction ;break ;
    19d0:	e4 e3       	ldi	r30, 0x34	; 52
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	80 83       	st	Z, r24
    19d8:	08 c0       	rjmp	.+16     	; 0x19ea <DIO_ErrStateSetGroupDirection+0x80>
		case 'D': DDRD_ITI =   direction ;break ;
    19da:	e1 e3       	ldi	r30, 0x31	; 49
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	80 83       	st	Z, r24
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <DIO_ErrStateSetGroupDirection+0x80>
		default :
			return DIO_ERROR_PORT ;
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	9b 83       	std	Y+3, r25	; 0x03
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <DIO_ErrStateSetGroupDirection+0x82>
		}
		return DIO_OK ;
    19ea:	1b 82       	std	Y+3, r1	; 0x03
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	else
	{
		return DIO_ERROR_Direction;
	}
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <DIO_ErrStateSetPortValue>:
DIO_Err  DIO_ErrStateSetPortValue(PORT_Name port,Volt val)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <DIO_ErrStateSetPortValue+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <DIO_ErrStateSetPortValue+0x8>
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	6a 83       	std	Y+2, r22	; 0x02
	if (val <= 0xff && val>=0x00)
	{
		switch(port)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3d 83       	std	Y+5, r19	; 0x05
    1a18:	2c 83       	std	Y+4, r18	; 0x04
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1e:	82 34       	cpi	r24, 0x42	; 66
    1a20:	91 05       	cpc	r25, r1
    1a22:	d9 f0       	breq	.+54     	; 0x1a5a <DIO_ErrStateSetPortValue+0x5c>
    1a24:	2c 81       	ldd	r18, Y+4	; 0x04
    1a26:	3d 81       	ldd	r19, Y+5	; 0x05
    1a28:	23 34       	cpi	r18, 0x43	; 67
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	34 f4       	brge	.+12     	; 0x1a3a <DIO_ErrStateSetPortValue+0x3c>
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	9d 81       	ldd	r25, Y+5	; 0x05
    1a32:	81 34       	cpi	r24, 0x41	; 65
    1a34:	91 05       	cpc	r25, r1
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <DIO_ErrStateSetPortValue+0x52>
    1a38:	1f c0       	rjmp	.+62     	; 0x1a78 <DIO_ErrStateSetPortValue+0x7a>
    1a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3e:	23 34       	cpi	r18, 0x43	; 67
    1a40:	31 05       	cpc	r19, r1
    1a42:	81 f0       	breq	.+32     	; 0x1a64 <DIO_ErrStateSetPortValue+0x66>
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	84 34       	cpi	r24, 0x44	; 68
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	81 f0       	breq	.+32     	; 0x1a6e <DIO_ErrStateSetPortValue+0x70>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <DIO_ErrStateSetPortValue+0x7a>
		{
		case 'A':  PORTA_ITI =  val ;break ;
    1a50:	eb e3       	ldi	r30, 0x3B	; 59
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	80 83       	st	Z, r24
    1a58:	12 c0       	rjmp	.+36     	; 0x1a7e <DIO_ErrStateSetPortValue+0x80>
		case 'B':  PORTB_ITI =  val ;break ;
    1a5a:	e8 e3       	ldi	r30, 0x38	; 56
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	80 83       	st	Z, r24
    1a62:	0d c0       	rjmp	.+26     	; 0x1a7e <DIO_ErrStateSetPortValue+0x80>
		case 'C':  PORTC_ITI =  val ;break ;
    1a64:	e5 e3       	ldi	r30, 0x35	; 53
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	80 83       	st	Z, r24
    1a6c:	08 c0       	rjmp	.+16     	; 0x1a7e <DIO_ErrStateSetPortValue+0x80>
		case 'D':  PORTD_ITI =  val ;break ;
    1a6e:	e2 e3       	ldi	r30, 0x32	; 50
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	80 83       	st	Z, r24
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <DIO_ErrStateSetPortValue+0x80>
		default :
			return DIO_ERROR_PORT ;
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	9b 83       	std	Y+3, r25	; 0x03
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <DIO_ErrStateSetPortValue+0x82>
		}
		return DIO_OK ;
    1a7e:	1b 82       	std	Y+3, r1	; 0x03
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
	else
	{
		return DIO_ERROR_VALUE;
	}

}
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <DIO_ErrStateReadGroupValue>:
DIO_Err  DIO_ErrStateReadGroupValue(PORT_Name port ,u8 *value)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <DIO_ErrStateReadGroupValue+0x6>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <DIO_ErrStateReadGroupValue+0x8>
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <DIO_ErrStateReadGroupValue+0xa>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	7b 83       	std	Y+3, r23	; 0x03
    1aa4:	6a 83       	std	Y+2, r22	; 0x02
	if(value!=Null)
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <DIO_ErrStateReadGroupValue+0x1e>
    1aae:	41 c0       	rjmp	.+130    	; 0x1b32 <DIO_ErrStateReadGroupValue+0xa0>
	{
		switch(port)
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3e 83       	std	Y+6, r19	; 0x06
    1ab8:	2d 83       	std	Y+5, r18	; 0x05
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	82 34       	cpi	r24, 0x42	; 66
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	e9 f0       	breq	.+58     	; 0x1afe <DIO_ErrStateReadGroupValue+0x6c>
    1ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ac8:	23 34       	cpi	r18, 0x43	; 67
    1aca:	31 05       	cpc	r19, r1
    1acc:	34 f4       	brge	.+12     	; 0x1ada <DIO_ErrStateReadGroupValue+0x48>
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	81 34       	cpi	r24, 0x41	; 65
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	61 f0       	breq	.+24     	; 0x1af0 <DIO_ErrStateReadGroupValue+0x5e>
    1ad8:	27 c0       	rjmp	.+78     	; 0x1b28 <DIO_ErrStateReadGroupValue+0x96>
    1ada:	2d 81       	ldd	r18, Y+5	; 0x05
    1adc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ade:	23 34       	cpi	r18, 0x43	; 67
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	a1 f0       	breq	.+40     	; 0x1b0c <DIO_ErrStateReadGroupValue+0x7a>
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	84 34       	cpi	r24, 0x44	; 68
    1aea:	91 05       	cpc	r25, r1
    1aec:	b1 f0       	breq	.+44     	; 0x1b1a <DIO_ErrStateReadGroupValue+0x88>
    1aee:	1c c0       	rjmp	.+56     	; 0x1b28 <DIO_ErrStateReadGroupValue+0x96>
		{
		case 'A':  *value = PINA_ITI ; break ;
    1af0:	e9 e3       	ldi	r30, 0x39	; 57
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	ea 81       	ldd	r30, Y+2	; 0x02
    1af8:	fb 81       	ldd	r31, Y+3	; 0x03
    1afa:	80 83       	st	Z, r24
    1afc:	18 c0       	rjmp	.+48     	; 0x1b2e <DIO_ErrStateReadGroupValue+0x9c>
		case 'B':  *value = PINB_ITI ; break ;
    1afe:	e6 e3       	ldi	r30, 0x36	; 54
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	ea 81       	ldd	r30, Y+2	; 0x02
    1b06:	fb 81       	ldd	r31, Y+3	; 0x03
    1b08:	80 83       	st	Z, r24
    1b0a:	11 c0       	rjmp	.+34     	; 0x1b2e <DIO_ErrStateReadGroupValue+0x9c>
		case 'C':  *value = PINC_ITI ; break ;
    1b0c:	e3 e3       	ldi	r30, 0x33	; 51
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	ea 81       	ldd	r30, Y+2	; 0x02
    1b14:	fb 81       	ldd	r31, Y+3	; 0x03
    1b16:	80 83       	st	Z, r24
    1b18:	0a c0       	rjmp	.+20     	; 0x1b2e <DIO_ErrStateReadGroupValue+0x9c>
		case 'D':  *value = PIND_ITI ; break ;
    1b1a:	e0 e3       	ldi	r30, 0x30	; 48
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	ea 81       	ldd	r30, Y+2	; 0x02
    1b22:	fb 81       	ldd	r31, Y+3	; 0x03
    1b24:	80 83       	st	Z, r24
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <DIO_ErrStateReadGroupValue+0x9c>
		default :
			return DIO_ERROR_PORT ;
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <DIO_ErrStateReadGroupValue+0xa4>
		}
		return DIO_OK ;
    1b2e:	1c 82       	std	Y+4, r1	; 0x04
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_ErrStateReadGroupValue+0xa4>
	}
	else
	{
		return AddressError;
    1b32:	25 e0       	ldi	r18, 0x05	; 5
    1b34:	2c 83       	std	Y+4, r18	; 0x04
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1b38:	26 96       	adiw	r28, 0x06	; 6
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <UART_VoidInit>:
 *      Author: Mazen
 */

#include "UART_Interface.h"

void UART_VoidInit(void){
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	/* Set Baud Rate */
	UBRRL_Reg=51;
    1b54:	e9 e2       	ldi	r30, 0x29	; 41
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	83 e3       	ldi	r24, 0x33	; 51
    1b5a:	80 83       	st	Z, r24
	u8 UCSRC_VAR;
	/* Selecting UCSRC Register */
	SET_BIT(UCSRC_VAR,URSEL);
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	80 68       	ori	r24, 0x80	; 128
    1b60:	89 83       	std	Y+1, r24	; 0x01
	/*  No Interrupt on Receive */
	CLEAR_BIT(UCSRB_Reg,RXCIE);
    1b62:	aa e2       	ldi	r26, 0x2A	; 42
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ea e2       	ldi	r30, 0x2A	; 42
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8f 77       	andi	r24, 0x7F	; 127
    1b6e:	8c 93       	st	X, r24
	/*  No Interrupt on Transmit */
	CLEAR_BIT(UCSRB_Reg,TXCIE);
    1b70:	aa e2       	ldi	r26, 0x2A	; 42
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ea e2       	ldi	r30, 0x2A	; 42
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	8f 7b       	andi	r24, 0xBF	; 191
    1b7c:	8c 93       	st	X, r24
	/* Enable Asynchronous */
	CLEAR_BIT(UCSRC_VAR,UMSEL);
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	8f 7b       	andi	r24, 0xBF	; 191
    1b82:	89 83       	std	Y+1, r24	; 0x01
	/* Parity Mode */
	CLEAR_BIT(UCSRC_VAR,UPM0);
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	8f 7e       	andi	r24, 0xEF	; 239
    1b88:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(UCSRC_VAR,UPM1);
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8f 7d       	andi	r24, 0xDF	; 223
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	/* 1 Stop Bit */
	CLEAR_BIT(UCSRC_VAR,USBS);
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	87 7f       	andi	r24, 0xF7	; 247
    1b94:	89 83       	std	Y+1, r24	; 0x01
	/* Data Bits */
	SET_BIT(UCSRC_VAR,UCSZ0);
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	82 60       	ori	r24, 0x02	; 2
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_VAR,UCSZ1);
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	84 60       	ori	r24, 0x04	; 4
    1ba0:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(UCSRC_VAR,UCSZ2);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	8b 7f       	andi	r24, 0xFB	; 251
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Value in Register */
	UCSRC_Reg=UCSRC_VAR;
    1ba8:	e0 e4       	ldi	r30, 0x40	; 64
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	80 83       	st	Z, r24
	/* Enable Transmit */
	SET_BIT(UCSRB_Reg,TXEN);
    1bb0:	aa e2       	ldi	r26, 0x2A	; 42
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ea e2       	ldi	r30, 0x2A	; 42
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	88 60       	ori	r24, 0x08	; 8
    1bbc:	8c 93       	st	X, r24
	/* Enable Receive */
	SET_BIT(UCSRB_Reg,RXEN);
    1bbe:	aa e2       	ldi	r26, 0x2A	; 42
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ea e2       	ldi	r30, 0x2A	; 42
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	80 61       	ori	r24, 0x10	; 16
    1bca:	8c 93       	st	X, r24
}
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <UART_VoidSend>:
void UART_VoidSend(u16 Data){
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <UART_VoidSend+0x6>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9a 83       	std	Y+2, r25	; 0x02
    1be0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until transmit finish */
	while(GET_BIT(UCSRA_Reg,UDRE)==0);
    1be2:	eb e2       	ldi	r30, 0x2B	; 43
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	82 95       	swap	r24
    1bea:	86 95       	lsr	r24
    1bec:	87 70       	andi	r24, 0x07	; 7
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	81 70       	andi	r24, 0x01	; 1
    1bf4:	90 70       	andi	r25, 0x00	; 0
    1bf6:	00 97       	sbiw	r24, 0x00	; 0
    1bf8:	a1 f3       	breq	.-24     	; 0x1be2 <UART_VoidSend+0xe>
	UDR_Reg=Data;
    1bfa:	ec e2       	ldi	r30, 0x2C	; 44
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	80 83       	st	Z, r24

}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <UART_u8Receive>:
u8 UART_u8Receive(void){
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA_Reg,RXC)==0);
    1c14:	eb e2       	ldi	r30, 0x2B	; 43
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	88 23       	and	r24, r24
    1c1c:	dc f7       	brge	.-10     	; 0x1c14 <UART_u8Receive+0x8>
	return UDR_Reg;
    1c1e:	ec e2       	ldi	r30, 0x2C	; 44
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <SPI_voidInitSPIMaster>:
 *  Created on: Apr 8, 2023
 *      Author: Mazen
 */

#include "SPI_Interface.h"
void SPI_voidInitSPIMaster(void){
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	/* Master Initialization */
	SET_BIT(SPCR_Reg,SPCR_MSTR);
    1c32:	ad e2       	ldi	r26, 0x2D	; 45
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ed e2       	ldi	r30, 0x2D	; 45
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 61       	ori	r24, 0x10	; 16
    1c3e:	8c 93       	st	X, r24
	/* Set data mode */
	SET_MODE;
    1c40:	ad e2       	ldi	r26, 0x2D	; 45
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ed e2       	ldi	r30, 0x2D	; 45
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	87 7f       	andi	r24, 0xF7	; 247
    1c4c:	8c 93       	st	X, r24
    1c4e:	ad e2       	ldi	r26, 0x2D	; 45
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	ed e2       	ldi	r30, 0x2D	; 45
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8b 7f       	andi	r24, 0xFB	; 251
    1c5a:	8c 93       	st	X, r24
	/* Clock Prescale 16 */
	SET_BIT(SPCR_Reg,SPCR_SPR0);
    1c5c:	ad e2       	ldi	r26, 0x2D	; 45
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	ed e2       	ldi	r30, 0x2D	; 45
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	81 60       	ori	r24, 0x01	; 1
    1c68:	8c 93       	st	X, r24
	CLEAR_BIT(SPCR_Reg,SPCR_SPR1);
    1c6a:	ad e2       	ldi	r26, 0x2D	; 45
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	ed e2       	ldi	r30, 0x2D	; 45
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8d 7f       	andi	r24, 0xFD	; 253
    1c76:	8c 93       	st	X, r24
	CLEAR_BIT(SPSR_Reg,SPSR_SPI2X);
    1c78:	ae e2       	ldi	r26, 0x2E	; 46
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	ee e2       	ldi	r30, 0x2E	; 46
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8e 7f       	andi	r24, 0xFE	; 254
    1c84:	8c 93       	st	X, r24
	/* SPI Enable */
	SET_BIT(SPCR_Reg,SPCR_SPE);
    1c86:	ad e2       	ldi	r26, 0x2D	; 45
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	ed e2       	ldi	r30, 0x2D	; 45
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 64       	ori	r24, 0x40	; 64
    1c92:	8c 93       	st	X, r24
	/* Data order MSB */
	CLEAR_BIT(SPCR_Reg,SPCR_DORD);
    1c94:	ad e2       	ldi	r26, 0x2D	; 45
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	ed e2       	ldi	r30, 0x2D	; 45
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ca0:	8c 93       	st	X, r24


}
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <SPI_voidSPISlaveInit>:
void SPI_voidSPISlaveInit(void){
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
	/* Slave Initialization */
	CLEAR_BIT(SPCR_Reg,SPCR_MSTR);
    1cb0:	ad e2       	ldi	r26, 0x2D	; 45
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ed e2       	ldi	r30, 0x2D	; 45
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 7e       	andi	r24, 0xEF	; 239
    1cbc:	8c 93       	st	X, r24
	/* SPI Enable */
	SET_BIT(SPCR_Reg,SPCR_SPE);
    1cbe:	ad e2       	ldi	r26, 0x2D	; 45
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ed e2       	ldi	r30, 0x2D	; 45
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	80 64       	ori	r24, 0x40	; 64
    1cca:	8c 93       	st	X, r24
	/* Data order MSB */
	CLEAR_BIT(SPCR_Reg,SPCR_DORD);
    1ccc:	ad e2       	ldi	r26, 0x2D	; 45
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	ed e2       	ldi	r30, 0x2D	; 45
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8f 7d       	andi	r24, 0xDF	; 223
    1cd8:	8c 93       	st	X, r24

}
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <SPI_u8Receive>:
u8 SPI_u8Receive(u8 Copy_u8data){
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	0f 92       	push	r0
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	89 83       	std	Y+1, r24	; 0x01
	SPDR_Reg=Copy_u8data;
    1cec:	ef e2       	ldi	r30, 0x2F	; 47
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	80 83       	st	Z, r24
	while(GET_BIT(SPSR_Reg,SPSR_SPIF)==0);
    1cf4:	ee e2       	ldi	r30, 0x2E	; 46
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 23       	and	r24, r24
    1cfc:	dc f7       	brge	.-10     	; 0x1cf4 <SPI_u8Receive+0x14>
	return SPDR_Reg;
    1cfe:	ef e2       	ldi	r30, 0x2F	; 47
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
}
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <ADC_ErrStateInit>:

#include "ADC_Interface.h"
static u16 * ADC_pu8Readibg = Null;
static void (*ADC_pvCallBackNotifFunc)(void)=Null;
static u8 ADC_State=ADC_IDLE;
ADC_ErrState ADC_ErrStateInit(void){
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62

	//AVCC With External Cap
	CLEAR_BIT(ADMUX_Reg,REFS0);
    1d14:	a7 e2       	ldi	r26, 0x27	; 39
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e7 e2       	ldi	r30, 0x27	; 39
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8f 7b       	andi	r24, 0xBF	; 191
    1d20:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX_Reg,REFS1);
    1d22:	a7 e2       	ldi	r26, 0x27	; 39
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e2       	ldi	r30, 0x27	; 39
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	8f 77       	andi	r24, 0x7F	; 127
    1d2e:	8c 93       	st	X, r24

	//Left Adjust
	SET_BIT(ADMUX_Reg,ADLAR);
    1d30:	a7 e2       	ldi	r26, 0x27	; 39
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e7 e2       	ldi	r30, 0x27	; 39
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 62       	ori	r24, 0x20	; 32
    1d3c:	8c 93       	st	X, r24

	ADCSRA_Reg&=ADC_PRESC_MASK;
    1d3e:	a6 e2       	ldi	r26, 0x26	; 38
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e6 e2       	ldi	r30, 0x26	; 38
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	88 7f       	andi	r24, 0xF8	; 248
    1d4a:	8c 93       	st	X, r24
	//Setting Prescale in Config file
	ADCSRA_Reg|=PRESC;
    1d4c:	a6 e2       	ldi	r26, 0x26	; 38
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e6 e2       	ldi	r30, 0x26	; 38
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	82 60       	ori	r24, 0x02	; 2
    1d58:	8c 93       	st	X, r24
	//Enable
	SET_BIT(ADCSRA_Reg,ADEN);
    1d5a:	a6 e2       	ldi	r26, 0x26	; 38
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	e6 e2       	ldi	r30, 0x26	; 38
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	80 68       	ori	r24, 0x80	; 128
    1d66:	8c 93       	st	X, r24
	return ADC_Init_Ok;
    1d68:	80 e0       	ldi	r24, 0x00	; 0
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <ADC_ErrStateConversionSynch>:
ADC_ErrState ADC_ErrStateConversionSynch(u8 PIN,u16 *Val){
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	28 97       	sbiw	r28, 0x08	; 8
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	8e 83       	std	Y+6, r24	; 0x06
    1d86:	78 87       	std	Y+8, r23	; 0x08
    1d88:	6f 83       	std	Y+7, r22	; 0x07
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    1d8a:	80 91 19 01 	lds	r24, 0x0119
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	09 f0       	breq	.+2      	; 0x1d94 <ADC_ErrStateConversionSynch+0x24>
    1d92:	5d c0       	rjmp	.+186    	; 0x1e4e <ADC_ErrStateConversionSynch+0xde>
		ADC_State=ADC_BUSY;
    1d94:	10 92 19 01 	sts	0x0119, r1
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
    1d98:	a7 e2       	ldi	r26, 0x27	; 39
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e7 e2       	ldi	r30, 0x27	; 39
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 7e       	andi	r24, 0xE0	; 224
    1da4:	8c 93       	st	X, r24
		ADMUX_Reg|=PIN;
    1da6:	a7 e2       	ldi	r26, 0x27	; 39
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e7 e2       	ldi	r30, 0x27	; 39
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	90 81       	ld	r25, Z
    1db0:	8e 81       	ldd	r24, Y+6	; 0x06
    1db2:	89 2b       	or	r24, r25
    1db4:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,ADSC);
    1db6:	a6 e2       	ldi	r26, 0x26	; 38
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e6 e2       	ldi	r30, 0x26	; 38
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 64       	ori	r24, 0x40	; 64
    1dc2:	8c 93       	st	X, r24
    1dc4:	0b c0       	rjmp	.+22     	; 0x1ddc <ADC_ErrStateConversionSynch+0x6c>
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
			ADC_Local_Counter++;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	ab 81       	ldd	r26, Y+3	; 0x03
    1dcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	a1 1d       	adc	r26, r1
    1dd2:	b1 1d       	adc	r27, r1
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	ab 83       	std	Y+3, r26	; 0x03
    1dda:	bc 83       	std	Y+4, r27	; 0x04
		ADC_State=ADC_BUSY;
		u32 ADC_Local_Counter;
		ADMUX_Reg&=0b11100000;
		ADMUX_Reg|=PIN;
		SET_BIT(ADCSRA_Reg,ADSC);
		while(((GET_BIT(ADCSRA_Reg,ADIF))==0)&&(ADC_Local_Counter!=ADC_u32Timeout)){
    1ddc:	e6 e2       	ldi	r30, 0x26	; 38
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	82 95       	swap	r24
    1de4:	8f 70       	andi	r24, 0x0F	; 15
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	90 70       	andi	r25, 0x00	; 0
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f4       	brne	.+24     	; 0x1e0a <ADC_ErrStateConversionSynch+0x9a>
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	9a 81       	ldd	r25, Y+2	; 0x02
    1df6:	ab 81       	ldd	r26, Y+3	; 0x03
    1df8:	bc 81       	ldd	r27, Y+4	; 0x04
    1dfa:	88 38       	cpi	r24, 0x88	; 136
    1dfc:	23 e1       	ldi	r18, 0x13	; 19
    1dfe:	92 07       	cpc	r25, r18
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	a2 07       	cpc	r26, r18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	b2 07       	cpc	r27, r18
    1e08:	f1 f6       	brne	.-68     	; 0x1dc6 <ADC_ErrStateConversionSynch+0x56>
			ADC_Local_Counter++;
		}
		if(ADC_Local_Counter==ADC_u32Timeout){
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e10:	bc 81       	ldd	r27, Y+4	; 0x04
    1e12:	88 38       	cpi	r24, 0x88	; 136
    1e14:	23 e1       	ldi	r18, 0x13	; 19
    1e16:	92 07       	cpc	r25, r18
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	a2 07       	cpc	r26, r18
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	b2 07       	cpc	r27, r18
    1e20:	19 f4       	brne	.+6      	; 0x1e28 <ADC_ErrStateConversionSynch+0xb8>
			Adc_ErrReturn= ADC_SynchError;
    1e22:	85 e0       	ldi	r24, 0x05	; 5
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	15 c0       	rjmp	.+42     	; 0x1e52 <ADC_ErrStateConversionSynch+0xe2>
		}
		else
		{

			SET_BIT(ADCSRA_Reg,ADIF);
    1e28:	a6 e2       	ldi	r26, 0x26	; 38
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e6 e2       	ldi	r30, 0x26	; 38
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 61       	ori	r24, 0x10	; 16
    1e34:	8c 93       	st	X, r24
			*Val=ADCH_Reg;
    1e36:	e5 e2       	ldi	r30, 0x25	; 37
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	ef 81       	ldd	r30, Y+7	; 0x07
    1e42:	f8 85       	ldd	r31, Y+8	; 0x08
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
			Adc_ErrReturn=ADC_Synch_Ok;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <ADC_ErrStateConversionSynch+0xe2>
		}
	}
	else{
		Adc_ErrReturn=ADC_Synch_Busy;
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	8d 83       	std	Y+5, r24	; 0x05
	}
	ADC_State=ADC_IDLE;
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	80 93 19 01 	sts	0x0119, r24
	return Adc_ErrReturn;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e5a:	28 96       	adiw	r28, 0x08	; 8
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <ADC_ErrStateConversionASynch>:
ADC_ErrState ADC_ErrStateConversionASynch(u8 PIN,u16 *Val,void (*ADC_pvNotifFunc)(void)){
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <ADC_ErrStateConversionASynch+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <ADC_ErrStateConversionASynch+0x8>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <ADC_ErrStateConversionASynch+0xa>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
    1e7c:	7c 83       	std	Y+4, r23	; 0x04
    1e7e:	6b 83       	std	Y+3, r22	; 0x03
    1e80:	5e 83       	std	Y+6, r21	; 0x06
    1e82:	4d 83       	std	Y+5, r20	; 0x05
	u8 Adc_ErrReturn;
	if(ADC_State==ADC_IDLE){
    1e84:	80 91 19 01 	lds	r24, 0x0119
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	c9 f5       	brne	.+114    	; 0x1efe <ADC_ErrStateConversionASynch+0x92>

		if(Val==Null || ADC_pvNotifFunc==Null){
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	21 f0       	breq	.+8      	; 0x1e9c <ADC_ErrStateConversionASynch+0x30>
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <ADC_ErrStateConversionASynch+0x36>
			Adc_ErrReturn=ADC_ASynchError;
    1e9c:	86 e0       	ldi	r24, 0x06	; 6
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	30 c0       	rjmp	.+96     	; 0x1f02 <ADC_ErrStateConversionASynch+0x96>
		}
		else
		{
			ADC_State=ADC_BUSY;
    1ea2:	10 92 19 01 	sts	0x0119, r1
			ADC_pu8Readibg=Val;
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	90 93 7a 01 	sts	0x017A, r25
    1eae:	80 93 79 01 	sts	0x0179, r24
			ADC_pvCallBackNotifFunc=ADC_pvNotifFunc;
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	90 93 7c 01 	sts	0x017C, r25
    1eba:	80 93 7b 01 	sts	0x017B, r24
			/* Clear MUX Register */
			ADMUX_Reg&=0b11100000;
    1ebe:	a7 e2       	ldi	r26, 0x27	; 39
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e7 e2       	ldi	r30, 0x27	; 39
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	80 7e       	andi	r24, 0xE0	; 224
    1eca:	8c 93       	st	X, r24
			/* Set the required channel into MUX bits */
			ADMUX_Reg|=PIN;
    1ecc:	a7 e2       	ldi	r26, 0x27	; 39
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e7 e2       	ldi	r30, 0x27	; 39
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	90 81       	ld	r25, Z
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	89 2b       	or	r24, r25
    1eda:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA_Reg,ADSC);
    1edc:	a6 e2       	ldi	r26, 0x26	; 38
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e6 e2       	ldi	r30, 0x26	; 38
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 64       	ori	r24, 0x40	; 64
    1ee8:	8c 93       	st	X, r24
			/* Enable ADC Interrupt */
			SET_BIT(ADCSRA_Reg,ADIE);
    1eea:	a6 e2       	ldi	r26, 0x26	; 38
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e6 e2       	ldi	r30, 0x26	; 38
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 60       	ori	r24, 0x08	; 8
    1ef6:	8c 93       	st	X, r24
			Adc_ErrReturn=ADC_ASynch_Ok;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <ADC_ErrStateConversionASynch+0x96>
		}
	}
	else{
		Adc_ErrReturn=ADC_ASynch_Busy;
    1efe:	84 e0       	ldi	r24, 0x04	; 4
    1f00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Adc_ErrReturn;
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f04:	26 96       	adiw	r28, 0x06	; 6
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <__vector_16>:
void __vector_16(void) __attribute__((signal));
void __vector_16(void){
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
	/* Read adc result */
	*ADC_pu8Readibg= ADCH_Reg;
    1f40:	a0 91 79 01 	lds	r26, 0x0179
    1f44:	b0 91 7a 01 	lds	r27, 0x017A
    1f48:	e5 e2       	ldi	r30, 0x25	; 37
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	8d 93       	st	X+, r24
    1f54:	9c 93       	st	X, r25
	/* Invoke Callback NotiFun */
	ADC_pvCallBackNotifFunc();
    1f56:	e0 91 7b 01 	lds	r30, 0x017B
    1f5a:	f0 91 7c 01 	lds	r31, 0x017C
    1f5e:	09 95       	icall
	/* Disable ADC Conversion */
	CLEAR_BIT(ADCSRA_Reg,ADIE);
    1f60:	a6 e2       	ldi	r26, 0x26	; 38
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 e2       	ldi	r30, 0x26	; 38
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	87 7f       	andi	r24, 0xF7	; 247
    1f6c:	8c 93       	st	X, r24
	ADC_State=ADC_IDLE;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	80 93 19 01 	sts	0x0119, r24
}
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	ff 91       	pop	r31
    1f7a:	ef 91       	pop	r30
    1f7c:	bf 91       	pop	r27
    1f7e:	af 91       	pop	r26
    1f80:	9f 91       	pop	r25
    1f82:	8f 91       	pop	r24
    1f84:	7f 91       	pop	r23
    1f86:	6f 91       	pop	r22
    1f88:	5f 91       	pop	r21
    1f8a:	4f 91       	pop	r20
    1f8c:	3f 91       	pop	r19
    1f8e:	2f 91       	pop	r18
    1f90:	0f 90       	pop	r0
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	0f 90       	pop	r0
    1f96:	1f 90       	pop	r1
    1f98:	18 95       	reti

00001f9a <EnableGlobalInterrupt>:
 *
 *  Created on: Apr 4, 2023
 *      Author: Mazen
 */
#include "Global_Interrupt_Enable.h"
void EnableGlobalInterrupt(void){
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	ENABLEINT0_SREG;
    1fa2:	af e5       	ldi	r26, 0x5F	; 95
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ef e5       	ldi	r30, 0x5F	; 95
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	8c 93       	st	X, r24
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <SW_SwitchErrStateGetState>:
 *  Created on: Mar 24, 2023
 *      Author: hisha
 */

#include "Switch_Interface.h"
SwitchErrState  SW_SwitchErrStateGetState(Switch_Info * Switch ,u8 * Result){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    1fbe:	27 97       	sbiw	r28, 0x07	; 7
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
    1fce:	7e 83       	std	Y+6, r23	; 0x06
    1fd0:	6d 83       	std	Y+5, r22	; 0x05
	u8 Switch_ErrDirectionReturn;
	u8 Switch_ErrValueReturn;
	if(Switch->ConnectionType==InternalPullUp){
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	82 81       	ldd	r24, Z+2	; 0x02
    1fd8:	88 23       	and	r24, r24
    1fda:	c9 f5       	brne	.+114    	; 0x204e <SW_SwitchErrStateGetState+0x98>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    1fdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1fde:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe0:	80 81       	ld	r24, Z
    1fe2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	69 2f       	mov	r22, r25
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
		if(Switch_ErrDirectionReturn==DIO_ERROR_PORT||Switch_ErrDirectionReturn==DIO_ERROR_Direction||Switch_ErrDirectionReturn==DIO_ERROR_PIN){
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	31 f0       	breq	.+12     	; 0x2004 <SW_SwitchErrStateGetState+0x4e>
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	83 30       	cpi	r24, 0x03	; 3
    1ffc:	19 f0       	breq	.+6      	; 0x2004 <SW_SwitchErrStateGetState+0x4e>
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	82 30       	cpi	r24, 0x02	; 2
    2002:	11 f4       	brne	.+4      	; 0x2008 <SW_SwitchErrStateGetState+0x52>
			return Switch_Init_Error;
    2004:	1f 82       	std	Y+7, r1	; 0x07
    2006:	77 c0       	rjmp	.+238    	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
		}
		else{
			DIO_ErrStateSetPinValue(Switch->SW_Group,Switch->SW_Pin,DIO_HIGH);
    2008:	eb 81       	ldd	r30, Y+3	; 0x03
    200a:	fc 81       	ldd	r31, Y+4	; 0x04
    200c:	80 81       	ld	r24, Z
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	91 81       	ldd	r25, Z+1	; 0x01
    2014:	69 2f       	mov	r22, r25
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
			Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    201c:	eb 81       	ldd	r30, Y+3	; 0x03
    201e:	fc 81       	ldd	r31, Y+4	; 0x04
    2020:	80 81       	ld	r24, Z
    2022:	eb 81       	ldd	r30, Y+3	; 0x03
    2024:	fc 81       	ldd	r31, Y+4	; 0x04
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	2d 81       	ldd	r18, Y+5	; 0x05
    202a:	3e 81       	ldd	r19, Y+6	; 0x06
    202c:	69 2f       	mov	r22, r25
    202e:	a9 01       	movw	r20, r18
    2030:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_ErrStateReadPinValue>
    2034:	89 83       	std	Y+1, r24	; 0x01
			if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	19 f0       	breq	.+6      	; 0x2042 <SW_SwitchErrStateGetState+0x8c>
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	19 f4       	brne	.+6      	; 0x2048 <SW_SwitchErrStateGetState+0x92>
				return Switch_Value_Error;
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	8f 83       	std	Y+7, r24	; 0x07
    2046:	57 c0       	rjmp	.+174    	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
			}
			else
				return Switch_Ok;
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	8f 83       	std	Y+7, r24	; 0x07
    204c:	54 c0       	rjmp	.+168    	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
		}
	}
	else if(Switch->ConnectionType==ExternalPullUp){
    204e:	eb 81       	ldd	r30, Y+3	; 0x03
    2050:	fc 81       	ldd	r31, Y+4	; 0x04
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	21 f5       	brne	.+72     	; 0x20a0 <SW_SwitchErrStateGetState+0xea>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    2058:	eb 81       	ldd	r30, Y+3	; 0x03
    205a:	fc 81       	ldd	r31, Y+4	; 0x04
    205c:	80 81       	ld	r24, Z
    205e:	eb 81       	ldd	r30, Y+3	; 0x03
    2060:	fc 81       	ldd	r31, Y+4	; 0x04
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	69 2f       	mov	r22, r25
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    206c:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    206e:	eb 81       	ldd	r30, Y+3	; 0x03
    2070:	fc 81       	ldd	r31, Y+4	; 0x04
    2072:	80 81       	ld	r24, Z
    2074:	eb 81       	ldd	r30, Y+3	; 0x03
    2076:	fc 81       	ldd	r31, Y+4	; 0x04
    2078:	91 81       	ldd	r25, Z+1	; 0x01
    207a:	2d 81       	ldd	r18, Y+5	; 0x05
    207c:	3e 81       	ldd	r19, Y+6	; 0x06
    207e:	69 2f       	mov	r22, r25
    2080:	a9 01       	movw	r20, r18
    2082:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_ErrStateReadPinValue>
    2086:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	19 f0       	breq	.+6      	; 0x2094 <SW_SwitchErrStateGetState+0xde>
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	19 f4       	brne	.+6      	; 0x209a <SW_SwitchErrStateGetState+0xe4>
			return Switch_Value_Error;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	8f 83       	std	Y+7, r24	; 0x07
    2098:	2e c0       	rjmp	.+92     	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
		}
		else
			return Switch_Ok;
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	8f 83       	std	Y+7, r24	; 0x07
    209e:	2b c0       	rjmp	.+86     	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
	}

	else if(Switch->ConnectionType==ExternalPullDown){
    20a0:	eb 81       	ldd	r30, Y+3	; 0x03
    20a2:	fc 81       	ldd	r31, Y+4	; 0x04
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	82 30       	cpi	r24, 0x02	; 2
    20a8:	21 f5       	brne	.+72     	; 0x20f2 <SW_SwitchErrStateGetState+0x13c>
		Switch_ErrDirectionReturn=DIO_ErrStateSetPinDirection(Switch->SW_Group,Switch->SW_Pin,DIO_IN);
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	80 81       	ld	r24, Z
    20b0:	eb 81       	ldd	r30, Y+3	; 0x03
    20b2:	fc 81       	ldd	r31, Y+4	; 0x04
    20b4:	91 81       	ldd	r25, Z+1	; 0x01
    20b6:	69 2f       	mov	r22, r25
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    20be:	8a 83       	std	Y+2, r24	; 0x02
		Switch_ErrValueReturn=DIO_ErrStateReadPinValue(Switch->SW_Group,Switch->SW_Pin,Result);
    20c0:	eb 81       	ldd	r30, Y+3	; 0x03
    20c2:	fc 81       	ldd	r31, Y+4	; 0x04
    20c4:	80 81       	ld	r24, Z
    20c6:	eb 81       	ldd	r30, Y+3	; 0x03
    20c8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	2d 81       	ldd	r18, Y+5	; 0x05
    20ce:	3e 81       	ldd	r19, Y+6	; 0x06
    20d0:	69 2f       	mov	r22, r25
    20d2:	a9 01       	movw	r20, r18
    20d4:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_ErrStateReadPinValue>
    20d8:	89 83       	std	Y+1, r24	; 0x01
		if(Switch_ErrValueReturn==DIO_ERROR_PIN||Switch_ErrValueReturn==DIO_ERROR_PORT){
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	19 f0       	breq	.+6      	; 0x20e6 <SW_SwitchErrStateGetState+0x130>
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	81 30       	cpi	r24, 0x01	; 1
    20e4:	19 f4       	brne	.+6      	; 0x20ec <SW_SwitchErrStateGetState+0x136>
			return Switch_Value_Error;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	8f 83       	std	Y+7, r24	; 0x07
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
		}
		else
			return Switch_Ok;
    20ec:	83 e0       	ldi	r24, 0x03	; 3
    20ee:	8f 83       	std	Y+7, r24	; 0x07
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <SW_SwitchErrStateGetState+0x140>
	}
	else
		return Switch_SomethingWrong;
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	8f 83       	std	Y+7, r24	; 0x07
    20f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20f8:	27 96       	adiw	r28, 0x07	; 7
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <SevSeg_SevErrStateSetNumber>:
		SevSegCC_6 ,
		SevSegCC_7 ,
		SevSegCC_8 ,
		SevSegCC_9
};
SevErrState SevSeg_SevErrStateSetNumber(u8 INPUT_NUMBER , SevSeg_info * SevenSegment1){
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <SevSeg_SevErrStateSetNumber+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <SevSeg_SevErrStateSetNumber+0x8>
    2112:	00 d0       	rcall	.+0      	; 0x2114 <SevSeg_SevErrStateSetNumber+0xa>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	8b 83       	std	Y+3, r24	; 0x03
    211a:	7d 83       	std	Y+5, r23	; 0x05
    211c:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    211e:	ec 81       	ldd	r30, Y+4	; 0x04
    2120:	fd 81       	ldd	r31, Y+5	; 0x05
    2122:	81 81       	ldd	r24, Z+1	; 0x01
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_ErrStateSetGroupDirection>
    212a:	8a 83       	std	Y+2, r24	; 0x02
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	19 f0       	breq	.+6      	; 0x2138 <SevSeg_SevErrStateSetNumber+0x2e>
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	19 f4       	brne	.+6      	; 0x213e <SevSeg_SevErrStateSetNumber+0x34>
	{
		return Group_ERROR;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	8e 83       	std	Y+6, r24	; 0x06
    213c:	8c c0       	rjmp	.+280    	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    213e:	ec 81       	ldd	r30, Y+4	; 0x04
    2140:	fd 81       	ldd	r31, Y+5	; 0x05
    2142:	80 81       	ld	r24, Z
    2144:	88 23       	and	r24, r24
    2146:	09 f0       	breq	.+2      	; 0x214a <SevSeg_SevErrStateSetNumber+0x40>
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <SevSeg_SevErrStateSetNumber+0xbe>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    214a:	ec 81       	ldd	r30, Y+4	; 0x04
    214c:	fd 81       	ldd	r31, Y+5	; 0x05
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	ec 81       	ldd	r30, Y+4	; 0x04
    2152:	fd 81       	ldd	r31, Y+5	; 0x05
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	69 2f       	mov	r22, r25
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    215e:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	31 f0       	breq	.+12     	; 0x2172 <SevSeg_SevErrStateSetNumber+0x68>
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	19 f0       	breq	.+6      	; 0x2172 <SevSeg_SevErrStateSetNumber+0x68>
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	82 30       	cpi	r24, 0x02	; 2
    2170:	19 f4       	brne	.+6      	; 0x2178 <SevSeg_SevErrStateSetNumber+0x6e>
				return Group_ERROR;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	8e 83       	std	Y+6, r24	; 0x06
    2176:	6f c0       	rjmp	.+222    	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    2178:	ec 81       	ldd	r30, Y+4	; 0x04
    217a:	fd 81       	ldd	r31, Y+5	; 0x05
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	ec 81       	ldd	r30, Y+4	; 0x04
    2180:	fd 81       	ldd	r31, Y+5	; 0x05
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	69 2f       	mov	r22, r25
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    218c:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	31 f0       	breq	.+12     	; 0x21a0 <SevSeg_SevErrStateSetNumber+0x96>
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	84 30       	cpi	r24, 0x04	; 4
    2198:	19 f0       	breq	.+6      	; 0x21a0 <SevSeg_SevErrStateSetNumber+0x96>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	11 f4       	brne	.+4      	; 0x21a4 <SevSeg_SevErrStateSetNumber+0x9a>
					return Number_Error;
    21a0:	1e 82       	std	Y+6, r1	; 0x06
    21a2:	59 c0       	rjmp	.+178    	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[INPUT_NUMBER]);
    21a4:	ec 81       	ldd	r30, Y+4	; 0x04
    21a6:	fd 81       	ldd	r31, Y+5	; 0x05
    21a8:	21 81       	ldd	r18, Z+1	; 0x01
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	fc 01       	movw	r30, r24
    21b2:	e6 5e       	subi	r30, 0xE6	; 230
    21b4:	fe 4f       	sbci	r31, 0xFE	; 254
    21b6:	90 81       	ld	r25, Z
    21b8:	82 2f       	mov	r24, r18
    21ba:	69 2f       	mov	r22, r25
    21bc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    21c0:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0 )&&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	8e 83       	std	Y+6, r24	; 0x06
    21c6:	47 c0       	rjmp	.+142    	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    21c8:	ec 81       	ldd	r30, Y+4	; 0x04
    21ca:	fd 81       	ldd	r31, Y+5	; 0x05
    21cc:	80 81       	ld	r24, Z
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <SevSeg_SevErrStateSetNumber+0xca>
    21d2:	3f c0       	rjmp	.+126    	; 0x2252 <SevSeg_SevErrStateSetNumber+0x148>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    21d4:	ec 81       	ldd	r30, Y+4	; 0x04
    21d6:	fd 81       	ldd	r31, Y+5	; 0x05
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	ec 81       	ldd	r30, Y+4	; 0x04
    21dc:	fd 81       	ldd	r31, Y+5	; 0x05
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	69 2f       	mov	r22, r25
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    21e8:	8a 83       	std	Y+2, r24	; 0x02
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	31 f0       	breq	.+12     	; 0x21fc <SevSeg_SevErrStateSetNumber+0xf2>
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	83 30       	cpi	r24, 0x03	; 3
    21f4:	19 f0       	breq	.+6      	; 0x21fc <SevSeg_SevErrStateSetNumber+0xf2>
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	19 f4       	brne	.+6      	; 0x2202 <SevSeg_SevErrStateSetNumber+0xf8>
				return Group_ERROR;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	8e 83       	std	Y+6, r24	; 0x06
    2200:	2a c0       	rjmp	.+84     	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2202:	ec 81       	ldd	r30, Y+4	; 0x04
    2204:	fd 81       	ldd	r31, Y+5	; 0x05
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	ec 81       	ldd	r30, Y+4	; 0x04
    220a:	fd 81       	ldd	r31, Y+5	; 0x05
    220c:	93 81       	ldd	r25, Z+3	; 0x03
    220e:	69 2f       	mov	r22, r25
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2216:	89 83       	std	Y+1, r24	; 0x01
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	31 f0       	breq	.+12     	; 0x222a <SevSeg_SevErrStateSetNumber+0x120>
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	84 30       	cpi	r24, 0x04	; 4
    2222:	19 f0       	breq	.+6      	; 0x222a <SevSeg_SevErrStateSetNumber+0x120>
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	82 30       	cpi	r24, 0x02	; 2
    2228:	11 f4       	brne	.+4      	; 0x222e <SevSeg_SevErrStateSetNumber+0x124>
					return Number_Error;
    222a:	1e 82       	std	Y+6, r1	; 0x06
    222c:	14 c0       	rjmp	.+40     	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[INPUT_NUMBER]);
    222e:	ec 81       	ldd	r30, Y+4	; 0x04
    2230:	fd 81       	ldd	r31, Y+5	; 0x05
    2232:	21 81       	ldd	r18, Z+1	; 0x01
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	fc 01       	movw	r30, r24
    223c:	ec 5d       	subi	r30, 0xDC	; 220
    223e:	fe 4f       	sbci	r31, 0xFE	; 254
    2240:	90 81       	ld	r25, Z
    2242:	82 2f       	mov	r24, r18
    2244:	69 2f       	mov	r22, r25
    2246:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    224a:	89 83       	std	Y+1, r24	; 0x01
					if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((INPUT_NUMBER <0) &&(INPUT_NUMBER>9))){
						return Number_Error;
					}
					else
						return Seven_OK;
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	8e 83       	std	Y+6, r24	; 0x06
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <SevSeg_SevErrStateSetNumber+0x14c>
				}
			}
		}
	}
	return Seven_OK;
    2252:	82 e0       	ldi	r24, 0x02	; 2
    2254:	8e 83       	std	Y+6, r24	; 0x06
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2258:	26 96       	adiw	r28, 0x06	; 6
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <SevSeg_SevErrStateDisplayRange>:

SevErrState    SevSeg_SevErrStateDisplayRange(SevSeg_info * SevenSegment1 , u8 Copy_start , u8 Copy_End ){
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	ef 97       	sbiw	r28, 0x3f	; 63
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	9c af       	std	Y+60, r25	; 0x3c
    2280:	8b af       	std	Y+59, r24	; 0x3b
    2282:	6d af       	std	Y+61, r22	; 0x3d
    2284:	4e af       	std	Y+62, r20	; 0x3e
	u8 ErrStateDirection,ErrStateValue;
	DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    2286:	eb ad       	ldd	r30, Y+59	; 0x3b
    2288:	fc ad       	ldd	r31, Y+60	; 0x3c
    228a:	81 81       	ldd	r24, Z+1	; 0x01
    228c:	61 e0       	ldi	r22, 0x01	; 1
    228e:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_ErrStateSetGroupDirection>
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    2292:	8a ad       	ldd	r24, Y+58	; 0x3a
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	19 f0       	breq	.+6      	; 0x229e <SevSeg_SevErrStateDisplayRange+0x34>
    2298:	8a ad       	ldd	r24, Y+58	; 0x3a
    229a:	83 30       	cpi	r24, 0x03	; 3
    229c:	19 f4       	brne	.+6      	; 0x22a4 <SevSeg_SevErrStateDisplayRange+0x3a>
	{
		return Group_ERROR;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	8f af       	std	Y+63, r24	; 0x3f
    22a2:	57 c2       	rjmp	.+1198   	; 0x2752 <SevSeg_SevErrStateDisplayRange+0x4e8>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    22a4:	eb ad       	ldd	r30, Y+59	; 0x3b
    22a6:	fc ad       	ldd	r31, Y+60	; 0x3c
    22a8:	80 81       	ld	r24, Z
    22aa:	88 23       	and	r24, r24
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <SevSeg_SevErrStateDisplayRange+0x46>
    22ae:	25 c1       	rjmp	.+586    	; 0x24fa <SevSeg_SevErrStateDisplayRange+0x290>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    22b0:	eb ad       	ldd	r30, Y+59	; 0x3b
    22b2:	fc ad       	ldd	r31, Y+60	; 0x3c
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	eb ad       	ldd	r30, Y+59	; 0x3b
    22b8:	fc ad       	ldd	r31, Y+60	; 0x3c
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	69 2f       	mov	r22, r25
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    22c4:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    22c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    22c8:	81 30       	cpi	r24, 0x01	; 1
    22ca:	31 f0       	breq	.+12     	; 0x22d8 <SevSeg_SevErrStateDisplayRange+0x6e>
    22cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	19 f0       	breq	.+6      	; 0x22d8 <SevSeg_SevErrStateDisplayRange+0x6e>
    22d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    22d4:	82 30       	cpi	r24, 0x02	; 2
    22d6:	19 f4       	brne	.+6      	; 0x22de <SevSeg_SevErrStateDisplayRange+0x74>
				return Group_ERROR;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	8f af       	std	Y+63, r24	; 0x3f
    22dc:	3a c2       	rjmp	.+1140   	; 0x2752 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    22de:	eb ad       	ldd	r30, Y+59	; 0x3b
    22e0:	fc ad       	ldd	r31, Y+60	; 0x3c
    22e2:	82 81       	ldd	r24, Z+2	; 0x02
    22e4:	eb ad       	ldd	r30, Y+59	; 0x3b
    22e6:	fc ad       	ldd	r31, Y+60	; 0x3c
    22e8:	93 81       	ldd	r25, Z+3	; 0x03
    22ea:	69 2f       	mov	r22, r25
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    22f2:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_start]);
    22f4:	eb ad       	ldd	r30, Y+59	; 0x3b
    22f6:	fc ad       	ldd	r31, Y+60	; 0x3c
    22f8:	21 81       	ldd	r18, Z+1	; 0x01
    22fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    22fc:	88 2f       	mov	r24, r24
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	fc 01       	movw	r30, r24
    2302:	e6 5e       	subi	r30, 0xE6	; 230
    2304:	fe 4f       	sbci	r31, 0xFE	; 254
    2306:	90 81       	ld	r25, Z
    2308:	82 2f       	mov	r24, r18
    230a:	69 2f       	mov	r22, r25
    230c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    2310:	89 af       	std	Y+57, r24	; 0x39
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	aa ef       	ldi	r26, 0xFA	; 250
    2318:	b3 e4       	ldi	r27, 0x43	; 67
    231a:	8d ab       	std	Y+53, r24	; 0x35
    231c:	9e ab       	std	Y+54, r25	; 0x36
    231e:	af ab       	std	Y+55, r26	; 0x37
    2320:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6d a9       	ldd	r22, Y+53	; 0x35
    2324:	7e a9       	ldd	r23, Y+54	; 0x36
    2326:	8f a9       	ldd	r24, Y+55	; 0x37
    2328:	98 ad       	ldd	r25, Y+56	; 0x38
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	89 ab       	std	Y+49, r24	; 0x31
    233c:	9a ab       	std	Y+50, r25	; 0x32
    233e:	ab ab       	std	Y+51, r26	; 0x33
    2340:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2342:	69 a9       	ldd	r22, Y+49	; 0x31
    2344:	7a a9       	ldd	r23, Y+50	; 0x32
    2346:	8b a9       	ldd	r24, Y+51	; 0x33
    2348:	9c a9       	ldd	r25, Y+52	; 0x34
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <SevSeg_SevErrStateDisplayRange+0xfa>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	98 ab       	std	Y+48, r25	; 0x30
    2360:	8f a7       	std	Y+47, r24	; 0x2f
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <SevSeg_SevErrStateDisplayRange+0x178>
	else if (__tmp > 65535)
    2364:	69 a9       	ldd	r22, Y+49	; 0x31
    2366:	7a a9       	ldd	r23, Y+50	; 0x32
    2368:	8b a9       	ldd	r24, Y+51	; 0x33
    236a:	9c a9       	ldd	r25, Y+52	; 0x34
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <SevSeg_SevErrStateDisplayRange+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6d a9       	ldd	r22, Y+53	; 0x35
    237e:	7e a9       	ldd	r23, Y+54	; 0x36
    2380:	8f a9       	ldd	r24, Y+55	; 0x37
    2382:	98 ad       	ldd	r25, Y+56	; 0x38
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	98 ab       	std	Y+48, r25	; 0x30
    23a2:	8f a7       	std	Y+47, r24	; 0x2f
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <SevSeg_SevErrStateDisplayRange+0x15a>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9e a7       	std	Y+46, r25	; 0x2e
    23ac:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <SevSeg_SevErrStateDisplayRange+0x148>
    23b6:	9e a7       	std	Y+46, r25	; 0x2e
    23b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    23bc:	98 a9       	ldd	r25, Y+48	; 0x30
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	98 ab       	std	Y+48, r25	; 0x30
    23c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c6:	98 a9       	ldd	r25, Y+48	; 0x30
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <SevSeg_SevErrStateDisplayRange+0x13c>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <SevSeg_SevErrStateDisplayRange+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	69 a9       	ldd	r22, Y+49	; 0x31
    23d0:	7a a9       	ldd	r23, Y+50	; 0x32
    23d2:	8b a9       	ldd	r24, Y+51	; 0x33
    23d4:	9c a9       	ldd	r25, Y+52	; 0x34
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	98 ab       	std	Y+48, r25	; 0x30
    23e0:	8f a7       	std	Y+47, r24	; 0x2f
    23e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e4:	98 a9       	ldd	r25, Y+48	; 0x30
    23e6:	9c a7       	std	Y+44, r25	; 0x2c
    23e8:	8b a7       	std	Y+43, r24	; 0x2b
    23ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <SevSeg_SevErrStateDisplayRange+0x184>
    23f2:	9c a7       	std	Y+44, r25	; 0x2c
    23f4:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[Copy_End]);
    23f6:	eb ad       	ldd	r30, Y+59	; 0x3b
    23f8:	fc ad       	ldd	r31, Y+60	; 0x3c
    23fa:	21 81       	ldd	r18, Z+1	; 0x01
    23fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	fc 01       	movw	r30, r24
    2404:	e6 5e       	subi	r30, 0xE6	; 230
    2406:	fe 4f       	sbci	r31, 0xFE	; 254
    2408:	90 81       	ld	r25, Z
    240a:	82 2f       	mov	r24, r18
    240c:	69 2f       	mov	r22, r25
    240e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    2412:	89 af       	std	Y+57, r24	; 0x39
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	aa ef       	ldi	r26, 0xFA	; 250
    241a:	b3 e4       	ldi	r27, 0x43	; 67
    241c:	8f a3       	std	Y+39, r24	; 0x27
    241e:	98 a7       	std	Y+40, r25	; 0x28
    2420:	a9 a7       	std	Y+41, r26	; 0x29
    2422:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	6f a1       	ldd	r22, Y+39	; 0x27
    2426:	78 a5       	ldd	r23, Y+40	; 0x28
    2428:	89 a5       	ldd	r24, Y+41	; 0x29
    242a:	9a a5       	ldd	r25, Y+42	; 0x2a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a ef       	ldi	r20, 0xFA	; 250
    2432:	54 e4       	ldi	r21, 0x44	; 68
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8b a3       	std	Y+35, r24	; 0x23
    243e:	9c a3       	std	Y+36, r25	; 0x24
    2440:	ad a3       	std	Y+37, r26	; 0x25
    2442:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2444:	6b a1       	ldd	r22, Y+35	; 0x23
    2446:	7c a1       	ldd	r23, Y+36	; 0x24
    2448:	8d a1       	ldd	r24, Y+37	; 0x25
    244a:	9e a1       	ldd	r25, Y+38	; 0x26
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <SevSeg_SevErrStateDisplayRange+0x1fc>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <SevSeg_SevErrStateDisplayRange+0x27a>
	else if (__tmp > 65535)
    2466:	6b a1       	ldd	r22, Y+35	; 0x23
    2468:	7c a1       	ldd	r23, Y+36	; 0x24
    246a:	8d a1       	ldd	r24, Y+37	; 0x25
    246c:	9e a1       	ldd	r25, Y+38	; 0x26
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <SevSeg_SevErrStateDisplayRange+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	6f a1       	ldd	r22, Y+39	; 0x27
    2480:	78 a5       	ldd	r23, Y+40	; 0x28
    2482:	89 a5       	ldd	r24, Y+41	; 0x29
    2484:	9a a5       	ldd	r25, Y+42	; 0x2a
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9a a3       	std	Y+34, r25	; 0x22
    24a4:	89 a3       	std	Y+33, r24	; 0x21
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <SevSeg_SevErrStateDisplayRange+0x25c>
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	98 a3       	std	Y+32, r25	; 0x20
    24ae:	8f 8f       	std	Y+31, r24	; 0x1f
    24b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24b2:	98 a1       	ldd	r25, Y+32	; 0x20
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <SevSeg_SevErrStateDisplayRange+0x24a>
    24b8:	98 a3       	std	Y+32, r25	; 0x20
    24ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	89 a1       	ldd	r24, Y+33	; 0x21
    24be:	9a a1       	ldd	r25, Y+34	; 0x22
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9a a3       	std	Y+34, r25	; 0x22
    24c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	89 a1       	ldd	r24, Y+33	; 0x21
    24c8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <SevSeg_SevErrStateDisplayRange+0x23e>
    24ce:	3f c1       	rjmp	.+638    	; 0x274e <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	6b a1       	ldd	r22, Y+35	; 0x23
    24d2:	7c a1       	ldd	r23, Y+36	; 0x24
    24d4:	8d a1       	ldd	r24, Y+37	; 0x25
    24d6:	9e a1       	ldd	r25, Y+38	; 0x26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9a a3       	std	Y+34, r25	; 0x22
    24e2:	89 a3       	std	Y+33, r24	; 0x21
    24e4:	89 a1       	ldd	r24, Y+33	; 0x21
    24e6:	9a a1       	ldd	r25, Y+34	; 0x22
    24e8:	9e 8f       	std	Y+30, r25	; 0x1e
    24ea:	8d 8f       	std	Y+29, r24	; 0x1d
    24ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <SevSeg_SevErrStateDisplayRange+0x286>
    24f4:	9e 8f       	std	Y+30, r25	; 0x1e
    24f6:	8d 8f       	std	Y+29, r24	; 0x1d
    24f8:	2a c1       	rjmp	.+596    	; 0x274e <SevSeg_SevErrStateDisplayRange+0x4e4>
					_delay_ms(500);
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    24fa:	eb ad       	ldd	r30, Y+59	; 0x3b
    24fc:	fc ad       	ldd	r31, Y+60	; 0x3c
    24fe:	80 81       	ld	r24, Z
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	09 f0       	breq	.+2      	; 0x2506 <SevSeg_SevErrStateDisplayRange+0x29c>
    2504:	24 c1       	rjmp	.+584    	; 0x274e <SevSeg_SevErrStateDisplayRange+0x4e4>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    2506:	eb ad       	ldd	r30, Y+59	; 0x3b
    2508:	fc ad       	ldd	r31, Y+60	; 0x3c
    250a:	82 81       	ldd	r24, Z+2	; 0x02
    250c:	eb ad       	ldd	r30, Y+59	; 0x3b
    250e:	fc ad       	ldd	r31, Y+60	; 0x3c
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	69 2f       	mov	r22, r25
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    251a:	8a af       	std	Y+58, r24	; 0x3a
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    251c:	8a ad       	ldd	r24, Y+58	; 0x3a
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	31 f0       	breq	.+12     	; 0x252e <SevSeg_SevErrStateDisplayRange+0x2c4>
    2522:	8a ad       	ldd	r24, Y+58	; 0x3a
    2524:	83 30       	cpi	r24, 0x03	; 3
    2526:	19 f0       	breq	.+6      	; 0x252e <SevSeg_SevErrStateDisplayRange+0x2c4>
    2528:	8a ad       	ldd	r24, Y+58	; 0x3a
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	19 f4       	brne	.+6      	; 0x2534 <SevSeg_SevErrStateDisplayRange+0x2ca>
				return Group_ERROR;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	8f af       	std	Y+63, r24	; 0x3f
    2532:	0f c1       	rjmp	.+542    	; 0x2752 <SevSeg_SevErrStateDisplayRange+0x4e8>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2534:	eb ad       	ldd	r30, Y+59	; 0x3b
    2536:	fc ad       	ldd	r31, Y+60	; 0x3c
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	eb ad       	ldd	r30, Y+59	; 0x3b
    253c:	fc ad       	ldd	r31, Y+60	; 0x3c
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	69 2f       	mov	r22, r25
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2548:	89 af       	std	Y+57, r24	; 0x39
				if((ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE)&&((Copy_start <0) &&(Copy_End>9))){
					return Number_Error;
				}
				else{
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_start]);
    254a:	eb ad       	ldd	r30, Y+59	; 0x3b
    254c:	fc ad       	ldd	r31, Y+60	; 0x3c
    254e:	21 81       	ldd	r18, Z+1	; 0x01
    2550:	8d ad       	ldd	r24, Y+61	; 0x3d
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	fc 01       	movw	r30, r24
    2558:	ec 5d       	subi	r30, 0xDC	; 220
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	90 81       	ld	r25, Z
    255e:	82 2f       	mov	r24, r18
    2560:	69 2f       	mov	r22, r25
    2562:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    2566:	89 af       	std	Y+57, r24	; 0x39
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	aa ef       	ldi	r26, 0xFA	; 250
    256e:	b3 e4       	ldi	r27, 0x43	; 67
    2570:	89 8f       	std	Y+25, r24	; 0x19
    2572:	9a 8f       	std	Y+26, r25	; 0x1a
    2574:	ab 8f       	std	Y+27, r26	; 0x1b
    2576:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	69 8d       	ldd	r22, Y+25	; 0x19
    257a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a ef       	ldi	r20, 0xFA	; 250
    2586:	54 e4       	ldi	r21, 0x44	; 68
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	8d 8b       	std	Y+21, r24	; 0x15
    2592:	9e 8b       	std	Y+22, r25	; 0x16
    2594:	af 8b       	std	Y+23, r26	; 0x17
    2596:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	2c f4       	brge	.+10     	; 0x25ba <SevSeg_SevErrStateDisplayRange+0x350>
		__ticks = 1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
    25b8:	3f c0       	rjmp	.+126    	; 0x2638 <SevSeg_SevErrStateDisplayRange+0x3ce>
	else if (__tmp > 65535)
    25ba:	6d 89       	ldd	r22, Y+21	; 0x15
    25bc:	7e 89       	ldd	r23, Y+22	; 0x16
    25be:	8f 89       	ldd	r24, Y+23	; 0x17
    25c0:	98 8d       	ldd	r25, Y+24	; 0x18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	4c f5       	brge	.+82     	; 0x2624 <SevSeg_SevErrStateDisplayRange+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	69 8d       	ldd	r22, Y+25	; 0x19
    25d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9c 8b       	std	Y+20, r25	; 0x14
    25f8:	8b 8b       	std	Y+19, r24	; 0x13
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <SevSeg_SevErrStateDisplayRange+0x3b0>
    25fc:	88 ec       	ldi	r24, 0xC8	; 200
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a 8b       	std	Y+18, r25	; 0x12
    2602:	89 8b       	std	Y+17, r24	; 0x11
    2604:	89 89       	ldd	r24, Y+17	; 0x11
    2606:	9a 89       	ldd	r25, Y+18	; 0x12
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <SevSeg_SevErrStateDisplayRange+0x39e>
    260c:	9a 8b       	std	Y+18, r25	; 0x12
    260e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8b 89       	ldd	r24, Y+19	; 0x13
    2612:	9c 89       	ldd	r25, Y+20	; 0x14
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	9c 8b       	std	Y+20, r25	; 0x14
    2618:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <SevSeg_SevErrStateDisplayRange+0x392>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <SevSeg_SevErrStateDisplayRange+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	6d 89       	ldd	r22, Y+21	; 0x15
    2626:	7e 89       	ldd	r23, Y+22	; 0x16
    2628:	8f 89       	ldd	r24, Y+23	; 0x17
    262a:	98 8d       	ldd	r25, Y+24	; 0x18
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
    2638:	8b 89       	ldd	r24, Y+19	; 0x13
    263a:	9c 89       	ldd	r25, Y+20	; 0x14
    263c:	98 8b       	std	Y+16, r25	; 0x10
    263e:	8f 87       	std	Y+15, r24	; 0x0f
    2640:	8f 85       	ldd	r24, Y+15	; 0x0f
    2642:	98 89       	ldd	r25, Y+16	; 0x10
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <SevSeg_SevErrStateDisplayRange+0x3da>
    2648:	98 8b       	std	Y+16, r25	; 0x10
    264a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[Copy_End]);
    264c:	eb ad       	ldd	r30, Y+59	; 0x3b
    264e:	fc ad       	ldd	r31, Y+60	; 0x3c
    2650:	21 81       	ldd	r18, Z+1	; 0x01
    2652:	8e ad       	ldd	r24, Y+62	; 0x3e
    2654:	88 2f       	mov	r24, r24
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	fc 01       	movw	r30, r24
    265a:	ec 5d       	subi	r30, 0xDC	; 220
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	90 81       	ld	r25, Z
    2660:	82 2f       	mov	r24, r18
    2662:	69 2f       	mov	r22, r25
    2664:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    2668:	89 af       	std	Y+57, r24	; 0x39
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	aa ef       	ldi	r26, 0xFA	; 250
    2670:	b3 e4       	ldi	r27, 0x43	; 67
    2672:	8b 87       	std	Y+11, r24	; 0x0b
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	ad 87       	std	Y+13, r26	; 0x0d
    2678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	98 87       	std	Y+8, r25	; 0x08
    2696:	a9 87       	std	Y+9, r26	; 0x09
    2698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <SevSeg_SevErrStateDisplayRange+0x452>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <SevSeg_SevErrStateDisplayRange+0x4d0>
	else if (__tmp > 65535)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <SevSeg_SevErrStateDisplayRange+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <SevSeg_SevErrStateDisplayRange+0x4b2>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <SevSeg_SevErrStateDisplayRange+0x4a0>
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <SevSeg_SevErrStateDisplayRange+0x494>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <SevSeg_SevErrStateDisplayRange+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <SevSeg_SevErrStateDisplayRange+0x4dc>
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
				}
			}
		}
	}
	return Seven_OK;
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	8f af       	std	Y+63, r24	; 0x3f
    2752:	8f ad       	ldd	r24, Y+63	; 0x3f

}
    2754:	ef 96       	adiw	r28, 0x3f	; 63
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <SevSeg_SevErrStateDisplayMax>:

SevErrState SevSeg_SevErrStateDisplayMax(SevSeg_info * SevenSegment1){
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	a3 97       	sbiw	r28, 0x23	; 35
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	9a a3       	std	Y+34, r25	; 0x22
    277c:	89 a3       	std	Y+33, r24	; 0x21
	u8 ErrStateDirection,ErrStateValue; // anode 1 // cathode 0 Enable
	ErrStateDirection=DIO_ErrStateSetGroupDirection(SevenSegment1->SevSeg_Group,DIO_OUT);
    277e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2780:	fa a1       	ldd	r31, Y+34	; 0x22
    2782:	81 81       	ldd	r24, Z+1	; 0x01
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_ErrStateSetGroupDirection>
    278a:	88 a3       	std	Y+32, r24	; 0x20
	if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction)
    278c:	88 a1       	ldd	r24, Y+32	; 0x20
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	19 f0       	breq	.+6      	; 0x2798 <SevSeg_SevErrStateDisplayMax+0x32>
    2792:	88 a1       	ldd	r24, Y+32	; 0x20
    2794:	83 30       	cpi	r24, 0x03	; 3
    2796:	19 f4       	brne	.+6      	; 0x279e <SevSeg_SevErrStateDisplayMax+0x38>
	{
		return Group_ERROR;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	8b a3       	std	Y+35, r24	; 0x23
    279c:	92 c1       	rjmp	.+804    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
	}
	else{
		if(SevenSegment1->SevSeg_Type==CA){
    279e:	e9 a1       	ldd	r30, Y+33	; 0x21
    27a0:	fa a1       	ldd	r31, Y+34	; 0x22
    27a2:	80 81       	ld	r24, Z
    27a4:	88 23       	and	r24, r24
    27a6:	09 f0       	breq	.+2      	; 0x27aa <SevSeg_SevErrStateDisplayMax+0x44>
    27a8:	c2 c0       	rjmp	.+388    	; 0x292e <SevSeg_SevErrStateDisplayMax+0x1c8>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    27aa:	e9 a1       	ldd	r30, Y+33	; 0x21
    27ac:	fa a1       	ldd	r31, Y+34	; 0x22
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	e9 a1       	ldd	r30, Y+33	; 0x21
    27b2:	fa a1       	ldd	r31, Y+34	; 0x22
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	69 2f       	mov	r22, r25
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    27be:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    27c0:	88 a1       	ldd	r24, Y+32	; 0x20
    27c2:	81 30       	cpi	r24, 0x01	; 1
    27c4:	31 f0       	breq	.+12     	; 0x27d2 <SevSeg_SevErrStateDisplayMax+0x6c>
    27c6:	88 a1       	ldd	r24, Y+32	; 0x20
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	19 f0       	breq	.+6      	; 0x27d2 <SevSeg_SevErrStateDisplayMax+0x6c>
    27cc:	88 a1       	ldd	r24, Y+32	; 0x20
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	19 f4       	brne	.+6      	; 0x27d8 <SevSeg_SevErrStateDisplayMax+0x72>
				return Group_ERROR;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	8b a3       	std	Y+35, r24	; 0x23
    27d6:	75 c1       	rjmp	.+746    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
    27d8:	e9 a1       	ldd	r30, Y+33	; 0x21
    27da:	fa a1       	ldd	r31, Y+34	; 0x22
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	e9 a1       	ldd	r30, Y+33	; 0x21
    27e0:	fa a1       	ldd	r31, Y+34	; 0x22
    27e2:	93 81       	ldd	r25, Z+3	; 0x03
    27e4:	69 2f       	mov	r22, r25
    27e6:	41 e0       	ldi	r20, 0x01	; 1
    27e8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    27ec:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    27ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	31 f0       	breq	.+12     	; 0x2800 <SevSeg_SevErrStateDisplayMax+0x9a>
    27f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	19 f0       	breq	.+6      	; 0x2800 <SevSeg_SevErrStateDisplayMax+0x9a>
    27fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27fc:	82 30       	cpi	r24, 0x02	; 2
    27fe:	11 f4       	brne	.+4      	; 0x2804 <SevSeg_SevErrStateDisplayMax+0x9e>
					return Number_Error;
    2800:	1b a2       	std	Y+35, r1	; 0x23
    2802:	5f c1       	rjmp	.+702    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    2804:	1e 8e       	std	Y+30, r1	; 0x1e
    2806:	84 c0       	rjmp	.+264    	; 0x2910 <SevSeg_SevErrStateDisplayMax+0x1aa>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
    2808:	e9 a1       	ldd	r30, Y+33	; 0x21
    280a:	fa a1       	ldd	r31, Y+34	; 0x22
    280c:	21 81       	ldd	r18, Z+1	; 0x01
    280e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2810:	88 2f       	mov	r24, r24
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	fc 01       	movw	r30, r24
    2816:	e6 5e       	subi	r30, 0xE6	; 230
    2818:	fe 4f       	sbci	r31, 0xFE	; 254
    281a:	90 81       	ld	r25, Z
    281c:	82 2f       	mov	r24, r18
    281e:	69 2f       	mov	r22, r25
    2820:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    2824:	8f 8f       	std	Y+31, r24	; 0x1f
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	a6 e1       	ldi	r26, 0x16	; 22
    282c:	b3 e4       	ldi	r27, 0x43	; 67
    282e:	89 8f       	std	Y+25, r24	; 0x19
    2830:	9a 8f       	std	Y+26, r25	; 0x1a
    2832:	ab 8f       	std	Y+27, r26	; 0x1b
    2834:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2836:	69 8d       	ldd	r22, Y+25	; 0x19
    2838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	4a ef       	ldi	r20, 0xFA	; 250
    2844:	54 e4       	ldi	r21, 0x44	; 68
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	8d 8b       	std	Y+21, r24	; 0x15
    2850:	9e 8b       	std	Y+22, r25	; 0x16
    2852:	af 8b       	std	Y+23, r26	; 0x17
    2854:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2856:	6d 89       	ldd	r22, Y+21	; 0x15
    2858:	7e 89       	ldd	r23, Y+22	; 0x16
    285a:	8f 89       	ldd	r24, Y+23	; 0x17
    285c:	98 8d       	ldd	r25, Y+24	; 0x18
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e8       	ldi	r20, 0x80	; 128
    2864:	5f e3       	ldi	r21, 0x3F	; 63
    2866:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286a:	88 23       	and	r24, r24
    286c:	2c f4       	brge	.+10     	; 0x2878 <SevSeg_SevErrStateDisplayMax+0x112>
		__ticks = 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
    2876:	3f c0       	rjmp	.+126    	; 0x28f6 <SevSeg_SevErrStateDisplayMax+0x190>
	else if (__tmp > 65535)
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	3f ef       	ldi	r19, 0xFF	; 255
    2884:	4f e7       	ldi	r20, 0x7F	; 127
    2886:	57 e4       	ldi	r21, 0x47	; 71
    2888:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288c:	18 16       	cp	r1, r24
    288e:	4c f5       	brge	.+82     	; 0x28e2 <SevSeg_SevErrStateDisplayMax+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2890:	69 8d       	ldd	r22, Y+25	; 0x19
    2892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e2       	ldi	r20, 0x20	; 32
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	bc 01       	movw	r22, r24
    28aa:	cd 01       	movw	r24, r26
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	0f c0       	rjmp	.+30     	; 0x28d8 <SevSeg_SevErrStateDisplayMax+0x172>
    28ba:	88 ec       	ldi	r24, 0xC8	; 200
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	9a 8b       	std	Y+18, r25	; 0x12
    28c0:	89 8b       	std	Y+17, r24	; 0x11
    28c2:	89 89       	ldd	r24, Y+17	; 0x11
    28c4:	9a 89       	ldd	r25, Y+18	; 0x12
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <SevSeg_SevErrStateDisplayMax+0x160>
    28ca:	9a 8b       	std	Y+18, r25	; 0x12
    28cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	9c 8b       	std	Y+20, r25	; 0x14
    28d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	69 f7       	brne	.-38     	; 0x28ba <SevSeg_SevErrStateDisplayMax+0x154>
    28e0:	14 c0       	rjmp	.+40     	; 0x290a <SevSeg_SevErrStateDisplayMax+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	8b 89       	ldd	r24, Y+19	; 0x13
    28f8:	9c 89       	ldd	r25, Y+20	; 0x14
    28fa:	98 8b       	std	Y+16, r25	; 0x10
    28fc:	8f 87       	std	Y+15, r24	; 0x0f
    28fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2900:	98 89       	ldd	r25, Y+16	; 0x10
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <SevSeg_SevErrStateDisplayMax+0x19c>
    2906:	98 8b       	std	Y+16, r25	; 0x10
    2908:	8f 87       	std	Y+15, r24	; 0x0f
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_HIGH);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    290a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    290c:	8f 5f       	subi	r24, 0xFF	; 255
    290e:	8e 8f       	std	Y+30, r24	; 0x1e
    2910:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2912:	8a 30       	cpi	r24, 0x0A	; 10
    2914:	08 f4       	brcc	.+2      	; 0x2918 <SevSeg_SevErrStateDisplayMax+0x1b2>
    2916:	78 cf       	rjmp	.-272    	; 0x2808 <SevSeg_SevErrStateDisplayMax+0xa2>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCA_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    2918:	8f 8d       	ldd	r24, Y+31	; 0x1f
    291a:	81 30       	cpi	r24, 0x01	; 1
    291c:	19 f0       	breq	.+6      	; 0x2924 <SevSeg_SevErrStateDisplayMax+0x1be>
    291e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2920:	84 30       	cpi	r24, 0x04	; 4
    2922:	11 f4       	brne	.+4      	; 0x2928 <SevSeg_SevErrStateDisplayMax+0x1c2>
						return Number_Error;
    2924:	1b a2       	std	Y+35, r1	; 0x23
    2926:	cd c0       	rjmp	.+410    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	8b a3       	std	Y+35, r24	; 0x23
    292c:	ca c0       	rjmp	.+404    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
		else if(SevenSegment1->SevSeg_Type==CC){
    292e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2930:	fa a1       	ldd	r31, Y+34	; 0x22
    2932:	80 81       	ld	r24, Z
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	09 f0       	breq	.+2      	; 0x293a <SevSeg_SevErrStateDisplayMax+0x1d4>
    2938:	c2 c0       	rjmp	.+388    	; 0x2abe <SevSeg_SevErrStateDisplayMax+0x358>
			ErrStateDirection=DIO_ErrStateSetPinDirection(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_OUT);
    293a:	e9 a1       	ldd	r30, Y+33	; 0x21
    293c:	fa a1       	ldd	r31, Y+34	; 0x22
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	e9 a1       	ldd	r30, Y+33	; 0x21
    2942:	fa a1       	ldd	r31, Y+34	; 0x22
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	69 2f       	mov	r22, r25
    2948:	41 e0       	ldi	r20, 0x01	; 1
    294a:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    294e:	88 a3       	std	Y+32, r24	; 0x20
			if(ErrStateDirection==DIO_ERROR_PORT||ErrStateDirection==DIO_ERROR_Direction||ErrStateDirection==DIO_ERROR_PIN){
    2950:	88 a1       	ldd	r24, Y+32	; 0x20
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	31 f0       	breq	.+12     	; 0x2962 <SevSeg_SevErrStateDisplayMax+0x1fc>
    2956:	88 a1       	ldd	r24, Y+32	; 0x20
    2958:	83 30       	cpi	r24, 0x03	; 3
    295a:	19 f0       	breq	.+6      	; 0x2962 <SevSeg_SevErrStateDisplayMax+0x1fc>
    295c:	88 a1       	ldd	r24, Y+32	; 0x20
    295e:	82 30       	cpi	r24, 0x02	; 2
    2960:	19 f4       	brne	.+6      	; 0x2968 <SevSeg_SevErrStateDisplayMax+0x202>
				return Group_ERROR;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	8b a3       	std	Y+35, r24	; 0x23
    2966:	ad c0       	rjmp	.+346    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
			}
			else
				{
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
    2968:	e9 a1       	ldd	r30, Y+33	; 0x21
    296a:	fa a1       	ldd	r31, Y+34	; 0x22
    296c:	82 81       	ldd	r24, Z+2	; 0x02
    296e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2970:	fa a1       	ldd	r31, Y+34	; 0x22
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	69 2f       	mov	r22, r25
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    297c:	8f 8f       	std	Y+31, r24	; 0x1f
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
    297e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	31 f0       	breq	.+12     	; 0x2990 <SevSeg_SevErrStateDisplayMax+0x22a>
    2984:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2986:	84 30       	cpi	r24, 0x04	; 4
    2988:	19 f0       	breq	.+6      	; 0x2990 <SevSeg_SevErrStateDisplayMax+0x22a>
    298a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	11 f4       	brne	.+4      	; 0x2994 <SevSeg_SevErrStateDisplayMax+0x22e>
					return Number_Error;
    2990:	1b a2       	std	Y+35, r1	; 0x23
    2992:	97 c0       	rjmp	.+302    	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
				else{
					for(u8 i=0;i<10;i++){
    2994:	1d 8e       	std	Y+29, r1	; 0x1d
    2996:	84 c0       	rjmp	.+264    	; 0x2aa0 <SevSeg_SevErrStateDisplayMax+0x33a>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
    2998:	e9 a1       	ldd	r30, Y+33	; 0x21
    299a:	fa a1       	ldd	r31, Y+34	; 0x22
    299c:	21 81       	ldd	r18, Z+1	; 0x01
    299e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	fc 01       	movw	r30, r24
    29a6:	ec 5d       	subi	r30, 0xDC	; 220
    29a8:	fe 4f       	sbci	r31, 0xFE	; 254
    29aa:	90 81       	ld	r25, Z
    29ac:	82 2f       	mov	r24, r18
    29ae:	69 2f       	mov	r22, r25
    29b0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
    29b4:	8f 8f       	std	Y+31, r24	; 0x1f
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a6 e1       	ldi	r26, 0x16	; 22
    29bc:	b3 e4       	ldi	r27, 0x43	; 67
    29be:	8b 87       	std	Y+11, r24	; 0x0b
    29c0:	9c 87       	std	Y+12, r25	; 0x0c
    29c2:	ad 87       	std	Y+13, r26	; 0x0d
    29c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    29cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a ef       	ldi	r20, 0xFA	; 250
    29d4:	54 e4       	ldi	r21, 0x44	; 68
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	8f 83       	std	Y+7, r24	; 0x07
    29e0:	98 87       	std	Y+8, r25	; 0x08
    29e2:	a9 87       	std	Y+9, r26	; 0x09
    29e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e6:	6f 81       	ldd	r22, Y+7	; 0x07
    29e8:	78 85       	ldd	r23, Y+8	; 0x08
    29ea:	89 85       	ldd	r24, Y+9	; 0x09
    29ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <SevSeg_SevErrStateDisplayMax+0x2a2>
		__ticks = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	3f c0       	rjmp	.+126    	; 0x2a86 <SevSeg_SevErrStateDisplayMax+0x320>
	else if (__tmp > 65535)
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	4c f5       	brge	.+82     	; 0x2a72 <SevSeg_SevErrStateDisplayMax+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e2       	ldi	r20, 0x20	; 32
    2a2e:	51 e4       	ldi	r21, 0x41	; 65
    2a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9e 83       	std	Y+6, r25	; 0x06
    2a46:	8d 83       	std	Y+5, r24	; 0x05
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <SevSeg_SevErrStateDisplayMax+0x302>
    2a4a:	88 ec       	ldi	r24, 0xC8	; 200
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <SevSeg_SevErrStateDisplayMax+0x2f0>
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a68:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f7       	brne	.-38     	; 0x2a4a <SevSeg_SevErrStateDisplayMax+0x2e4>
    2a70:	14 c0       	rjmp	.+40     	; 0x2a9a <SevSeg_SevErrStateDisplayMax+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	8d 81       	ldd	r24, Y+5	; 0x05
    2a88:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <SevSeg_SevErrStateDisplayMax+0x32c>
    2a96:	9a 83       	std	Y+2, r25	; 0x02
    2a98:	89 83       	std	Y+1, r24	; 0x01
				ErrStateValue=DIO_ErrStateSetPinValue(SevenSegment1->SevSeg_EnablePort,SevenSegment1->SevSeg_EnablePin,DIO_LOW);
				if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE||ErrStateValue==DIO_ERROR_PIN){
					return Number_Error;
				}
				else{
					for(u8 i=0;i<10;i++){
    2a9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a9c:	8f 5f       	subi	r24, 0xFF	; 255
    2a9e:	8d 8f       	std	Y+29, r24	; 0x1d
    2aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa2:	8a 30       	cpi	r24, 0x0A	; 10
    2aa4:	08 f4       	brcc	.+2      	; 0x2aa8 <SevSeg_SevErrStateDisplayMax+0x342>
    2aa6:	78 cf       	rjmp	.-272    	; 0x2998 <SevSeg_SevErrStateDisplayMax+0x232>
						ErrStateValue=DIO_ErrStateSetPortValue(SevenSegment1->SevSeg_Group,SevSegCC_Arr[i]);
						_delay_ms(150);
					}
					if(ErrStateValue==DIO_ERROR_PORT||ErrStateValue==DIO_ERROR_VALUE){
    2aa8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <SevSeg_SevErrStateDisplayMax+0x34e>
    2aae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ab0:	84 30       	cpi	r24, 0x04	; 4
    2ab2:	11 f4       	brne	.+4      	; 0x2ab8 <SevSeg_SevErrStateDisplayMax+0x352>
						return Number_Error;
    2ab4:	1b a2       	std	Y+35, r1	; 0x23
    2ab6:	05 c0       	rjmp	.+10     	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
					}
					else
						return Seven_OK;
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	8b a3       	std	Y+35, r24	; 0x23
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <SevSeg_SevErrStateDisplayMax+0x35c>
				}
			}
		}
	}
	return Seven_OK;
    2abe:	82 e0       	ldi	r24, 0x02	; 2
    2ac0:	8b a3       	std	Y+35, r24	; 0x23
    2ac2:	8b a1       	ldd	r24, Y+35	; 0x23
}
    2ac4:	a3 96       	adiw	r28, 0x23	; 35
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	de bf       	out	0x3e, r29	; 62
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	cd bf       	out	0x3d, r28	; 61
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <Led_LedErrStateTurnOn>:
 */
#include "../../Common/Definition.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Led_Interface.h"

LedErrState	Led_LedErrStateTurnOn(Led_info *Led){
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <Led_LedErrStateTurnOn+0x6>
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <Led_LedErrStateTurnOn+0x8>
    2ade:	0f 92       	push	r0
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	9c 83       	std	Y+4, r25	; 0x04
    2ae6:	8b 83       	std	Y+3, r24	; 0x03
	u8 SetPinErrReturn;
	u8 SetValueErrReturnON;

	SetPinErrReturn=DIO_ErrStateSetPinDirection(Led->Led_Group,Led->Led_Pin,DIO_OUT);
    2ae8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aea:	fc 81       	ldd	r31, Y+4	; 0x04
    2aec:	80 81       	ld	r24, Z
    2aee:	eb 81       	ldd	r30, Y+3	; 0x03
    2af0:	fc 81       	ldd	r31, Y+4	; 0x04
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	69 2f       	mov	r22, r25
    2af6:	41 e0       	ldi	r20, 0x01	; 1
    2af8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
    2afc:	8a 83       	std	Y+2, r24	; 0x02
	if(SetPinErrReturn==DIO_ERROR_PORT||SetPinErrReturn==DIO_ERROR_Direction||SetPinErrReturn==DIO_ERROR_PIN){
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	81 30       	cpi	r24, 0x01	; 1
    2b02:	31 f0       	breq	.+12     	; 0x2b10 <Led_LedErrStateTurnOn+0x3a>
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	19 f0       	breq	.+6      	; 0x2b10 <Led_LedErrStateTurnOn+0x3a>
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	19 f4       	brne	.+6      	; 0x2b16 <Led_LedErrStateTurnOn+0x40>
		return LED_INIT_Error;
    2b10:	86 e0       	ldi	r24, 0x06	; 6
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	3e c0       	rjmp	.+124    	; 0x2b92 <Led_LedErrStateTurnOn+0xbc>
	}
	else{
		if(Led->ConnectionType==Source_Connection){
    2b16:	eb 81       	ldd	r30, Y+3	; 0x03
    2b18:	fc 81       	ldd	r31, Y+4	; 0x04
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	88 23       	and	r24, r24
    2b1e:	c9 f4       	brne	.+50     	; 0x2b52 <Led_LedErrStateTurnOn+0x7c>
			// HIGH = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2b20:	eb 81       	ldd	r30, Y+3	; 0x03
    2b22:	fc 81       	ldd	r31, Y+4	; 0x04
    2b24:	80 81       	ld	r24, Z
    2b26:	eb 81       	ldd	r30, Y+3	; 0x03
    2b28:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2a:	91 81       	ldd	r25, Z+1	; 0x01
    2b2c:	69 2f       	mov	r22, r25
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2b34:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	31 f0       	breq	.+12     	; 0x2b48 <Led_LedErrStateTurnOn+0x72>
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	84 30       	cpi	r24, 0x04	; 4
    2b40:	19 f0       	breq	.+6      	; 0x2b48 <Led_LedErrStateTurnOn+0x72>
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	82 30       	cpi	r24, 0x02	; 2
    2b46:	19 f4       	brne	.+6      	; 0x2b4e <Led_LedErrStateTurnOn+0x78>
				return LED_ON_Error;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	22 c0       	rjmp	.+68     	; 0x2b92 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2b4e:	1d 82       	std	Y+5, r1	; 0x05
    2b50:	20 c0       	rjmp	.+64     	; 0x2b92 <Led_LedErrStateTurnOn+0xbc>
		}
		else if(Led->ConnectionType==Sink_Connection){
    2b52:	eb 81       	ldd	r30, Y+3	; 0x03
    2b54:	fc 81       	ldd	r31, Y+4	; 0x04
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	c9 f4       	brne	.+50     	; 0x2b8e <Led_LedErrStateTurnOn+0xb8>
			// LOW = ON
			SetValueErrReturnON=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2b5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b60:	80 81       	ld	r24, Z
    2b62:	eb 81       	ldd	r30, Y+3	; 0x03
    2b64:	fc 81       	ldd	r31, Y+4	; 0x04
    2b66:	91 81       	ldd	r25, Z+1	; 0x01
    2b68:	69 2f       	mov	r22, r25
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2b70:	89 83       	std	Y+1, r24	; 0x01
			if(SetValueErrReturnON==DIO_ERROR_PORT||SetValueErrReturnON==DIO_ERROR_VALUE||SetValueErrReturnON==DIO_ERROR_PIN){
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	31 f0       	breq	.+12     	; 0x2b84 <Led_LedErrStateTurnOn+0xae>
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	84 30       	cpi	r24, 0x04	; 4
    2b7c:	19 f0       	breq	.+6      	; 0x2b84 <Led_LedErrStateTurnOn+0xae>
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	82 30       	cpi	r24, 0x02	; 2
    2b82:	19 f4       	brne	.+6      	; 0x2b8a <Led_LedErrStateTurnOn+0xb4>
				return LED_ON_Error;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	8d 83       	std	Y+5, r24	; 0x05
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <Led_LedErrStateTurnOn+0xbc>
			}
			else
				return LED_ON_OK;
    2b8a:	1d 82       	std	Y+5, r1	; 0x05
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <Led_LedErrStateTurnOn+0xbc>
		}
		else
			return LED_Connection_Error;
    2b8e:	84 e0       	ldi	r24, 0x04	; 4
    2b90:	8d 83       	std	Y+5, r24	; 0x05
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05

	}
}
    2b94:	0f 90       	pop	r0
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <Led_LedErrStateTurnOff>:


LedErrState	Led_LedErrStateTurnOff(Led_info *Led){
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <Led_LedErrStateTurnOff+0x6>
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <Led_LedErrStateTurnOff+0x8>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 SetValueErrReturnOFF;
	if(Led->ConnectionType==Source_Connection){
    2bb4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bb6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	88 23       	and	r24, r24
    2bbc:	d1 f4       	brne	.+52     	; 0x2bf2 <Led_LedErrStateTurnOff+0x4e>
		// HIGH = ON
		SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_LOW);
    2bbe:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc0:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc2:	80 81       	ld	r24, Z
    2bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	69 2f       	mov	r22, r25
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2bd2:	89 83       	std	Y+1, r24	; 0x01
		if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	31 f0       	breq	.+12     	; 0x2be6 <Led_LedErrStateTurnOff+0x42>
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	84 30       	cpi	r24, 0x04	; 4
    2bde:	19 f0       	breq	.+6      	; 0x2be6 <Led_LedErrStateTurnOff+0x42>
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	82 30       	cpi	r24, 0x02	; 2
    2be4:	19 f4       	brne	.+6      	; 0x2bec <Led_LedErrStateTurnOff+0x48>
			return LED_OFF_Error;
    2be6:	83 e0       	ldi	r24, 0x03	; 3
    2be8:	8c 83       	std	Y+4, r24	; 0x04
    2bea:	24 c0       	rjmp	.+72     	; 0x2c34 <Led_LedErrStateTurnOff+0x90>
		}
		else
			return LED_OFF_OK;
    2bec:	82 e0       	ldi	r24, 0x02	; 2
    2bee:	8c 83       	std	Y+4, r24	; 0x04
    2bf0:	21 c0       	rjmp	.+66     	; 0x2c34 <Led_LedErrStateTurnOff+0x90>
	}
else if(Led->ConnectionType==Sink_Connection){
    2bf2:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf4:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf6:	82 81       	ldd	r24, Z+2	; 0x02
    2bf8:	81 30       	cpi	r24, 0x01	; 1
    2bfa:	d1 f4       	brne	.+52     	; 0x2c30 <Led_LedErrStateTurnOff+0x8c>
	// LOW = ON
	SetValueErrReturnOFF=DIO_ErrStateSetPinValue(Led->Led_Group,Led->Led_Pin,DIO_HIGH);
    2bfc:	ea 81       	ldd	r30, Y+2	; 0x02
    2bfe:	fb 81       	ldd	r31, Y+3	; 0x03
    2c00:	80 81       	ld	r24, Z
    2c02:	ea 81       	ldd	r30, Y+2	; 0x02
    2c04:	fb 81       	ldd	r31, Y+3	; 0x03
    2c06:	91 81       	ldd	r25, Z+1	; 0x01
    2c08:	69 2f       	mov	r22, r25
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2c10:	89 83       	std	Y+1, r24	; 0x01
	if(SetValueErrReturnOFF==DIO_ERROR_PORT||SetValueErrReturnOFF==DIO_ERROR_VALUE||SetValueErrReturnOFF==DIO_ERROR_PIN){
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	81 30       	cpi	r24, 0x01	; 1
    2c16:	31 f0       	breq	.+12     	; 0x2c24 <Led_LedErrStateTurnOff+0x80>
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	84 30       	cpi	r24, 0x04	; 4
    2c1c:	19 f0       	breq	.+6      	; 0x2c24 <Led_LedErrStateTurnOff+0x80>
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	82 30       	cpi	r24, 0x02	; 2
    2c22:	19 f4       	brne	.+6      	; 0x2c2a <Led_LedErrStateTurnOff+0x86>
		return LED_OFF_Error;
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	8c 83       	std	Y+4, r24	; 0x04
    2c28:	05 c0       	rjmp	.+10     	; 0x2c34 <Led_LedErrStateTurnOff+0x90>
	}
	else
		return LED_OFF_OK;
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	8c 83       	std	Y+4, r24	; 0x04
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <Led_LedErrStateTurnOff+0x90>
}
else
	return LED_Connection_Error;
    2c30:	84 e0       	ldi	r24, 0x04	; 4
    2c32:	8c 83       	std	Y+4, r24	; 0x04
    2c34:	8c 81       	ldd	r24, Y+4	; 0x04

}
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	cf 91       	pop	r28
    2c40:	df 91       	pop	r29
    2c42:	08 95       	ret

00002c44 <LCD_VoidSendCommand>:
 */
#include"../../MCAL/DIO/DIO_Interface.h"
#include "LCD_Interface.h"
#include <stdlib.h>

void LCD_VoidSendCommand(u8 Local_Command,LCD_Info *lcd){
    2c44:	df 93       	push	r29
    2c46:	cf 93       	push	r28
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	6f 97       	sbiw	r28, 0x1f	; 31
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	8d 8f       	std	Y+29, r24	; 0x1d
    2c5a:	7f 8f       	std	Y+31, r23	; 0x1f
    2c5c:	6e 8f       	std	Y+30, r22	; 0x1e
	/*RS->LOw*/
	DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_LOW);
    2c5e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c60:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c62:	80 81       	ld	r24, Z
    2c64:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c66:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c68:	91 81       	ldd	r25, Z+1	; 0x01
    2c6a:	69 2f       	mov	r22, r25
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
	/*RW-> LOW*/
	DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2c72:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c74:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c7a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	69 2f       	mov	r22, r25
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
	/*Group = Command*/
	DIO_ErrStateSetPortValue(lcd->Data_group,Local_Command);
    2c86:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c88:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c8a:	86 81       	ldd	r24, Z+6	; 0x06
    2c8c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2c8e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
	/*Enable*/
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2c92:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c94:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c96:	84 81       	ldd	r24, Z+4	; 0x04
    2c98:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2c9a:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2c9c:	95 81       	ldd	r25, Z+5	; 0x05
    2c9e:	69 2f       	mov	r22, r25
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	a0 e8       	ldi	r26, 0x80	; 128
    2cac:	bf e3       	ldi	r27, 0x3F	; 63
    2cae:	89 8f       	std	Y+25, r24	; 0x19
    2cb0:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb2:	ab 8f       	std	Y+27, r26	; 0x1b
    2cb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	4a ef       	ldi	r20, 0xFA	; 250
    2cc4:	54 e4       	ldi	r21, 0x44	; 68
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8d 8b       	std	Y+21, r24	; 0x15
    2cd0:	9e 8b       	std	Y+22, r25	; 0x16
    2cd2:	af 8b       	std	Y+23, r26	; 0x17
    2cd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	2c f4       	brge	.+10     	; 0x2cf8 <LCD_VoidSendCommand+0xb4>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	3f c0       	rjmp	.+126    	; 0x2d76 <LCD_VoidSendCommand+0x132>
	else if (__tmp > 65535)
    2cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	4c f5       	brge	.+82     	; 0x2d62 <LCD_VoidSendCommand+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	69 8d       	ldd	r22, Y+25	; 0x19
    2d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e2       	ldi	r20, 0x20	; 32
    2d1e:	51 e4       	ldi	r21, 0x41	; 65
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	9c 8b       	std	Y+20, r25	; 0x14
    2d36:	8b 8b       	std	Y+19, r24	; 0x13
    2d38:	0f c0       	rjmp	.+30     	; 0x2d58 <LCD_VoidSendCommand+0x114>
    2d3a:	88 ec       	ldi	r24, 0xC8	; 200
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9a 8b       	std	Y+18, r25	; 0x12
    2d40:	89 8b       	std	Y+17, r24	; 0x11
    2d42:	89 89       	ldd	r24, Y+17	; 0x11
    2d44:	9a 89       	ldd	r25, Y+18	; 0x12
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_VoidSendCommand+0x102>
    2d4a:	9a 8b       	std	Y+18, r25	; 0x12
    2d4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d50:	9c 89       	ldd	r25, Y+20	; 0x14
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	9c 8b       	std	Y+20, r25	; 0x14
    2d56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d58:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	69 f7       	brne	.-38     	; 0x2d3a <LCD_VoidSendCommand+0xf6>
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <LCD_VoidSendCommand+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d62:	6d 89       	ldd	r22, Y+21	; 0x15
    2d64:	7e 89       	ldd	r23, Y+22	; 0x16
    2d66:	8f 89       	ldd	r24, Y+23	; 0x17
    2d68:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9c 8b       	std	Y+20, r25	; 0x14
    2d74:	8b 8b       	std	Y+19, r24	; 0x13
    2d76:	8b 89       	ldd	r24, Y+19	; 0x13
    2d78:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7a:	98 8b       	std	Y+16, r25	; 0x10
    2d7c:	8f 87       	std	Y+15, r24	; 0x0f
    2d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d80:	98 89       	ldd	r25, Y+16	; 0x10
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <LCD_VoidSendCommand+0x13e>
    2d86:	98 8b       	std	Y+16, r25	; 0x10
    2d88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    2d8a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d8c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d8e:	84 81       	ldd	r24, Z+4	; 0x04
    2d90:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2d92:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d94:	95 81       	ldd	r25, Z+5	; 0x05
    2d96:	69 2f       	mov	r22, r25
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 e8       	ldi	r26, 0x80	; 128
    2da4:	bf e3       	ldi	r27, 0x3F	; 63
    2da6:	8b 87       	std	Y+11, r24	; 0x0b
    2da8:	9c 87       	std	Y+12, r25	; 0x0c
    2daa:	ad 87       	std	Y+13, r26	; 0x0d
    2dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a ef       	ldi	r20, 0xFA	; 250
    2dbc:	54 e4       	ldi	r21, 0x44	; 68
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8f 83       	std	Y+7, r24	; 0x07
    2dc8:	98 87       	std	Y+8, r25	; 0x08
    2dca:	a9 87       	std	Y+9, r26	; 0x09
    2dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dce:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd0:	78 85       	ldd	r23, Y+8	; 0x08
    2dd2:	89 85       	ldd	r24, Y+9	; 0x09
    2dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de2:	88 23       	and	r24, r24
    2de4:	2c f4       	brge	.+10     	; 0x2df0 <LCD_VoidSendCommand+0x1ac>
		__ticks = 1;
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	3f c0       	rjmp	.+126    	; 0x2e6e <LCD_VoidSendCommand+0x22a>
	else if (__tmp > 65535)
    2df0:	6f 81       	ldd	r22, Y+7	; 0x07
    2df2:	78 85       	ldd	r23, Y+8	; 0x08
    2df4:	89 85       	ldd	r24, Y+9	; 0x09
    2df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	3f ef       	ldi	r19, 0xFF	; 255
    2dfc:	4f e7       	ldi	r20, 0x7F	; 127
    2dfe:	57 e4       	ldi	r21, 0x47	; 71
    2e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e04:	18 16       	cp	r1, r24
    2e06:	4c f5       	brge	.+82     	; 0x2e5a <LCD_VoidSendCommand+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e2       	ldi	r20, 0x20	; 32
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	0f c0       	rjmp	.+30     	; 0x2e50 <LCD_VoidSendCommand+0x20c>
    2e32:	88 ec       	ldi	r24, 0xC8	; 200
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <LCD_VoidSendCommand+0x1fa>
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e50:	8d 81       	ldd	r24, Y+5	; 0x05
    2e52:	9e 81       	ldd	r25, Y+6	; 0x06
    2e54:	00 97       	sbiw	r24, 0x00	; 0
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <LCD_VoidSendCommand+0x1ee>
    2e58:	14 c0       	rjmp	.+40     	; 0x2e82 <LCD_VoidSendCommand+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5c:	78 85       	ldd	r23, Y+8	; 0x08
    2e5e:	89 85       	ldd	r24, Y+9	; 0x09
    2e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_VoidSendCommand+0x236>
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	if(Local_Command==0x01)
    2e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	39 f4       	brne	.+14     	; 0x2e96 <LCD_VoidSendCommand+0x252>
		LCD_VoidGoToXY(0,0,lcd);
    2e88:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e8a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	60 e0       	ldi	r22, 0x00	; 0
    2e90:	a9 01       	movw	r20, r18
    2e92:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
}
    2e96:	6f 96       	adiw	r28, 0x1f	; 31
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <LCD_VoidSendChar>:

u8 LCD_VoidSendChar(u8 Local_Char,LCD_Info *lcd,LCD_Line_Info *Type)
{
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	c9 55       	subi	r28, 0x59	; 89
    2eb6:	d0 40       	sbci	r29, 0x00	; 0
    2eb8:	0f b6       	in	r0, 0x3f	; 63
    2eba:	f8 94       	cli
    2ebc:	de bf       	out	0x3e, r29	; 62
    2ebe:	0f be       	out	0x3f, r0	; 63
    2ec0:	cd bf       	out	0x3d, r28	; 61
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	eb 5a       	subi	r30, 0xAB	; 171
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 83       	st	Z, r24
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ea 5a       	subi	r30, 0xAA	; 170
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	71 83       	std	Z+1, r23	; 0x01
    2ed2:	60 83       	st	Z, r22
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	e8 5a       	subi	r30, 0xA8	; 168
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	51 83       	std	Z+1, r21	; 0x01
    2edc:	40 83       	st	Z, r20
	static u8 SwitchingCounter;
	static u8 SecondLineCounter,FirstLineCounter;

	if(Type->OneLine==NO&&Type->TwoLines==YES){
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e8 5a       	subi	r30, 0xA8	; 168
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	01 90       	ld	r0, Z+
    2ee6:	f0 81       	ld	r31, Z
    2ee8:	e0 2d       	mov	r30, r0
    2eea:	80 81       	ld	r24, Z
    2eec:	88 23       	and	r24, r24
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <LCD_VoidSendChar+0x4a>
    2ef0:	12 c3       	rjmp	.+1572   	; 0x3516 <LCD_VoidSendChar+0x66e>
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e8 5a       	subi	r30, 0xA8	; 168
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	01 90       	ld	r0, Z+
    2efa:	f0 81       	ld	r31, Z
    2efc:	e0 2d       	mov	r30, r0
    2efe:	81 81       	ldd	r24, Z+1	; 0x01
    2f00:	81 30       	cpi	r24, 0x01	; 1
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <LCD_VoidSendChar+0x5e>
    2f04:	08 c3       	rjmp	.+1552   	; 0x3516 <LCD_VoidSendChar+0x66e>
		if(SwitchingCounter<16){
    2f06:	80 91 7f 01 	lds	r24, 0x017F
    2f0a:	80 31       	cpi	r24, 0x10	; 16
    2f0c:	08 f0       	brcs	.+2      	; 0x2f10 <LCD_VoidSendChar+0x68>
    2f0e:	a3 c1       	rjmp	.+838    	; 0x3256 <LCD_VoidSendChar+0x3ae>
			LCD_VoidGoToXY(FirstLineCounter,0,lcd);
    2f10:	80 91 7d 01 	lds	r24, 0x017D
    2f14:	fe 01       	movw	r30, r28
    2f16:	ea 5a       	subi	r30, 0xAA	; 170
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	20 81       	ld	r18, Z
    2f1c:	31 81       	ldd	r19, Z+1	; 0x01
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	a9 01       	movw	r20, r18
    2f22:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    2f26:	fe 01       	movw	r30, r28
    2f28:	ea 5a       	subi	r30, 0xAA	; 170
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	f0 81       	ld	r31, Z
    2f30:	e0 2d       	mov	r30, r0
    2f32:	80 81       	ld	r24, Z
    2f34:	fe 01       	movw	r30, r28
    2f36:	ea 5a       	subi	r30, 0xAA	; 170
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	01 90       	ld	r0, Z+
    2f3c:	f0 81       	ld	r31, Z
    2f3e:	e0 2d       	mov	r30, r0
    2f40:	91 81       	ldd	r25, Z+1	; 0x01
    2f42:	69 2f       	mov	r22, r25
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ea 5a       	subi	r30, 0xAA	; 170
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	01 90       	ld	r0, Z+
    2f52:	f0 81       	ld	r31, Z
    2f54:	e0 2d       	mov	r30, r0
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	fe 01       	movw	r30, r28
    2f5a:	ea 5a       	subi	r30, 0xAA	; 170
    2f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5e:	01 90       	ld	r0, Z+
    2f60:	f0 81       	ld	r31, Z
    2f62:	e0 2d       	mov	r30, r0
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	69 2f       	mov	r22, r25
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ea 5a       	subi	r30, 0xAA	; 170
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	01 90       	ld	r0, Z+
    2f76:	f0 81       	ld	r31, Z
    2f78:	e0 2d       	mov	r30, r0
    2f7a:	86 81       	ldd	r24, Z+6	; 0x06
    2f7c:	fe 01       	movw	r30, r28
    2f7e:	eb 5a       	subi	r30, 0xAB	; 171
    2f80:	ff 4f       	sbci	r31, 0xFF	; 255
    2f82:	60 81       	ld	r22, Z
    2f84:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ea 5a       	subi	r30, 0xAA	; 170
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	01 90       	ld	r0, Z+
    2f90:	f0 81       	ld	r31, Z
    2f92:	e0 2d       	mov	r30, r0
    2f94:	84 81       	ldd	r24, Z+4	; 0x04
    2f96:	fe 01       	movw	r30, r28
    2f98:	ea 5a       	subi	r30, 0xAA	; 170
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	01 90       	ld	r0, Z+
    2f9e:	f0 81       	ld	r31, Z
    2fa0:	e0 2d       	mov	r30, r0
    2fa2:	95 81       	ldd	r25, Z+5	; 0x05
    2fa4:	69 2f       	mov	r22, r25
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    2fac:	fe 01       	movw	r30, r28
    2fae:	ef 5a       	subi	r30, 0xAF	; 175
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	a0 ea       	ldi	r26, 0xA0	; 160
    2fb8:	b0 e4       	ldi	r27, 0x40	; 64
    2fba:	80 83       	st	Z, r24
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	a2 83       	std	Z+2, r26	; 0x02
    2fc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc2:	8e 01       	movw	r16, r28
    2fc4:	03 5b       	subi	r16, 0xB3	; 179
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	fe 01       	movw	r30, r28
    2fca:	ef 5a       	subi	r30, 0xAF	; 175
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a ef       	ldi	r20, 0xFA	; 250
    2fdc:	54 e4       	ldi	r21, 0x44	; 68
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	80 83       	st	Z, r24
    2fea:	91 83       	std	Z+1, r25	; 0x01
    2fec:	a2 83       	std	Z+2, r26	; 0x02
    2fee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ff0:	fe 01       	movw	r30, r28
    2ff2:	e3 5b       	subi	r30, 0xB3	; 179
    2ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff6:	60 81       	ld	r22, Z
    2ff8:	71 81       	ldd	r23, Z+1	; 0x01
    2ffa:	82 81       	ldd	r24, Z+2	; 0x02
    2ffc:	93 81       	ldd	r25, Z+3	; 0x03
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	44 f4       	brge	.+16     	; 0x301e <LCD_VoidSendChar+0x176>
		__ticks = 1;
    300e:	fe 01       	movw	r30, r28
    3010:	e5 5b       	subi	r30, 0xB5	; 181
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	64 c0       	rjmp	.+200    	; 0x30e6 <LCD_VoidSendChar+0x23e>
	else if (__tmp > 65535)
    301e:	fe 01       	movw	r30, r28
    3020:	e3 5b       	subi	r30, 0xB3	; 179
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	3f ef       	ldi	r19, 0xFF	; 255
    3030:	4f e7       	ldi	r20, 0x7F	; 127
    3032:	57 e4       	ldi	r21, 0x47	; 71
    3034:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3038:	18 16       	cp	r1, r24
    303a:	0c f0       	brlt	.+2      	; 0x303e <LCD_VoidSendChar+0x196>
    303c:	43 c0       	rjmp	.+134    	; 0x30c4 <LCD_VoidSendChar+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303e:	fe 01       	movw	r30, r28
    3040:	ef 5a       	subi	r30, 0xAF	; 175
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	40 e2       	ldi	r20, 0x20	; 32
    3052:	51 e4       	ldi	r21, 0x41	; 65
    3054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8e 01       	movw	r16, r28
    305e:	05 5b       	subi	r16, 0xB5	; 181
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	f8 01       	movw	r30, r16
    3070:	91 83       	std	Z+1, r25	; 0x01
    3072:	80 83       	st	Z, r24
    3074:	1f c0       	rjmp	.+62     	; 0x30b4 <LCD_VoidSendChar+0x20c>
    3076:	fe 01       	movw	r30, r28
    3078:	e7 5b       	subi	r30, 0xB7	; 183
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	80 83       	st	Z, r24
    3084:	fe 01       	movw	r30, r28
    3086:	e7 5b       	subi	r30, 0xB7	; 183
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	f1 f7       	brne	.-4      	; 0x308e <LCD_VoidSendChar+0x1e6>
    3092:	fe 01       	movw	r30, r28
    3094:	e7 5b       	subi	r30, 0xB7	; 183
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	91 83       	std	Z+1, r25	; 0x01
    309a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309c:	de 01       	movw	r26, r28
    309e:	a5 5b       	subi	r26, 0xB5	; 181
    30a0:	bf 4f       	sbci	r27, 0xFF	; 255
    30a2:	fe 01       	movw	r30, r28
    30a4:	e5 5b       	subi	r30, 0xB5	; 181
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	9c 93       	st	X, r25
    30b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b4:	fe 01       	movw	r30, r28
    30b6:	e5 5b       	subi	r30, 0xB5	; 181
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	d1 f6       	brne	.-76     	; 0x3076 <LCD_VoidSendChar+0x1ce>
    30c2:	27 c0       	rjmp	.+78     	; 0x3112 <LCD_VoidSendChar+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c4:	8e 01       	movw	r16, r28
    30c6:	05 5b       	subi	r16, 0xB5	; 181
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	e3 5b       	subi	r30, 0xB3	; 179
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	f8 01       	movw	r30, r16
    30e2:	91 83       	std	Z+1, r25	; 0x01
    30e4:	80 83       	st	Z, r24
    30e6:	de 01       	movw	r26, r28
    30e8:	a9 5b       	subi	r26, 0xB9	; 185
    30ea:	bf 4f       	sbci	r27, 0xFF	; 255
    30ec:	fe 01       	movw	r30, r28
    30ee:	e5 5b       	subi	r30, 0xB5	; 181
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	80 81       	ld	r24, Z
    30f4:	91 81       	ldd	r25, Z+1	; 0x01
    30f6:	8d 93       	st	X+, r24
    30f8:	9c 93       	st	X, r25
    30fa:	fe 01       	movw	r30, r28
    30fc:	e9 5b       	subi	r30, 0xB9	; 185
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <LCD_VoidSendChar+0x25c>
    3108:	fe 01       	movw	r30, r28
    310a:	e9 5b       	subi	r30, 0xB9	; 185
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    3112:	fe 01       	movw	r30, r28
    3114:	ea 5a       	subi	r30, 0xAA	; 170
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	01 90       	ld	r0, Z+
    311a:	f0 81       	ld	r31, Z
    311c:	e0 2d       	mov	r30, r0
    311e:	84 81       	ldd	r24, Z+4	; 0x04
    3120:	fe 01       	movw	r30, r28
    3122:	ea 5a       	subi	r30, 0xAA	; 170
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	01 90       	ld	r0, Z+
    3128:	f0 81       	ld	r31, Z
    312a:	e0 2d       	mov	r30, r0
    312c:	95 81       	ldd	r25, Z+5	; 0x05
    312e:	69 2f       	mov	r22, r25
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    3136:	fe 01       	movw	r30, r28
    3138:	ed 5b       	subi	r30, 0xBD	; 189
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	80 e0       	ldi	r24, 0x00	; 0
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	a0 ea       	ldi	r26, 0xA0	; 160
    3142:	b0 e4       	ldi	r27, 0x40	; 64
    3144:	80 83       	st	Z, r24
    3146:	91 83       	std	Z+1, r25	; 0x01
    3148:	a2 83       	std	Z+2, r26	; 0x02
    314a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314c:	8e 01       	movw	r16, r28
    314e:	01 5c       	subi	r16, 0xC1	; 193
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	fe 01       	movw	r30, r28
    3154:	ed 5b       	subi	r30, 0xBD	; 189
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	4a ef       	ldi	r20, 0xFA	; 250
    3166:	54 e4       	ldi	r21, 0x44	; 68
    3168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	f8 01       	movw	r30, r16
    3172:	80 83       	st	Z, r24
    3174:	91 83       	std	Z+1, r25	; 0x01
    3176:	a2 83       	std	Z+2, r26	; 0x02
    3178:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    317a:	fe 01       	movw	r30, r28
    317c:	ff 96       	adiw	r30, 0x3f	; 63
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	40 e8       	ldi	r20, 0x80	; 128
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3192:	88 23       	and	r24, r24
    3194:	2c f4       	brge	.+10     	; 0x31a0 <LCD_VoidSendChar+0x2f8>
		__ticks = 1;
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	9e af       	std	Y+62, r25	; 0x3e
    319c:	8d af       	std	Y+61, r24	; 0x3d
    319e:	46 c0       	rjmp	.+140    	; 0x322c <LCD_VoidSendChar+0x384>
	else if (__tmp > 65535)
    31a0:	fe 01       	movw	r30, r28
    31a2:	ff 96       	adiw	r30, 0x3f	; 63
    31a4:	60 81       	ld	r22, Z
    31a6:	71 81       	ldd	r23, Z+1	; 0x01
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	3f ef       	ldi	r19, 0xFF	; 255
    31b0:	4f e7       	ldi	r20, 0x7F	; 127
    31b2:	57 e4       	ldi	r21, 0x47	; 71
    31b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31b8:	18 16       	cp	r1, r24
    31ba:	64 f5       	brge	.+88     	; 0x3214 <LCD_VoidSendChar+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31bc:	fe 01       	movw	r30, r28
    31be:	ed 5b       	subi	r30, 0xBD	; 189
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e af       	std	Y+62, r25	; 0x3e
    31e8:	8d af       	std	Y+61, r24	; 0x3d
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <LCD_VoidSendChar+0x362>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c af       	std	Y+60, r25	; 0x3c
    31f2:	8b af       	std	Y+59, r24	; 0x3b
    31f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    31f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_VoidSendChar+0x350>
    31fc:	9c af       	std	Y+60, r25	; 0x3c
    31fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8d ad       	ldd	r24, Y+61	; 0x3d
    3202:	9e ad       	ldd	r25, Y+62	; 0x3e
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9e af       	std	Y+62, r25	; 0x3e
    3208:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8d ad       	ldd	r24, Y+61	; 0x3d
    320c:	9e ad       	ldd	r25, Y+62	; 0x3e
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <LCD_VoidSendChar+0x344>
    3212:	16 c0       	rjmp	.+44     	; 0x3240 <LCD_VoidSendChar+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	fe 01       	movw	r30, r28
    3216:	ff 96       	adiw	r30, 0x3f	; 63
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9e af       	std	Y+62, r25	; 0x3e
    322a:	8d af       	std	Y+61, r24	; 0x3d
    322c:	8d ad       	ldd	r24, Y+61	; 0x3d
    322e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3230:	9a af       	std	Y+58, r25	; 0x3a
    3232:	89 af       	std	Y+57, r24	; 0x39
    3234:	89 ad       	ldd	r24, Y+57	; 0x39
    3236:	9a ad       	ldd	r25, Y+58	; 0x3a
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <LCD_VoidSendChar+0x390>
    323c:	9a af       	std	Y+58, r25	; 0x3a
    323e:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(5);
			SwitchingCounter++;
    3240:	80 91 7f 01 	lds	r24, 0x017F
    3244:	8f 5f       	subi	r24, 0xFF	; 255
    3246:	80 93 7f 01 	sts	0x017F, r24
			FirstLineCounter++;
    324a:	80 91 7d 01 	lds	r24, 0x017D
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	80 93 7d 01 	sts	0x017D, r24
    3254:	c8 c2       	rjmp	.+1424   	; 0x37e6 <LCD_VoidSendChar+0x93e>
		}
		else if(SwitchingCounter>15&&SwitchingCounter<32){
    3256:	80 91 7f 01 	lds	r24, 0x017F
    325a:	80 31       	cpi	r24, 0x10	; 16
    325c:	08 f4       	brcc	.+2      	; 0x3260 <LCD_VoidSendChar+0x3b8>
    325e:	54 c1       	rjmp	.+680    	; 0x3508 <LCD_VoidSendChar+0x660>
    3260:	80 91 7f 01 	lds	r24, 0x017F
    3264:	80 32       	cpi	r24, 0x20	; 32
    3266:	08 f0       	brcs	.+2      	; 0x326a <LCD_VoidSendChar+0x3c2>
    3268:	4f c1       	rjmp	.+670    	; 0x3508 <LCD_VoidSendChar+0x660>
			LCD_VoidGoToXY(SecondLineCounter,1,lcd);
    326a:	80 91 7e 01 	lds	r24, 0x017E
    326e:	fe 01       	movw	r30, r28
    3270:	ea 5a       	subi	r30, 0xAA	; 170
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	20 81       	ld	r18, Z
    3276:	31 81       	ldd	r19, Z+1	; 0x01
    3278:	61 e0       	ldi	r22, 0x01	; 1
    327a:	a9 01       	movw	r20, r18
    327c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
			/*RS->LOw*/
			DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    3280:	fe 01       	movw	r30, r28
    3282:	ea 5a       	subi	r30, 0xAA	; 170
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	01 90       	ld	r0, Z+
    3288:	f0 81       	ld	r31, Z
    328a:	e0 2d       	mov	r30, r0
    328c:	80 81       	ld	r24, Z
    328e:	fe 01       	movw	r30, r28
    3290:	ea 5a       	subi	r30, 0xAA	; 170
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	01 90       	ld	r0, Z+
    3296:	f0 81       	ld	r31, Z
    3298:	e0 2d       	mov	r30, r0
    329a:	91 81       	ldd	r25, Z+1	; 0x01
    329c:	69 2f       	mov	r22, r25
    329e:	41 e0       	ldi	r20, 0x01	; 1
    32a0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
			/*RW-> LOW*/
			DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    32a4:	fe 01       	movw	r30, r28
    32a6:	ea 5a       	subi	r30, 0xAA	; 170
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	01 90       	ld	r0, Z+
    32ac:	f0 81       	ld	r31, Z
    32ae:	e0 2d       	mov	r30, r0
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	fe 01       	movw	r30, r28
    32b4:	ea 5a       	subi	r30, 0xAA	; 170
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	01 90       	ld	r0, Z+
    32ba:	f0 81       	ld	r31, Z
    32bc:	e0 2d       	mov	r30, r0
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	69 2f       	mov	r22, r25
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
			/*Group = Command*/
			DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    32c8:	fe 01       	movw	r30, r28
    32ca:	ea 5a       	subi	r30, 0xAA	; 170
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	01 90       	ld	r0, Z+
    32d0:	f0 81       	ld	r31, Z
    32d2:	e0 2d       	mov	r30, r0
    32d4:	86 81       	ldd	r24, Z+6	; 0x06
    32d6:	fe 01       	movw	r30, r28
    32d8:	eb 5a       	subi	r30, 0xAB	; 171
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	60 81       	ld	r22, Z
    32de:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
			/*Enable*/
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    32e2:	fe 01       	movw	r30, r28
    32e4:	ea 5a       	subi	r30, 0xAA	; 170
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	01 90       	ld	r0, Z+
    32ea:	f0 81       	ld	r31, Z
    32ec:	e0 2d       	mov	r30, r0
    32ee:	84 81       	ldd	r24, Z+4	; 0x04
    32f0:	fe 01       	movw	r30, r28
    32f2:	ea 5a       	subi	r30, 0xAA	; 170
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	01 90       	ld	r0, Z+
    32f8:	f0 81       	ld	r31, Z
    32fa:	e0 2d       	mov	r30, r0
    32fc:	95 81       	ldd	r25, Z+5	; 0x05
    32fe:	69 2f       	mov	r22, r25
    3300:	41 e0       	ldi	r20, 0x01	; 1
    3302:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	a0 e8       	ldi	r26, 0x80	; 128
    330c:	bf e3       	ldi	r27, 0x3F	; 63
    330e:	8d ab       	std	Y+53, r24	; 0x35
    3310:	9e ab       	std	Y+54, r25	; 0x36
    3312:	af ab       	std	Y+55, r26	; 0x37
    3314:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3316:	6d a9       	ldd	r22, Y+53	; 0x35
    3318:	7e a9       	ldd	r23, Y+54	; 0x36
    331a:	8f a9       	ldd	r24, Y+55	; 0x37
    331c:	98 ad       	ldd	r25, Y+56	; 0x38
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4a ef       	ldi	r20, 0xFA	; 250
    3324:	54 e4       	ldi	r21, 0x44	; 68
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	89 ab       	std	Y+49, r24	; 0x31
    3330:	9a ab       	std	Y+50, r25	; 0x32
    3332:	ab ab       	std	Y+51, r26	; 0x33
    3334:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3336:	69 a9       	ldd	r22, Y+49	; 0x31
    3338:	7a a9       	ldd	r23, Y+50	; 0x32
    333a:	8b a9       	ldd	r24, Y+51	; 0x33
    333c:	9c a9       	ldd	r25, Y+52	; 0x34
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e8       	ldi	r20, 0x80	; 128
    3344:	5f e3       	ldi	r21, 0x3F	; 63
    3346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    334a:	88 23       	and	r24, r24
    334c:	2c f4       	brge	.+10     	; 0x3358 <LCD_VoidSendChar+0x4b0>
		__ticks = 1;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	98 ab       	std	Y+48, r25	; 0x30
    3354:	8f a7       	std	Y+47, r24	; 0x2f
    3356:	3f c0       	rjmp	.+126    	; 0x33d6 <LCD_VoidSendChar+0x52e>
	else if (__tmp > 65535)
    3358:	69 a9       	ldd	r22, Y+49	; 0x31
    335a:	7a a9       	ldd	r23, Y+50	; 0x32
    335c:	8b a9       	ldd	r24, Y+51	; 0x33
    335e:	9c a9       	ldd	r25, Y+52	; 0x34
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	3f ef       	ldi	r19, 0xFF	; 255
    3364:	4f e7       	ldi	r20, 0x7F	; 127
    3366:	57 e4       	ldi	r21, 0x47	; 71
    3368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336c:	18 16       	cp	r1, r24
    336e:	4c f5       	brge	.+82     	; 0x33c2 <LCD_VoidSendChar+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	6d a9       	ldd	r22, Y+53	; 0x35
    3372:	7e a9       	ldd	r23, Y+54	; 0x36
    3374:	8f a9       	ldd	r24, Y+55	; 0x37
    3376:	98 ad       	ldd	r25, Y+56	; 0x38
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	98 ab       	std	Y+48, r25	; 0x30
    3396:	8f a7       	std	Y+47, r24	; 0x2f
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <LCD_VoidSendChar+0x510>
    339a:	88 ec       	ldi	r24, 0xC8	; 200
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	9e a7       	std	Y+46, r25	; 0x2e
    33a0:	8d a7       	std	Y+45, r24	; 0x2d
    33a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    33a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <LCD_VoidSendChar+0x4fe>
    33aa:	9e a7       	std	Y+46, r25	; 0x2e
    33ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b0:	98 a9       	ldd	r25, Y+48	; 0x30
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	98 ab       	std	Y+48, r25	; 0x30
    33b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ba:	98 a9       	ldd	r25, Y+48	; 0x30
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	69 f7       	brne	.-38     	; 0x339a <LCD_VoidSendChar+0x4f2>
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <LCD_VoidSendChar+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c2:	69 a9       	ldd	r22, Y+49	; 0x31
    33c4:	7a a9       	ldd	r23, Y+50	; 0x32
    33c6:	8b a9       	ldd	r24, Y+51	; 0x33
    33c8:	9c a9       	ldd	r25, Y+52	; 0x34
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	98 ab       	std	Y+48, r25	; 0x30
    33d4:	8f a7       	std	Y+47, r24	; 0x2f
    33d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d8:	98 a9       	ldd	r25, Y+48	; 0x30
    33da:	9c a7       	std	Y+44, r25	; 0x2c
    33dc:	8b a7       	std	Y+43, r24	; 0x2b
    33de:	8b a5       	ldd	r24, Y+43	; 0x2b
    33e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <LCD_VoidSendChar+0x53a>
    33e6:	9c a7       	std	Y+44, r25	; 0x2c
    33e8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
			DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    33ea:	fe 01       	movw	r30, r28
    33ec:	ea 5a       	subi	r30, 0xAA	; 170
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	01 90       	ld	r0, Z+
    33f2:	f0 81       	ld	r31, Z
    33f4:	e0 2d       	mov	r30, r0
    33f6:	84 81       	ldd	r24, Z+4	; 0x04
    33f8:	fe 01       	movw	r30, r28
    33fa:	ea 5a       	subi	r30, 0xAA	; 170
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	01 90       	ld	r0, Z+
    3400:	f0 81       	ld	r31, Z
    3402:	e0 2d       	mov	r30, r0
    3404:	95 81       	ldd	r25, Z+5	; 0x05
    3406:	69 2f       	mov	r22, r25
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	a0 e8       	ldi	r26, 0x80	; 128
    3414:	bf e3       	ldi	r27, 0x3F	; 63
    3416:	8f a3       	std	Y+39, r24	; 0x27
    3418:	98 a7       	std	Y+40, r25	; 0x28
    341a:	a9 a7       	std	Y+41, r26	; 0x29
    341c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341e:	6f a1       	ldd	r22, Y+39	; 0x27
    3420:	78 a5       	ldd	r23, Y+40	; 0x28
    3422:	89 a5       	ldd	r24, Y+41	; 0x29
    3424:	9a a5       	ldd	r25, Y+42	; 0x2a
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	4a ef       	ldi	r20, 0xFA	; 250
    342c:	54 e4       	ldi	r21, 0x44	; 68
    342e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	8b a3       	std	Y+35, r24	; 0x23
    3438:	9c a3       	std	Y+36, r25	; 0x24
    343a:	ad a3       	std	Y+37, r26	; 0x25
    343c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    343e:	6b a1       	ldd	r22, Y+35	; 0x23
    3440:	7c a1       	ldd	r23, Y+36	; 0x24
    3442:	8d a1       	ldd	r24, Y+37	; 0x25
    3444:	9e a1       	ldd	r25, Y+38	; 0x26
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e8       	ldi	r20, 0x80	; 128
    344c:	5f e3       	ldi	r21, 0x3F	; 63
    344e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3452:	88 23       	and	r24, r24
    3454:	2c f4       	brge	.+10     	; 0x3460 <LCD_VoidSendChar+0x5b8>
		__ticks = 1;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	9a a3       	std	Y+34, r25	; 0x22
    345c:	89 a3       	std	Y+33, r24	; 0x21
    345e:	3f c0       	rjmp	.+126    	; 0x34de <LCD_VoidSendChar+0x636>
	else if (__tmp > 65535)
    3460:	6b a1       	ldd	r22, Y+35	; 0x23
    3462:	7c a1       	ldd	r23, Y+36	; 0x24
    3464:	8d a1       	ldd	r24, Y+37	; 0x25
    3466:	9e a1       	ldd	r25, Y+38	; 0x26
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	3f ef       	ldi	r19, 0xFF	; 255
    346c:	4f e7       	ldi	r20, 0x7F	; 127
    346e:	57 e4       	ldi	r21, 0x47	; 71
    3470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3474:	18 16       	cp	r1, r24
    3476:	4c f5       	brge	.+82     	; 0x34ca <LCD_VoidSendChar+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3478:	6f a1       	ldd	r22, Y+39	; 0x27
    347a:	78 a5       	ldd	r23, Y+40	; 0x28
    347c:	89 a5       	ldd	r24, Y+41	; 0x29
    347e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e2       	ldi	r20, 0x20	; 32
    3486:	51 e4       	ldi	r21, 0x41	; 65
    3488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	bc 01       	movw	r22, r24
    3492:	cd 01       	movw	r24, r26
    3494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3498:	dc 01       	movw	r26, r24
    349a:	cb 01       	movw	r24, r22
    349c:	9a a3       	std	Y+34, r25	; 0x22
    349e:	89 a3       	std	Y+33, r24	; 0x21
    34a0:	0f c0       	rjmp	.+30     	; 0x34c0 <LCD_VoidSendChar+0x618>
    34a2:	88 ec       	ldi	r24, 0xC8	; 200
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	98 a3       	std	Y+32, r25	; 0x20
    34a8:	8f 8f       	std	Y+31, r24	; 0x1f
    34aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ac:	98 a1       	ldd	r25, Y+32	; 0x20
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <LCD_VoidSendChar+0x606>
    34b2:	98 a3       	std	Y+32, r25	; 0x20
    34b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b6:	89 a1       	ldd	r24, Y+33	; 0x21
    34b8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ba:	01 97       	sbiw	r24, 0x01	; 1
    34bc:	9a a3       	std	Y+34, r25	; 0x22
    34be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c0:	89 a1       	ldd	r24, Y+33	; 0x21
    34c2:	9a a1       	ldd	r25, Y+34	; 0x22
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	69 f7       	brne	.-38     	; 0x34a2 <LCD_VoidSendChar+0x5fa>
    34c8:	14 c0       	rjmp	.+40     	; 0x34f2 <LCD_VoidSendChar+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ca:	6b a1       	ldd	r22, Y+35	; 0x23
    34cc:	7c a1       	ldd	r23, Y+36	; 0x24
    34ce:	8d a1       	ldd	r24, Y+37	; 0x25
    34d0:	9e a1       	ldd	r25, Y+38	; 0x26
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9a a3       	std	Y+34, r25	; 0x22
    34dc:	89 a3       	std	Y+33, r24	; 0x21
    34de:	89 a1       	ldd	r24, Y+33	; 0x21
    34e0:	9a a1       	ldd	r25, Y+34	; 0x22
    34e2:	9e 8f       	std	Y+30, r25	; 0x1e
    34e4:	8d 8f       	std	Y+29, r24	; 0x1d
    34e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	f1 f7       	brne	.-4      	; 0x34ea <LCD_VoidSendChar+0x642>
    34ee:	9e 8f       	std	Y+30, r25	; 0x1e
    34f0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
			SwitchingCounter++;
    34f2:	80 91 7f 01 	lds	r24, 0x017F
    34f6:	8f 5f       	subi	r24, 0xFF	; 255
    34f8:	80 93 7f 01 	sts	0x017F, r24
			SecondLineCounter++;
    34fc:	80 91 7e 01 	lds	r24, 0x017E
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	80 93 7e 01 	sts	0x017E, r24
    3506:	6f c1       	rjmp	.+734    	; 0x37e6 <LCD_VoidSendChar+0x93e>
		}
		else{
			SwitchingCounter=0;
    3508:	10 92 7f 01 	sts	0x017F, r1
			FirstLineCounter=0;
    350c:	10 92 7d 01 	sts	0x017D, r1
			SecondLineCounter=0;
    3510:	10 92 7e 01 	sts	0x017E, r1
    3514:	68 c1       	rjmp	.+720    	; 0x37e6 <LCD_VoidSendChar+0x93e>
			//LCD_VoidSendCommand(0x01,lcd);
		}
	}
	else if(Type->OneLine==YES&&Type->TwoLines==NO){
    3516:	fe 01       	movw	r30, r28
    3518:	e8 5a       	subi	r30, 0xA8	; 168
    351a:	ff 4f       	sbci	r31, 0xFF	; 255
    351c:	01 90       	ld	r0, Z+
    351e:	f0 81       	ld	r31, Z
    3520:	e0 2d       	mov	r30, r0
    3522:	80 81       	ld	r24, Z
    3524:	81 30       	cpi	r24, 0x01	; 1
    3526:	09 f0       	breq	.+2      	; 0x352a <LCD_VoidSendChar+0x682>
    3528:	5e c1       	rjmp	.+700    	; 0x37e6 <LCD_VoidSendChar+0x93e>
    352a:	fe 01       	movw	r30, r28
    352c:	e8 5a       	subi	r30, 0xA8	; 168
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	01 90       	ld	r0, Z+
    3532:	f0 81       	ld	r31, Z
    3534:	e0 2d       	mov	r30, r0
    3536:	81 81       	ldd	r24, Z+1	; 0x01
    3538:	88 23       	and	r24, r24
    353a:	09 f0       	breq	.+2      	; 0x353e <LCD_VoidSendChar+0x696>
    353c:	54 c1       	rjmp	.+680    	; 0x37e6 <LCD_VoidSendChar+0x93e>
			if(SwitchingCounter<16&&Local_Char!='\0'){
    353e:	80 91 7f 01 	lds	r24, 0x017F
    3542:	80 31       	cpi	r24, 0x10	; 16
    3544:	08 f0       	brcs	.+2      	; 0x3548 <LCD_VoidSendChar+0x6a0>
    3546:	4b c1       	rjmp	.+662    	; 0x37de <LCD_VoidSendChar+0x936>
    3548:	fe 01       	movw	r30, r28
    354a:	eb 5a       	subi	r30, 0xAB	; 171
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	88 23       	and	r24, r24
    3552:	09 f4       	brne	.+2      	; 0x3556 <LCD_VoidSendChar+0x6ae>
    3554:	44 c1       	rjmp	.+648    	; 0x37de <LCD_VoidSendChar+0x936>
				//LCD_VoidGoToXY(0,0,lcd);
				/*RS->LOw*/
				DIO_ErrStateSetPinValue(lcd->RS_group,lcd->RS_pin,DIO_HIGH);
    3556:	fe 01       	movw	r30, r28
    3558:	ea 5a       	subi	r30, 0xAA	; 170
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	01 90       	ld	r0, Z+
    355e:	f0 81       	ld	r31, Z
    3560:	e0 2d       	mov	r30, r0
    3562:	80 81       	ld	r24, Z
    3564:	fe 01       	movw	r30, r28
    3566:	ea 5a       	subi	r30, 0xAA	; 170
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	01 90       	ld	r0, Z+
    356c:	f0 81       	ld	r31, Z
    356e:	e0 2d       	mov	r30, r0
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	69 2f       	mov	r22, r25
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
				/*RW-> LOW*/
				DIO_ErrStateSetPinValue(lcd->RW_group,lcd->RW_pin,DIO_LOW);
    357a:	fe 01       	movw	r30, r28
    357c:	ea 5a       	subi	r30, 0xAA	; 170
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	01 90       	ld	r0, Z+
    3582:	f0 81       	ld	r31, Z
    3584:	e0 2d       	mov	r30, r0
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	fe 01       	movw	r30, r28
    358a:	ea 5a       	subi	r30, 0xAA	; 170
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	01 90       	ld	r0, Z+
    3590:	f0 81       	ld	r31, Z
    3592:	e0 2d       	mov	r30, r0
    3594:	93 81       	ldd	r25, Z+3	; 0x03
    3596:	69 2f       	mov	r22, r25
    3598:	40 e0       	ldi	r20, 0x00	; 0
    359a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
				/*Group = Command*/
				DIO_ErrStateSetPortValue(lcd->Data_group,Local_Char);
    359e:	fe 01       	movw	r30, r28
    35a0:	ea 5a       	subi	r30, 0xAA	; 170
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	01 90       	ld	r0, Z+
    35a6:	f0 81       	ld	r31, Z
    35a8:	e0 2d       	mov	r30, r0
    35aa:	86 81       	ldd	r24, Z+6	; 0x06
    35ac:	fe 01       	movw	r30, r28
    35ae:	eb 5a       	subi	r30, 0xAB	; 171
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <DIO_ErrStateSetPortValue>
				/*Enable*/
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_HIGH);
    35b8:	fe 01       	movw	r30, r28
    35ba:	ea 5a       	subi	r30, 0xAA	; 170
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	01 90       	ld	r0, Z+
    35c0:	f0 81       	ld	r31, Z
    35c2:	e0 2d       	mov	r30, r0
    35c4:	84 81       	ldd	r24, Z+4	; 0x04
    35c6:	fe 01       	movw	r30, r28
    35c8:	ea 5a       	subi	r30, 0xAA	; 170
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	01 90       	ld	r0, Z+
    35ce:	f0 81       	ld	r31, Z
    35d0:	e0 2d       	mov	r30, r0
    35d2:	95 81       	ldd	r25, Z+5	; 0x05
    35d4:	69 2f       	mov	r22, r25
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	a0 ea       	ldi	r26, 0xA0	; 160
    35e2:	b0 e4       	ldi	r27, 0x40	; 64
    35e4:	89 8f       	std	Y+25, r24	; 0x19
    35e6:	9a 8f       	std	Y+26, r25	; 0x1a
    35e8:	ab 8f       	std	Y+27, r26	; 0x1b
    35ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ec:	69 8d       	ldd	r22, Y+25	; 0x19
    35ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	4a ef       	ldi	r20, 0xFA	; 250
    35fa:	54 e4       	ldi	r21, 0x44	; 68
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	8d 8b       	std	Y+21, r24	; 0x15
    3606:	9e 8b       	std	Y+22, r25	; 0x16
    3608:	af 8b       	std	Y+23, r26	; 0x17
    360a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    360c:	6d 89       	ldd	r22, Y+21	; 0x15
    360e:	7e 89       	ldd	r23, Y+22	; 0x16
    3610:	8f 89       	ldd	r24, Y+23	; 0x17
    3612:	98 8d       	ldd	r25, Y+24	; 0x18
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <LCD_VoidSendChar+0x786>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9c 8b       	std	Y+20, r25	; 0x14
    362a:	8b 8b       	std	Y+19, r24	; 0x13
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <LCD_VoidSendChar+0x804>
	else if (__tmp > 65535)
    362e:	6d 89       	ldd	r22, Y+21	; 0x15
    3630:	7e 89       	ldd	r23, Y+22	; 0x16
    3632:	8f 89       	ldd	r24, Y+23	; 0x17
    3634:	98 8d       	ldd	r25, Y+24	; 0x18
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	3f ef       	ldi	r19, 0xFF	; 255
    363a:	4f e7       	ldi	r20, 0x7F	; 127
    363c:	57 e4       	ldi	r21, 0x47	; 71
    363e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3642:	18 16       	cp	r1, r24
    3644:	4c f5       	brge	.+82     	; 0x3698 <LCD_VoidSendChar+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3646:	69 8d       	ldd	r22, Y+25	; 0x19
    3648:	7a 8d       	ldd	r23, Y+26	; 0x1a
    364a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    364c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e2       	ldi	r20, 0x20	; 32
    3654:	51 e4       	ldi	r21, 0x41	; 65
    3656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9c 8b       	std	Y+20, r25	; 0x14
    366c:	8b 8b       	std	Y+19, r24	; 0x13
    366e:	0f c0       	rjmp	.+30     	; 0x368e <LCD_VoidSendChar+0x7e6>
    3670:	88 ec       	ldi	r24, 0xC8	; 200
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9a 8b       	std	Y+18, r25	; 0x12
    3676:	89 8b       	std	Y+17, r24	; 0x11
    3678:	89 89       	ldd	r24, Y+17	; 0x11
    367a:	9a 89       	ldd	r25, Y+18	; 0x12
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <LCD_VoidSendChar+0x7d4>
    3680:	9a 8b       	std	Y+18, r25	; 0x12
    3682:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3684:	8b 89       	ldd	r24, Y+19	; 0x13
    3686:	9c 89       	ldd	r25, Y+20	; 0x14
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	9c 8b       	std	Y+20, r25	; 0x14
    368c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	8b 89       	ldd	r24, Y+19	; 0x13
    3690:	9c 89       	ldd	r25, Y+20	; 0x14
    3692:	00 97       	sbiw	r24, 0x00	; 0
    3694:	69 f7       	brne	.-38     	; 0x3670 <LCD_VoidSendChar+0x7c8>
    3696:	14 c0       	rjmp	.+40     	; 0x36c0 <LCD_VoidSendChar+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3698:	6d 89       	ldd	r22, Y+21	; 0x15
    369a:	7e 89       	ldd	r23, Y+22	; 0x16
    369c:	8f 89       	ldd	r24, Y+23	; 0x17
    369e:	98 8d       	ldd	r25, Y+24	; 0x18
    36a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	9c 8b       	std	Y+20, r25	; 0x14
    36aa:	8b 8b       	std	Y+19, r24	; 0x13
    36ac:	8b 89       	ldd	r24, Y+19	; 0x13
    36ae:	9c 89       	ldd	r25, Y+20	; 0x14
    36b0:	98 8b       	std	Y+16, r25	; 0x10
    36b2:	8f 87       	std	Y+15, r24	; 0x0f
    36b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36b6:	98 89       	ldd	r25, Y+16	; 0x10
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <LCD_VoidSendChar+0x810>
    36bc:	98 8b       	std	Y+16, r25	; 0x10
    36be:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5);
				DIO_ErrStateSetPinValue(lcd->E_group,lcd->E_pin,DIO_LOW);
    36c0:	fe 01       	movw	r30, r28
    36c2:	ea 5a       	subi	r30, 0xAA	; 170
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	01 90       	ld	r0, Z+
    36c8:	f0 81       	ld	r31, Z
    36ca:	e0 2d       	mov	r30, r0
    36cc:	84 81       	ldd	r24, Z+4	; 0x04
    36ce:	fe 01       	movw	r30, r28
    36d0:	ea 5a       	subi	r30, 0xAA	; 170
    36d2:	ff 4f       	sbci	r31, 0xFF	; 255
    36d4:	01 90       	ld	r0, Z+
    36d6:	f0 81       	ld	r31, Z
    36d8:	e0 2d       	mov	r30, r0
    36da:	95 81       	ldd	r25, Z+5	; 0x05
    36dc:	69 2f       	mov	r22, r25
    36de:	40 e0       	ldi	r20, 0x00	; 0
    36e0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a0 ea       	ldi	r26, 0xA0	; 160
    36ea:	b0 e4       	ldi	r27, 0x40	; 64
    36ec:	8b 87       	std	Y+11, r24	; 0x0b
    36ee:	9c 87       	std	Y+12, r25	; 0x0c
    36f0:	ad 87       	std	Y+13, r26	; 0x0d
    36f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	4a ef       	ldi	r20, 0xFA	; 250
    3702:	54 e4       	ldi	r21, 0x44	; 68
    3704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	8f 83       	std	Y+7, r24	; 0x07
    370e:	98 87       	std	Y+8, r25	; 0x08
    3710:	a9 87       	std	Y+9, r26	; 0x09
    3712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3714:	6f 81       	ldd	r22, Y+7	; 0x07
    3716:	78 85       	ldd	r23, Y+8	; 0x08
    3718:	89 85       	ldd	r24, Y+9	; 0x09
    371a:	9a 85       	ldd	r25, Y+10	; 0x0a
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	40 e8       	ldi	r20, 0x80	; 128
    3722:	5f e3       	ldi	r21, 0x3F	; 63
    3724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3728:	88 23       	and	r24, r24
    372a:	2c f4       	brge	.+10     	; 0x3736 <LCD_VoidSendChar+0x88e>
		__ticks = 1;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	9e 83       	std	Y+6, r25	; 0x06
    3732:	8d 83       	std	Y+5, r24	; 0x05
    3734:	3f c0       	rjmp	.+126    	; 0x37b4 <LCD_VoidSendChar+0x90c>
	else if (__tmp > 65535)
    3736:	6f 81       	ldd	r22, Y+7	; 0x07
    3738:	78 85       	ldd	r23, Y+8	; 0x08
    373a:	89 85       	ldd	r24, Y+9	; 0x09
    373c:	9a 85       	ldd	r25, Y+10	; 0x0a
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	3f ef       	ldi	r19, 0xFF	; 255
    3742:	4f e7       	ldi	r20, 0x7F	; 127
    3744:	57 e4       	ldi	r21, 0x47	; 71
    3746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374a:	18 16       	cp	r1, r24
    374c:	4c f5       	brge	.+82     	; 0x37a0 <LCD_VoidSendChar+0x8f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3750:	7c 85       	ldd	r23, Y+12	; 0x0c
    3752:	8d 85       	ldd	r24, Y+13	; 0x0d
    3754:	9e 85       	ldd	r25, Y+14	; 0x0e
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e2       	ldi	r20, 0x20	; 32
    375c:	51 e4       	ldi	r21, 0x41	; 65
    375e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	9e 83       	std	Y+6, r25	; 0x06
    3774:	8d 83       	std	Y+5, r24	; 0x05
    3776:	0f c0       	rjmp	.+30     	; 0x3796 <LCD_VoidSendChar+0x8ee>
    3778:	88 ec       	ldi	r24, 0xC8	; 200
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	9c 83       	std	Y+4, r25	; 0x04
    377e:	8b 83       	std	Y+3, r24	; 0x03
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	9c 81       	ldd	r25, Y+4	; 0x04
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <LCD_VoidSendChar+0x8dc>
    3788:	9c 83       	std	Y+4, r25	; 0x04
    378a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378c:	8d 81       	ldd	r24, Y+5	; 0x05
    378e:	9e 81       	ldd	r25, Y+6	; 0x06
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	9e 83       	std	Y+6, r25	; 0x06
    3794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	9e 81       	ldd	r25, Y+6	; 0x06
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	69 f7       	brne	.-38     	; 0x3778 <LCD_VoidSendChar+0x8d0>
    379e:	14 c0       	rjmp	.+40     	; 0x37c8 <LCD_VoidSendChar+0x920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a0:	6f 81       	ldd	r22, Y+7	; 0x07
    37a2:	78 85       	ldd	r23, Y+8	; 0x08
    37a4:	89 85       	ldd	r24, Y+9	; 0x09
    37a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
    37b4:	8d 81       	ldd	r24, Y+5	; 0x05
    37b6:	9e 81       	ldd	r25, Y+6	; 0x06
    37b8:	9a 83       	std	Y+2, r25	; 0x02
    37ba:	89 83       	std	Y+1, r24	; 0x01
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <LCD_VoidSendChar+0x918>
    37c4:	9a 83       	std	Y+2, r25	; 0x02
    37c6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5);
				SwitchingCounter++;
    37c8:	80 91 7f 01 	lds	r24, 0x017F
    37cc:	8f 5f       	subi	r24, 0xFF	; 255
    37ce:	80 93 7f 01 	sts	0x017F, r24
				FirstLineCounter++;
    37d2:	80 91 7d 01 	lds	r24, 0x017D
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	80 93 7d 01 	sts	0x017D, r24
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <LCD_VoidSendChar+0x93e>
			}
			else{
				FirstLineCounter=0;
    37de:	10 92 7d 01 	sts	0x017D, r1
				SwitchingCounter=0;
    37e2:	10 92 7f 01 	sts	0x017F, r1
				//LCD_VoidSendCommand(0x01,lcd);
			}
		}
	return 0;
    37e6:	80 e0       	ldi	r24, 0x00	; 0

}
    37e8:	c7 5a       	subi	r28, 0xA7	; 167
    37ea:	df 4f       	sbci	r29, 0xFF	; 255
    37ec:	0f b6       	in	r0, 0x3f	; 63
    37ee:	f8 94       	cli
    37f0:	de bf       	out	0x3e, r29	; 62
    37f2:	0f be       	out	0x3f, r0	; 63
    37f4:	cd bf       	out	0x3d, r28	; 61
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	08 95       	ret

00003800 <LCD_VoidInit>:
void LCD_VoidInit(LCD_Info *lcd){
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	cd b7       	in	r28, 0x3d	; 61
    3806:	de b7       	in	r29, 0x3e	; 62
    3808:	ea 97       	sbiw	r28, 0x3a	; 58
    380a:	0f b6       	in	r0, 0x3f	; 63
    380c:	f8 94       	cli
    380e:	de bf       	out	0x3e, r29	; 62
    3810:	0f be       	out	0x3f, r0	; 63
    3812:	cd bf       	out	0x3d, r28	; 61
    3814:	9a af       	std	Y+58, r25	; 0x3a
    3816:	89 af       	std	Y+57, r24	; 0x39
	/*Set Directions*/
	DIO_ErrStateSetPinDirection(lcd->RS_group,lcd->RS_pin,DIO_OUT);
    3818:	e9 ad       	ldd	r30, Y+57	; 0x39
    381a:	fa ad       	ldd	r31, Y+58	; 0x3a
    381c:	80 81       	ld	r24, Z
    381e:	e9 ad       	ldd	r30, Y+57	; 0x39
    3820:	fa ad       	ldd	r31, Y+58	; 0x3a
    3822:	91 81       	ldd	r25, Z+1	; 0x01
    3824:	69 2f       	mov	r22, r25
    3826:	41 e0       	ldi	r20, 0x01	; 1
    3828:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->RW_group,lcd->RW_pin,DIO_OUT);
    382c:	e9 ad       	ldd	r30, Y+57	; 0x39
    382e:	fa ad       	ldd	r31, Y+58	; 0x3a
    3830:	82 81       	ldd	r24, Z+2	; 0x02
    3832:	e9 ad       	ldd	r30, Y+57	; 0x39
    3834:	fa ad       	ldd	r31, Y+58	; 0x3a
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	69 2f       	mov	r22, r25
    383a:	41 e0       	ldi	r20, 0x01	; 1
    383c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetPinDirection(lcd->E_group,lcd->E_pin,DIO_OUT);
    3840:	e9 ad       	ldd	r30, Y+57	; 0x39
    3842:	fa ad       	ldd	r31, Y+58	; 0x3a
    3844:	84 81       	ldd	r24, Z+4	; 0x04
    3846:	e9 ad       	ldd	r30, Y+57	; 0x39
    3848:	fa ad       	ldd	r31, Y+58	; 0x3a
    384a:	95 81       	ldd	r25, Z+5	; 0x05
    384c:	69 2f       	mov	r22, r25
    384e:	41 e0       	ldi	r20, 0x01	; 1
    3850:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
	DIO_ErrStateSetGroupDirection(lcd->Data_group,0xFF);
    3854:	e9 ad       	ldd	r30, Y+57	; 0x39
    3856:	fa ad       	ldd	r31, Y+58	; 0x3a
    3858:	86 81       	ldd	r24, Z+6	; 0x06
    385a:	6f ef       	ldi	r22, 0xFF	; 255
    385c:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_ErrStateSetGroupDirection>
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	ac e5       	ldi	r26, 0x5C	; 92
    3866:	b2 e4       	ldi	r27, 0x42	; 66
    3868:	8d ab       	std	Y+53, r24	; 0x35
    386a:	9e ab       	std	Y+54, r25	; 0x36
    386c:	af ab       	std	Y+55, r26	; 0x37
    386e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3870:	6d a9       	ldd	r22, Y+53	; 0x35
    3872:	7e a9       	ldd	r23, Y+54	; 0x36
    3874:	8f a9       	ldd	r24, Y+55	; 0x37
    3876:	98 ad       	ldd	r25, Y+56	; 0x38
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	30 e0       	ldi	r19, 0x00	; 0
    387c:	4a ef       	ldi	r20, 0xFA	; 250
    387e:	54 e4       	ldi	r21, 0x44	; 68
    3880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3884:	dc 01       	movw	r26, r24
    3886:	cb 01       	movw	r24, r22
    3888:	89 ab       	std	Y+49, r24	; 0x31
    388a:	9a ab       	std	Y+50, r25	; 0x32
    388c:	ab ab       	std	Y+51, r26	; 0x33
    388e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3890:	69 a9       	ldd	r22, Y+49	; 0x31
    3892:	7a a9       	ldd	r23, Y+50	; 0x32
    3894:	8b a9       	ldd	r24, Y+51	; 0x33
    3896:	9c a9       	ldd	r25, Y+52	; 0x34
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	40 e8       	ldi	r20, 0x80	; 128
    389e:	5f e3       	ldi	r21, 0x3F	; 63
    38a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38a4:	88 23       	and	r24, r24
    38a6:	2c f4       	brge	.+10     	; 0x38b2 <LCD_VoidInit+0xb2>
		__ticks = 1;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	98 ab       	std	Y+48, r25	; 0x30
    38ae:	8f a7       	std	Y+47, r24	; 0x2f
    38b0:	3f c0       	rjmp	.+126    	; 0x3930 <LCD_VoidInit+0x130>
	else if (__tmp > 65535)
    38b2:	69 a9       	ldd	r22, Y+49	; 0x31
    38b4:	7a a9       	ldd	r23, Y+50	; 0x32
    38b6:	8b a9       	ldd	r24, Y+51	; 0x33
    38b8:	9c a9       	ldd	r25, Y+52	; 0x34
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	3f ef       	ldi	r19, 0xFF	; 255
    38be:	4f e7       	ldi	r20, 0x7F	; 127
    38c0:	57 e4       	ldi	r21, 0x47	; 71
    38c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c6:	18 16       	cp	r1, r24
    38c8:	4c f5       	brge	.+82     	; 0x391c <LCD_VoidInit+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ca:	6d a9       	ldd	r22, Y+53	; 0x35
    38cc:	7e a9       	ldd	r23, Y+54	; 0x36
    38ce:	8f a9       	ldd	r24, Y+55	; 0x37
    38d0:	98 ad       	ldd	r25, Y+56	; 0x38
    38d2:	20 e0       	ldi	r18, 0x00	; 0
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	40 e2       	ldi	r20, 0x20	; 32
    38d8:	51 e4       	ldi	r21, 0x41	; 65
    38da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	98 ab       	std	Y+48, r25	; 0x30
    38f0:	8f a7       	std	Y+47, r24	; 0x2f
    38f2:	0f c0       	rjmp	.+30     	; 0x3912 <LCD_VoidInit+0x112>
    38f4:	88 ec       	ldi	r24, 0xC8	; 200
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9e a7       	std	Y+46, r25	; 0x2e
    38fa:	8d a7       	std	Y+45, r24	; 0x2d
    38fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    38fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <LCD_VoidInit+0x100>
    3904:	9e a7       	std	Y+46, r25	; 0x2e
    3906:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3908:	8f a5       	ldd	r24, Y+47	; 0x2f
    390a:	98 a9       	ldd	r25, Y+48	; 0x30
    390c:	01 97       	sbiw	r24, 0x01	; 1
    390e:	98 ab       	std	Y+48, r25	; 0x30
    3910:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3912:	8f a5       	ldd	r24, Y+47	; 0x2f
    3914:	98 a9       	ldd	r25, Y+48	; 0x30
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	69 f7       	brne	.-38     	; 0x38f4 <LCD_VoidInit+0xf4>
    391a:	14 c0       	rjmp	.+40     	; 0x3944 <LCD_VoidInit+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    391c:	69 a9       	ldd	r22, Y+49	; 0x31
    391e:	7a a9       	ldd	r23, Y+50	; 0x32
    3920:	8b a9       	ldd	r24, Y+51	; 0x33
    3922:	9c a9       	ldd	r25, Y+52	; 0x34
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	98 ab       	std	Y+48, r25	; 0x30
    392e:	8f a7       	std	Y+47, r24	; 0x2f
    3930:	8f a5       	ldd	r24, Y+47	; 0x2f
    3932:	98 a9       	ldd	r25, Y+48	; 0x30
    3934:	9c a7       	std	Y+44, r25	; 0x2c
    3936:	8b a7       	std	Y+43, r24	; 0x2b
    3938:	8b a5       	ldd	r24, Y+43	; 0x2b
    393a:	9c a5       	ldd	r25, Y+44	; 0x2c
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <LCD_VoidInit+0x13c>
    3940:	9c a7       	std	Y+44, r25	; 0x2c
    3942:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait more than 30 ms*/
	_delay_ms(55);
	/*Sent function set*/
	LCD_VoidSendCommand(LCD_Set8Bit2Line5x8,lcd);
    3944:	29 ad       	ldd	r18, Y+57	; 0x39
    3946:	3a ad       	ldd	r19, Y+58	; 0x3a
    3948:	88 e3       	ldi	r24, 0x38	; 56
    394a:	b9 01       	movw	r22, r18
    394c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	a0 ea       	ldi	r26, 0xA0	; 160
    3956:	b0 e4       	ldi	r27, 0x40	; 64
    3958:	8f a3       	std	Y+39, r24	; 0x27
    395a:	98 a7       	std	Y+40, r25	; 0x28
    395c:	a9 a7       	std	Y+41, r26	; 0x29
    395e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3960:	6f a1       	ldd	r22, Y+39	; 0x27
    3962:	78 a5       	ldd	r23, Y+40	; 0x28
    3964:	89 a5       	ldd	r24, Y+41	; 0x29
    3966:	9a a5       	ldd	r25, Y+42	; 0x2a
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	4a ef       	ldi	r20, 0xFA	; 250
    396e:	54 e4       	ldi	r21, 0x44	; 68
    3970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	8b a3       	std	Y+35, r24	; 0x23
    397a:	9c a3       	std	Y+36, r25	; 0x24
    397c:	ad a3       	std	Y+37, r26	; 0x25
    397e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3980:	6b a1       	ldd	r22, Y+35	; 0x23
    3982:	7c a1       	ldd	r23, Y+36	; 0x24
    3984:	8d a1       	ldd	r24, Y+37	; 0x25
    3986:	9e a1       	ldd	r25, Y+38	; 0x26
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e8       	ldi	r20, 0x80	; 128
    398e:	5f e3       	ldi	r21, 0x3F	; 63
    3990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3994:	88 23       	and	r24, r24
    3996:	2c f4       	brge	.+10     	; 0x39a2 <LCD_VoidInit+0x1a2>
		__ticks = 1;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	9a a3       	std	Y+34, r25	; 0x22
    399e:	89 a3       	std	Y+33, r24	; 0x21
    39a0:	3f c0       	rjmp	.+126    	; 0x3a20 <LCD_VoidInit+0x220>
	else if (__tmp > 65535)
    39a2:	6b a1       	ldd	r22, Y+35	; 0x23
    39a4:	7c a1       	ldd	r23, Y+36	; 0x24
    39a6:	8d a1       	ldd	r24, Y+37	; 0x25
    39a8:	9e a1       	ldd	r25, Y+38	; 0x26
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	3f ef       	ldi	r19, 0xFF	; 255
    39ae:	4f e7       	ldi	r20, 0x7F	; 127
    39b0:	57 e4       	ldi	r21, 0x47	; 71
    39b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39b6:	18 16       	cp	r1, r24
    39b8:	4c f5       	brge	.+82     	; 0x3a0c <LCD_VoidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ba:	6f a1       	ldd	r22, Y+39	; 0x27
    39bc:	78 a5       	ldd	r23, Y+40	; 0x28
    39be:	89 a5       	ldd	r24, Y+41	; 0x29
    39c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e2       	ldi	r20, 0x20	; 32
    39c8:	51 e4       	ldi	r21, 0x41	; 65
    39ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	9a a3       	std	Y+34, r25	; 0x22
    39e0:	89 a3       	std	Y+33, r24	; 0x21
    39e2:	0f c0       	rjmp	.+30     	; 0x3a02 <LCD_VoidInit+0x202>
    39e4:	88 ec       	ldi	r24, 0xC8	; 200
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	98 a3       	std	Y+32, r25	; 0x20
    39ea:	8f 8f       	std	Y+31, r24	; 0x1f
    39ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39ee:	98 a1       	ldd	r25, Y+32	; 0x20
    39f0:	01 97       	sbiw	r24, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <LCD_VoidInit+0x1f0>
    39f4:	98 a3       	std	Y+32, r25	; 0x20
    39f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f8:	89 a1       	ldd	r24, Y+33	; 0x21
    39fa:	9a a1       	ldd	r25, Y+34	; 0x22
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	9a a3       	std	Y+34, r25	; 0x22
    3a00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a02:	89 a1       	ldd	r24, Y+33	; 0x21
    3a04:	9a a1       	ldd	r25, Y+34	; 0x22
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	69 f7       	brne	.-38     	; 0x39e4 <LCD_VoidInit+0x1e4>
    3a0a:	14 c0       	rjmp	.+40     	; 0x3a34 <LCD_VoidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3a0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3a10:	8d a1       	ldd	r24, Y+37	; 0x25
    3a12:	9e a1       	ldd	r25, Y+38	; 0x26
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	9a a3       	std	Y+34, r25	; 0x22
    3a1e:	89 a3       	std	Y+33, r24	; 0x21
    3a20:	89 a1       	ldd	r24, Y+33	; 0x21
    3a22:	9a a1       	ldd	r25, Y+34	; 0x22
    3a24:	9e 8f       	std	Y+30, r25	; 0x1e
    3a26:	8d 8f       	std	Y+29, r24	; 0x1d
    3a28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <LCD_VoidInit+0x22c>
    3a30:	9e 8f       	std	Y+30, r25	; 0x1e
    3a32:	8d 8f       	std	Y+29, r24	; 0x1d
	/*WAIT 39us*/
	_delay_ms(5);
	LCD_VoidSendCommand(LCD_CursorON,lcd);
    3a34:	29 ad       	ldd	r18, Y+57	; 0x39
    3a36:	3a ad       	ldd	r19, Y+58	; 0x3a
    3a38:	8e e0       	ldi	r24, 0x0E	; 14
    3a3a:	b9 01       	movw	r22, r18
    3a3c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 ea       	ldi	r26, 0xA0	; 160
    3a46:	b0 e4       	ldi	r27, 0x40	; 64
    3a48:	89 8f       	std	Y+25, r24	; 0x19
    3a4a:	9a 8f       	std	Y+26, r25	; 0x1a
    3a4c:	ab 8f       	std	Y+27, r26	; 0x1b
    3a4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a50:	69 8d       	ldd	r22, Y+25	; 0x19
    3a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	4a ef       	ldi	r20, 0xFA	; 250
    3a5e:	54 e4       	ldi	r21, 0x44	; 68
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	8d 8b       	std	Y+21, r24	; 0x15
    3a6a:	9e 8b       	std	Y+22, r25	; 0x16
    3a6c:	af 8b       	std	Y+23, r26	; 0x17
    3a6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a70:	6d 89       	ldd	r22, Y+21	; 0x15
    3a72:	7e 89       	ldd	r23, Y+22	; 0x16
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	2c f4       	brge	.+10     	; 0x3a92 <LCD_VoidInit+0x292>
		__ticks = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	3f c0       	rjmp	.+126    	; 0x3b10 <LCD_VoidInit+0x310>
	else if (__tmp > 65535)
    3a92:	6d 89       	ldd	r22, Y+21	; 0x15
    3a94:	7e 89       	ldd	r23, Y+22	; 0x16
    3a96:	8f 89       	ldd	r24, Y+23	; 0x17
    3a98:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	4c f5       	brge	.+82     	; 0x3afc <LCD_VoidInit+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    3aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e2       	ldi	r20, 0x20	; 32
    3ab8:	51 e4       	ldi	r21, 0x41	; 65
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	9c 8b       	std	Y+20, r25	; 0x14
    3ad0:	8b 8b       	std	Y+19, r24	; 0x13
    3ad2:	0f c0       	rjmp	.+30     	; 0x3af2 <LCD_VoidInit+0x2f2>
    3ad4:	88 ec       	ldi	r24, 0xC8	; 200
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	9a 8b       	std	Y+18, r25	; 0x12
    3ada:	89 8b       	std	Y+17, r24	; 0x11
    3adc:	89 89       	ldd	r24, Y+17	; 0x11
    3ade:	9a 89       	ldd	r25, Y+18	; 0x12
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <LCD_VoidInit+0x2e0>
    3ae4:	9a 8b       	std	Y+18, r25	; 0x12
    3ae6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aea:	9c 89       	ldd	r25, Y+20	; 0x14
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	9c 8b       	std	Y+20, r25	; 0x14
    3af0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af2:	8b 89       	ldd	r24, Y+19	; 0x13
    3af4:	9c 89       	ldd	r25, Y+20	; 0x14
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <LCD_VoidInit+0x2d4>
    3afa:	14 c0       	rjmp	.+40     	; 0x3b24 <LCD_VoidInit+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afc:	6d 89       	ldd	r22, Y+21	; 0x15
    3afe:	7e 89       	ldd	r23, Y+22	; 0x16
    3b00:	8f 89       	ldd	r24, Y+23	; 0x17
    3b02:	98 8d       	ldd	r25, Y+24	; 0x18
    3b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	9c 8b       	std	Y+20, r25	; 0x14
    3b0e:	8b 8b       	std	Y+19, r24	; 0x13
    3b10:	8b 89       	ldd	r24, Y+19	; 0x13
    3b12:	9c 89       	ldd	r25, Y+20	; 0x14
    3b14:	98 8b       	std	Y+16, r25	; 0x10
    3b16:	8f 87       	std	Y+15, r24	; 0x0f
    3b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1a:	98 89       	ldd	r25, Y+16	; 0x10
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <LCD_VoidInit+0x31c>
    3b20:	98 8b       	std	Y+16, r25	; 0x10
    3b22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*LCD Clear Display*/
	LCD_VoidSendCommand(LCD_ClearDisplay,lcd);
    3b24:	29 ad       	ldd	r18, Y+57	; 0x39
    3b26:	3a ad       	ldd	r19, Y+58	; 0x3a
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	b9 01       	movw	r22, r18
    3b2c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	a0 ea       	ldi	r26, 0xA0	; 160
    3b36:	b0 e4       	ldi	r27, 0x40	; 64
    3b38:	8b 87       	std	Y+11, r24	; 0x0b
    3b3a:	9c 87       	std	Y+12, r25	; 0x0c
    3b3c:	ad 87       	std	Y+13, r26	; 0x0d
    3b3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	4a ef       	ldi	r20, 0xFA	; 250
    3b4e:	54 e4       	ldi	r21, 0x44	; 68
    3b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	8f 83       	std	Y+7, r24	; 0x07
    3b5a:	98 87       	std	Y+8, r25	; 0x08
    3b5c:	a9 87       	std	Y+9, r26	; 0x09
    3b5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b60:	6f 81       	ldd	r22, Y+7	; 0x07
    3b62:	78 85       	ldd	r23, Y+8	; 0x08
    3b64:	89 85       	ldd	r24, Y+9	; 0x09
    3b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b68:	20 e0       	ldi	r18, 0x00	; 0
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	40 e8       	ldi	r20, 0x80	; 128
    3b6e:	5f e3       	ldi	r21, 0x3F	; 63
    3b70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b74:	88 23       	and	r24, r24
    3b76:	2c f4       	brge	.+10     	; 0x3b82 <LCD_VoidInit+0x382>
		__ticks = 1;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	9e 83       	std	Y+6, r25	; 0x06
    3b7e:	8d 83       	std	Y+5, r24	; 0x05
    3b80:	3f c0       	rjmp	.+126    	; 0x3c00 <LCD_VoidInit+0x400>
	else if (__tmp > 65535)
    3b82:	6f 81       	ldd	r22, Y+7	; 0x07
    3b84:	78 85       	ldd	r23, Y+8	; 0x08
    3b86:	89 85       	ldd	r24, Y+9	; 0x09
    3b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	3f ef       	ldi	r19, 0xFF	; 255
    3b8e:	4f e7       	ldi	r20, 0x7F	; 127
    3b90:	57 e4       	ldi	r21, 0x47	; 71
    3b92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b96:	18 16       	cp	r1, r24
    3b98:	4c f5       	brge	.+82     	; 0x3bec <LCD_VoidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba2:	20 e0       	ldi	r18, 0x00	; 0
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	40 e2       	ldi	r20, 0x20	; 32
    3ba8:	51 e4       	ldi	r21, 0x41	; 65
    3baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	bc 01       	movw	r22, r24
    3bb4:	cd 01       	movw	r24, r26
    3bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bba:	dc 01       	movw	r26, r24
    3bbc:	cb 01       	movw	r24, r22
    3bbe:	9e 83       	std	Y+6, r25	; 0x06
    3bc0:	8d 83       	std	Y+5, r24	; 0x05
    3bc2:	0f c0       	rjmp	.+30     	; 0x3be2 <LCD_VoidInit+0x3e2>
    3bc4:	88 ec       	ldi	r24, 0xC8	; 200
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	9c 83       	std	Y+4, r25	; 0x04
    3bca:	8b 83       	std	Y+3, r24	; 0x03
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd0:	01 97       	sbiw	r24, 0x01	; 1
    3bd2:	f1 f7       	brne	.-4      	; 0x3bd0 <LCD_VoidInit+0x3d0>
    3bd4:	9c 83       	std	Y+4, r25	; 0x04
    3bd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bda:	9e 81       	ldd	r25, Y+6	; 0x06
    3bdc:	01 97       	sbiw	r24, 0x01	; 1
    3bde:	9e 83       	std	Y+6, r25	; 0x06
    3be0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be2:	8d 81       	ldd	r24, Y+5	; 0x05
    3be4:	9e 81       	ldd	r25, Y+6	; 0x06
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	69 f7       	brne	.-38     	; 0x3bc4 <LCD_VoidInit+0x3c4>
    3bea:	14 c0       	rjmp	.+40     	; 0x3c14 <LCD_VoidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bec:	6f 81       	ldd	r22, Y+7	; 0x07
    3bee:	78 85       	ldd	r23, Y+8	; 0x08
    3bf0:	89 85       	ldd	r24, Y+9	; 0x09
    3bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	9e 83       	std	Y+6, r25	; 0x06
    3bfe:	8d 83       	std	Y+5, r24	; 0x05
    3c00:	8d 81       	ldd	r24, Y+5	; 0x05
    3c02:	9e 81       	ldd	r25, Y+6	; 0x06
    3c04:	9a 83       	std	Y+2, r25	; 0x02
    3c06:	89 83       	std	Y+1, r24	; 0x01
    3c08:	89 81       	ldd	r24, Y+1	; 0x01
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <LCD_VoidInit+0x40c>
    3c10:	9a 83       	std	Y+2, r25	; 0x02
    3c12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    3c14:	ea 96       	adiw	r28, 0x3a	; 58
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	cf 91       	pop	r28
    3c22:	df 91       	pop	r29
    3c24:	08 95       	ret

00003c26 <LCD_VoidSendString>:

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){
    3c26:	df 93       	push	r29
    3c28:	cf 93       	push	r28
    3c2a:	00 d0       	rcall	.+0      	; 0x3c2c <LCD_VoidSendString+0x6>
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <LCD_VoidSendString+0x8>
    3c2e:	00 d0       	rcall	.+0      	; 0x3c30 <LCD_VoidSendString+0xa>
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	9a 83       	std	Y+2, r25	; 0x02
    3c36:	89 83       	std	Y+1, r24	; 0x01
    3c38:	7c 83       	std	Y+4, r23	; 0x04
    3c3a:	6b 83       	std	Y+3, r22	; 0x03
    3c3c:	5e 83       	std	Y+6, r21	; 0x06
    3c3e:	4d 83       	std	Y+5, r20	; 0x05
    3c40:	0f c0       	rjmp	.+30     	; 0x3c60 <LCD_VoidSendString+0x3a>

	while (*Address_String != '\0') {
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
    3c42:	e9 81       	ldd	r30, Y+1	; 0x01
    3c44:	fa 81       	ldd	r31, Y+2	; 0x02
    3c46:	80 81       	ld	r24, Z
    3c48:	2b 81       	ldd	r18, Y+3	; 0x03
    3c4a:	3c 81       	ldd	r19, Y+4	; 0x04
    3c4c:	4d 81       	ldd	r20, Y+5	; 0x05
    3c4e:	5e 81       	ldd	r21, Y+6	; 0x06
    3c50:	b9 01       	movw	r22, r18
    3c52:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <LCD_VoidSendChar>
		Address_String++; // Move to the next character
    3c56:	89 81       	ldd	r24, Y+1	; 0x01
    3c58:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	9a 83       	std	Y+2, r25	; 0x02
    3c5e:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VoidSendString(u8 *Address_String,LCD_Info *lcd,LCD_Line_Info *Type){

	while (*Address_String != '\0') {
    3c60:	e9 81       	ldd	r30, Y+1	; 0x01
    3c62:	fa 81       	ldd	r31, Y+2	; 0x02
    3c64:	80 81       	ld	r24, Z
    3c66:	88 23       	and	r24, r24
    3c68:	61 f7       	brne	.-40     	; 0x3c42 <LCD_VoidSendString+0x1c>
		// Send the current character to the LCD
		LCD_VoidSendChar(*Address_String, lcd,Type);
		Address_String++; // Move to the next character
	}
}
    3c6a:	26 96       	adiw	r28, 0x06	; 6
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <LCD_VoidGoToXY>:
void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition, LCD_Info *lcd) {
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <LCD_VoidGoToXY+0x6>
    3c82:	00 d0       	rcall	.+0      	; 0x3c84 <LCD_VoidGoToXY+0x8>
    3c84:	0f 92       	push	r0
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	8a 83       	std	Y+2, r24	; 0x02
    3c8c:	6b 83       	std	Y+3, r22	; 0x03
    3c8e:	5d 83       	std	Y+5, r21	; 0x05
    3c90:	4c 83       	std	Y+4, r20	; 0x04
	u8 Address = 0;
    3c92:	19 82       	std	Y+1, r1	; 0x01
	/* Calculate the DDRAM address based on the row and column */
	if(Local_YPosition == 0) {
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	88 23       	and	r24, r24
    3c98:	19 f4       	brne	.+6      	; 0x3ca0 <LCD_VoidGoToXY+0x24>
		Address = LCD_FirstLine + Local_XPosition;
    3c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9c:	89 83       	std	Y+1, r24	; 0x01
    3c9e:	03 c0       	rjmp	.+6      	; 0x3ca6 <LCD_VoidGoToXY+0x2a>
	} else {
		Address = LCD_SecoundLine + Local_XPosition;
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	80 5c       	subi	r24, 0xC0	; 192
    3ca4:	89 83       	std	Y+1, r24	; 0x01
	}
	/* Send the command to set the DDRAM address */
	LCD_VoidSendCommand(LCD_SetAddressDDRAM | Address, lcd);
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	80 68       	ori	r24, 0x80	; 128
    3caa:	2c 81       	ldd	r18, Y+4	; 0x04
    3cac:	3d 81       	ldd	r19, Y+5	; 0x05
    3cae:	b9 01       	movw	r22, r18
    3cb0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
}
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	08 95       	ret

00003cc4 <LCD_VoidSpecialCharacter>:

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
    3cc4:	df 93       	push	r29
    3cc6:	cf 93       	push	r28
    3cc8:	cd b7       	in	r28, 0x3d	; 61
    3cca:	de b7       	in	r29, 0x3e	; 62
    3ccc:	28 97       	sbiw	r28, 0x08	; 8
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	de bf       	out	0x3e, r29	; 62
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	cd bf       	out	0x3d, r28	; 61
    3cd8:	9b 83       	std	Y+3, r25	; 0x03
    3cda:	8a 83       	std	Y+2, r24	; 0x02
    3cdc:	6c 83       	std	Y+4, r22	; 0x04
    3cde:	5e 83       	std	Y+6, r21	; 0x06
    3ce0:	4d 83       	std	Y+5, r20	; 0x05
    3ce2:	38 87       	std	Y+8, r19	; 0x08
    3ce4:	2f 83       	std	Y+7, r18	; 0x07
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
    3ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce8:	88 2f       	mov	r24, r24
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	08 96       	adiw	r24, 0x08	; 8
    3cee:	88 0f       	add	r24, r24
    3cf0:	99 1f       	adc	r25, r25
    3cf2:	88 0f       	add	r24, r24
    3cf4:	99 1f       	adc	r25, r25
    3cf6:	88 0f       	add	r24, r24
    3cf8:	99 1f       	adc	r25, r25
    3cfa:	2d 81       	ldd	r18, Y+5	; 0x05
    3cfc:	3e 81       	ldd	r19, Y+6	; 0x06
    3cfe:	b9 01       	movw	r22, r18
    3d00:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3d04:	19 82       	std	Y+1, r1	; 0x01
    3d06:	13 c0       	rjmp	.+38     	; 0x3d2e <LCD_VoidSpecialCharacter+0x6a>
		LCD_VoidSendChar(pattern[i],lcd,Type);
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	28 2f       	mov	r18, r24
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d10:	9b 81       	ldd	r25, Y+3	; 0x03
    3d12:	fc 01       	movw	r30, r24
    3d14:	e2 0f       	add	r30, r18
    3d16:	f3 1f       	adc	r31, r19
    3d18:	80 81       	ld	r24, Z
    3d1a:	2d 81       	ldd	r18, Y+5	; 0x05
    3d1c:	3e 81       	ldd	r19, Y+6	; 0x06
    3d1e:	4f 81       	ldd	r20, Y+7	; 0x07
    3d20:	58 85       	ldd	r21, Y+8	; 0x08
    3d22:	b9 01       	movw	r22, r18
    3d24:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <LCD_VoidSendChar>
}

void LCD_VoidSpecialCharacter(u8 *pattern,u8 location, LCD_Info *lcd,LCD_Line_Info *Type){
	LCD_VoidSendCommand(LCD_SetAddressCGRAM+(location*8),lcd);
	/* Sending the bitmap to CGRAM */
	for(u8 i=0;i<8;i++){
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	8f 5f       	subi	r24, 0xFF	; 255
    3d2c:	89 83       	std	Y+1, r24	; 0x01
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	88 30       	cpi	r24, 0x08	; 8
    3d32:	50 f3       	brcs	.-44     	; 0x3d08 <LCD_VoidSpecialCharacter+0x44>
		LCD_VoidSendChar(pattern[i],lcd,Type);
	}
	/*	Send the cursor to DDRAM + choose location */
	LCD_VoidGoToXY(1,1,lcd);
    3d34:	2d 81       	ldd	r18, Y+5	; 0x05
    3d36:	3e 81       	ldd	r19, Y+6	; 0x06
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	61 e0       	ldi	r22, 0x01	; 1
    3d3c:	a9 01       	movw	r20, r18
    3d3e:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
	LCD_VoidSendChar(location,lcd,Type);
    3d42:	2d 81       	ldd	r18, Y+5	; 0x05
    3d44:	3e 81       	ldd	r19, Y+6	; 0x06
    3d46:	4f 81       	ldd	r20, Y+7	; 0x07
    3d48:	58 85       	ldd	r21, Y+8	; 0x08
    3d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d4c:	b9 01       	movw	r22, r18
    3d4e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <LCD_VoidSendChar>
}
    3d52:	28 96       	adiw	r28, 0x08	; 8
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	f8 94       	cli
    3d58:	de bf       	out	0x3e, r29	; 62
    3d5a:	0f be       	out	0x3f, r0	; 63
    3d5c:	cd bf       	out	0x3d, r28	; 61
    3d5e:	cf 91       	pop	r28
    3d60:	df 91       	pop	r29
    3d62:	08 95       	ret

00003d64 <LCD_VoidSendInt>:
void LCD_VoidSendInt(u32 Recieved_Number,LCD_Info *lcd,LCD_Line_Info *Type){
    3d64:	df 93       	push	r29
    3d66:	cf 93       	push	r28
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	6c 97       	sbiw	r28, 0x1c	; 28
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	6d 8b       	std	Y+21, r22	; 0x15
    3d7a:	7e 8b       	std	Y+22, r23	; 0x16
    3d7c:	8f 8b       	std	Y+23, r24	; 0x17
    3d7e:	98 8f       	std	Y+24, r25	; 0x18
    3d80:	5a 8f       	std	Y+26, r21	; 0x1a
    3d82:	49 8f       	std	Y+25, r20	; 0x19
    3d84:	3c 8f       	std	Y+28, r19	; 0x1c
    3d86:	2b 8f       	std	Y+27, r18	; 0x1b
	u8 NumAsString[LCD_StringMax]={' '};
    3d88:	8a e0       	ldi	r24, 0x0A	; 10
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	3b 96       	adiw	r30, 0x0b	; 11
    3d8e:	df 01       	movw	r26, r30
    3d90:	98 2f       	mov	r25, r24
    3d92:	1d 92       	st	X+, r1
    3d94:	9a 95       	dec	r25
    3d96:	e9 f7       	brne	.-6      	; 0x3d92 <LCD_VoidSendInt+0x2e>
    3d98:	80 e2       	ldi	r24, 0x20	; 32
    3d9a:	8b 87       	std	Y+11, r24	; 0x0b
	s32 LCD_StringCounter=0,FORCOUNTER;
    3d9c:	1f 82       	std	Y+7, r1	; 0x07
    3d9e:	18 86       	std	Y+8, r1	; 0x08
    3da0:	19 86       	std	Y+9, r1	; 0x09
    3da2:	1a 86       	std	Y+10, r1	; 0x0a
	u8 temp,Err=1;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	89 83       	std	Y+1, r24	; 0x01

	if(Recieved_Number==0){
    3da8:	8d 89       	ldd	r24, Y+21	; 0x15
    3daa:	9e 89       	ldd	r25, Y+22	; 0x16
    3dac:	af 89       	ldd	r26, Y+23	; 0x17
    3dae:	b8 8d       	ldd	r27, Y+24	; 0x18
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	a1 05       	cpc	r26, r1
    3db4:	b1 05       	cpc	r27, r1
    3db6:	09 f0       	breq	.+2      	; 0x3dba <LCD_VoidSendInt+0x56>
    3db8:	52 c0       	rjmp	.+164    	; 0x3e5e <LCD_VoidSendInt+0xfa>
		LCD_VoidSendChar('0',lcd,Type);
    3dba:	29 8d       	ldd	r18, Y+25	; 0x19
    3dbc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3dbe:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3dc0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3dc2:	80 e3       	ldi	r24, 0x30	; 48
    3dc4:	b9 01       	movw	r22, r18
    3dc6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <LCD_VoidSendChar>
    3dca:	52 c0       	rjmp	.+164    	; 0x3e70 <LCD_VoidSendInt+0x10c>
	}
	else{
		while(Recieved_Number!=0)
		{
			temp=Recieved_Number%10;
    3dcc:	8d 89       	ldd	r24, Y+21	; 0x15
    3dce:	9e 89       	ldd	r25, Y+22	; 0x16
    3dd0:	af 89       	ldd	r26, Y+23	; 0x17
    3dd2:	b8 8d       	ldd	r27, Y+24	; 0x18
    3dd4:	2a e0       	ldi	r18, 0x0A	; 10
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e0       	ldi	r20, 0x00	; 0
    3dda:	50 e0       	ldi	r21, 0x00	; 0
    3ddc:	bc 01       	movw	r22, r24
    3dde:	cd 01       	movw	r24, r26
    3de0:	0e 94 74 22 	call	0x44e8	; 0x44e8 <__udivmodsi4>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	8a 83       	std	Y+2, r24	; 0x02
			Recieved_Number=Recieved_Number-temp;
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	40 e0       	ldi	r20, 0x00	; 0
    3df2:	50 e0       	ldi	r21, 0x00	; 0
    3df4:	8d 89       	ldd	r24, Y+21	; 0x15
    3df6:	9e 89       	ldd	r25, Y+22	; 0x16
    3df8:	af 89       	ldd	r26, Y+23	; 0x17
    3dfa:	b8 8d       	ldd	r27, Y+24	; 0x18
    3dfc:	82 1b       	sub	r24, r18
    3dfe:	93 0b       	sbc	r25, r19
    3e00:	a4 0b       	sbc	r26, r20
    3e02:	b5 0b       	sbc	r27, r21
    3e04:	8d 8b       	std	Y+21, r24	; 0x15
    3e06:	9e 8b       	std	Y+22, r25	; 0x16
    3e08:	af 8b       	std	Y+23, r26	; 0x17
    3e0a:	b8 8f       	std	Y+24, r27	; 0x18
			NumAsString[LCD_StringCounter]=temp;
    3e0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e0e:	98 85       	ldd	r25, Y+8	; 0x08
    3e10:	a9 85       	ldd	r26, Y+9	; 0x09
    3e12:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e14:	9e 01       	movw	r18, r28
    3e16:	25 5f       	subi	r18, 0xF5	; 245
    3e18:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1a:	f9 01       	movw	r30, r18
    3e1c:	e8 0f       	add	r30, r24
    3e1e:	f9 1f       	adc	r31, r25
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	80 83       	st	Z, r24
			Recieved_Number=Recieved_Number/10;
    3e24:	8d 89       	ldd	r24, Y+21	; 0x15
    3e26:	9e 89       	ldd	r25, Y+22	; 0x16
    3e28:	af 89       	ldd	r26, Y+23	; 0x17
    3e2a:	b8 8d       	ldd	r27, Y+24	; 0x18
    3e2c:	2a e0       	ldi	r18, 0x0A	; 10
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	50 e0       	ldi	r21, 0x00	; 0
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 74 22 	call	0x44e8	; 0x44e8 <__udivmodsi4>
    3e3c:	da 01       	movw	r26, r20
    3e3e:	c9 01       	movw	r24, r18
    3e40:	8d 8b       	std	Y+21, r24	; 0x15
    3e42:	9e 8b       	std	Y+22, r25	; 0x16
    3e44:	af 8b       	std	Y+23, r26	; 0x17
    3e46:	b8 8f       	std	Y+24, r27	; 0x18
			LCD_StringCounter++;
    3e48:	8f 81       	ldd	r24, Y+7	; 0x07
    3e4a:	98 85       	ldd	r25, Y+8	; 0x08
    3e4c:	a9 85       	ldd	r26, Y+9	; 0x09
    3e4e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e50:	01 96       	adiw	r24, 0x01	; 1
    3e52:	a1 1d       	adc	r26, r1
    3e54:	b1 1d       	adc	r27, r1
    3e56:	8f 83       	std	Y+7, r24	; 0x07
    3e58:	98 87       	std	Y+8, r25	; 0x08
    3e5a:	a9 87       	std	Y+9, r26	; 0x09
    3e5c:	ba 87       	std	Y+10, r27	; 0x0a

	if(Recieved_Number==0){
		LCD_VoidSendChar('0',lcd,Type);
	}
	else{
		while(Recieved_Number!=0)
    3e5e:	8d 89       	ldd	r24, Y+21	; 0x15
    3e60:	9e 89       	ldd	r25, Y+22	; 0x16
    3e62:	af 89       	ldd	r26, Y+23	; 0x17
    3e64:	b8 8d       	ldd	r27, Y+24	; 0x18
    3e66:	00 97       	sbiw	r24, 0x00	; 0
    3e68:	a1 05       	cpc	r26, r1
    3e6a:	b1 05       	cpc	r27, r1
    3e6c:	09 f0       	breq	.+2      	; 0x3e70 <LCD_VoidSendInt+0x10c>
    3e6e:	ae cf       	rjmp	.-164    	; 0x3dcc <LCD_VoidSendInt+0x68>
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    3e70:	8f 81       	ldd	r24, Y+7	; 0x07
    3e72:	98 85       	ldd	r25, Y+8	; 0x08
    3e74:	a9 85       	ldd	r26, Y+9	; 0x09
    3e76:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e78:	01 97       	sbiw	r24, 0x01	; 1
    3e7a:	a1 09       	sbc	r26, r1
    3e7c:	b1 09       	sbc	r27, r1
    3e7e:	8b 83       	std	Y+3, r24	; 0x03
    3e80:	9c 83       	std	Y+4, r25	; 0x04
    3e82:	ad 83       	std	Y+5, r26	; 0x05
    3e84:	be 83       	std	Y+6, r27	; 0x06
    3e86:	1f c0       	rjmp	.+62     	; 0x3ec6 <LCD_VoidSendInt+0x162>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);
    3e88:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8c:	ad 81       	ldd	r26, Y+5	; 0x05
    3e8e:	be 81       	ldd	r27, Y+6	; 0x06
    3e90:	9e 01       	movw	r18, r28
    3e92:	25 5f       	subi	r18, 0xF5	; 245
    3e94:	3f 4f       	sbci	r19, 0xFF	; 255
    3e96:	f9 01       	movw	r30, r18
    3e98:	e8 0f       	add	r30, r24
    3e9a:	f9 1f       	adc	r31, r25
    3e9c:	80 81       	ld	r24, Z
    3e9e:	80 5d       	subi	r24, 0xD0	; 208
    3ea0:	29 8d       	ldd	r18, Y+25	; 0x19
    3ea2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3ea4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3ea6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3ea8:	b9 01       	movw	r22, r18
    3eaa:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <LCD_VoidSendChar>
    3eae:	89 83       	std	Y+1, r24	; 0x01
			Recieved_Number=Recieved_Number/10;
			LCD_StringCounter++;

		}
	}
	for(FORCOUNTER=(LCD_StringCounter-1);FORCOUNTER>=0;FORCOUNTER--){
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	ad 81       	ldd	r26, Y+5	; 0x05
    3eb6:	be 81       	ldd	r27, Y+6	; 0x06
    3eb8:	01 97       	sbiw	r24, 0x01	; 1
    3eba:	a1 09       	sbc	r26, r1
    3ebc:	b1 09       	sbc	r27, r1
    3ebe:	8b 83       	std	Y+3, r24	; 0x03
    3ec0:	9c 83       	std	Y+4, r25	; 0x04
    3ec2:	ad 83       	std	Y+5, r26	; 0x05
    3ec4:	be 83       	std	Y+6, r27	; 0x06
    3ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eca:	ad 81       	ldd	r26, Y+5	; 0x05
    3ecc:	be 81       	ldd	r27, Y+6	; 0x06
    3ece:	bb 23       	and	r27, r27
    3ed0:	dc f6       	brge	.-74     	; 0x3e88 <LCD_VoidSendInt+0x124>
		Err=LCD_VoidSendChar((NumAsString[FORCOUNTER]+48),lcd,Type);

	}
	//LCD_VoidSendChar('\0',lcd,Type);

}
    3ed2:	6c 96       	adiw	r28, 0x1c	; 28
    3ed4:	0f b6       	in	r0, 0x3f	; 63
    3ed6:	f8 94       	cli
    3ed8:	de bf       	out	0x3e, r29	; 62
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	08 95       	ret

00003ee4 <KP_ErrStateInit>:
		{'7','8','9','/'},
		{'4','5','6','*'},
		{'1','2','3','-'},
		{'C','0','=','+'}
};
void KP_ErrStateInit(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO){
    3ee4:	df 93       	push	r29
    3ee6:	cf 93       	push	r28
    3ee8:	00 d0       	rcall	.+0      	; 0x3eea <KP_ErrStateInit+0x6>
    3eea:	00 d0       	rcall	.+0      	; 0x3eec <KP_ErrStateInit+0x8>
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    3ef4:	7c 83       	std	Y+4, r23	; 0x04
    3ef6:	6b 83       	std	Y+3, r22	; 0x03
	//u8 ROW,COL,ReadPin;
	//KPRPORT ROWP=KP_ROW_PORT1;
	//KPCPORT COLP=KP_COL_PORT1;
		DIO_ErrStateSetPinDirection(KP_RPP_INFO->ROW_PORT1,KP_RPP_INFO->ROW_PIN1,DIO_OUT);
    3ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    3efa:	fa 81       	ldd	r31, Y+2	; 0x02
    3efc:	80 81       	ld	r24, Z
    3efe:	e9 81       	ldd	r30, Y+1	; 0x01
    3f00:	fa 81       	ldd	r31, Y+2	; 0x02
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	69 2f       	mov	r22, r25
    3f06:	41 e0       	ldi	r20, 0x01	; 1
    3f08:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_RPP_INFO->ROW_PORT2,KP_RPP_INFO->ROW_PIN2,DIO_OUT);
    3f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f10:	82 81       	ldd	r24, Z+2	; 0x02
    3f12:	e9 81       	ldd	r30, Y+1	; 0x01
    3f14:	fa 81       	ldd	r31, Y+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	69 2f       	mov	r22, r25
    3f1a:	41 e0       	ldi	r20, 0x01	; 1
    3f1c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_RPP_INFO->ROW_PORT3,KP_RPP_INFO->ROW_PIN3,DIO_OUT);
    3f20:	e9 81       	ldd	r30, Y+1	; 0x01
    3f22:	fa 81       	ldd	r31, Y+2	; 0x02
    3f24:	84 81       	ldd	r24, Z+4	; 0x04
    3f26:	e9 81       	ldd	r30, Y+1	; 0x01
    3f28:	fa 81       	ldd	r31, Y+2	; 0x02
    3f2a:	95 81       	ldd	r25, Z+5	; 0x05
    3f2c:	69 2f       	mov	r22, r25
    3f2e:	41 e0       	ldi	r20, 0x01	; 1
    3f30:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_RPP_INFO->ROW_PORT4,KP_RPP_INFO->ROW_PIN4,DIO_OUT);
    3f34:	e9 81       	ldd	r30, Y+1	; 0x01
    3f36:	fa 81       	ldd	r31, Y+2	; 0x02
    3f38:	86 81       	ldd	r24, Z+6	; 0x06
    3f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f3e:	97 81       	ldd	r25, Z+7	; 0x07
    3f40:	69 2f       	mov	r22, r25
    3f42:	41 e0       	ldi	r20, 0x01	; 1
    3f44:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_CPP_INFO->COL_PORT1,KP_CPP_INFO->COL_PIN1,DIO_IN);
    3f48:	eb 81       	ldd	r30, Y+3	; 0x03
    3f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f4c:	80 81       	ld	r24, Z
    3f4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f50:	fc 81       	ldd	r31, Y+4	; 0x04
    3f52:	91 81       	ldd	r25, Z+1	; 0x01
    3f54:	69 2f       	mov	r22, r25
    3f56:	40 e0       	ldi	r20, 0x00	; 0
    3f58:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_CPP_INFO->COL_PORT2,KP_CPP_INFO->COL_PIN2,DIO_IN);
    3f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	eb 81       	ldd	r30, Y+3	; 0x03
    3f64:	fc 81       	ldd	r31, Y+4	; 0x04
    3f66:	93 81       	ldd	r25, Z+3	; 0x03
    3f68:	69 2f       	mov	r22, r25
    3f6a:	40 e0       	ldi	r20, 0x00	; 0
    3f6c:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_CPP_INFO->COL_PORT3,KP_CPP_INFO->COL_PIN3,DIO_IN);
    3f70:	eb 81       	ldd	r30, Y+3	; 0x03
    3f72:	fc 81       	ldd	r31, Y+4	; 0x04
    3f74:	84 81       	ldd	r24, Z+4	; 0x04
    3f76:	eb 81       	ldd	r30, Y+3	; 0x03
    3f78:	fc 81       	ldd	r31, Y+4	; 0x04
    3f7a:	95 81       	ldd	r25, Z+5	; 0x05
    3f7c:	69 2f       	mov	r22, r25
    3f7e:	40 e0       	ldi	r20, 0x00	; 0
    3f80:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinDirection(KP_CPP_INFO->COL_PORT4,KP_CPP_INFO->COL_PIN4,DIO_IN);
    3f84:	eb 81       	ldd	r30, Y+3	; 0x03
    3f86:	fc 81       	ldd	r31, Y+4	; 0x04
    3f88:	86 81       	ldd	r24, Z+6	; 0x06
    3f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3f8e:	97 81       	ldd	r25, Z+7	; 0x07
    3f90:	69 2f       	mov	r22, r25
    3f92:	40 e0       	ldi	r20, 0x00	; 0
    3f94:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
		DIO_ErrStateSetPinValue(KP_RPP_INFO->ROW_PORT1,KP_RPP_INFO->ROW_PIN1,DIO_HIGH);
    3f98:	e9 81       	ldd	r30, Y+1	; 0x01
    3f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f9c:	80 81       	ld	r24, Z
    3f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    3fa2:	91 81       	ldd	r25, Z+1	; 0x01
    3fa4:	69 2f       	mov	r22, r25
    3fa6:	41 e0       	ldi	r20, 0x01	; 1
    3fa8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_RPP_INFO->ROW_PORT2,KP_RPP_INFO->ROW_PIN2,DIO_HIGH);
    3fac:	e9 81       	ldd	r30, Y+1	; 0x01
    3fae:	fa 81       	ldd	r31, Y+2	; 0x02
    3fb0:	82 81       	ldd	r24, Z+2	; 0x02
    3fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	69 2f       	mov	r22, r25
    3fba:	41 e0       	ldi	r20, 0x01	; 1
    3fbc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_RPP_INFO->ROW_PORT3,KP_RPP_INFO->ROW_PIN3,DIO_HIGH);
    3fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc4:	84 81       	ldd	r24, Z+4	; 0x04
    3fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    3fca:	95 81       	ldd	r25, Z+5	; 0x05
    3fcc:	69 2f       	mov	r22, r25
    3fce:	41 e0       	ldi	r20, 0x01	; 1
    3fd0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_RPP_INFO->ROW_PORT4,KP_RPP_INFO->ROW_PIN4,DIO_HIGH);
    3fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    3fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    3fd8:	86 81       	ldd	r24, Z+6	; 0x06
    3fda:	e9 81       	ldd	r30, Y+1	; 0x01
    3fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    3fde:	97 81       	ldd	r25, Z+7	; 0x07
    3fe0:	69 2f       	mov	r22, r25
    3fe2:	41 e0       	ldi	r20, 0x01	; 1
    3fe4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_CPP_INFO->COL_PORT1,KP_CPP_INFO->COL_PIN1,DIO_HIGH);
    3fe8:	eb 81       	ldd	r30, Y+3	; 0x03
    3fea:	fc 81       	ldd	r31, Y+4	; 0x04
    3fec:	80 81       	ld	r24, Z
    3fee:	eb 81       	ldd	r30, Y+3	; 0x03
    3ff0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ff2:	91 81       	ldd	r25, Z+1	; 0x01
    3ff4:	69 2f       	mov	r22, r25
    3ff6:	41 e0       	ldi	r20, 0x01	; 1
    3ff8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_CPP_INFO->COL_PORT2,KP_CPP_INFO->COL_PIN2,DIO_HIGH);
    3ffc:	eb 81       	ldd	r30, Y+3	; 0x03
    3ffe:	fc 81       	ldd	r31, Y+4	; 0x04
    4000:	82 81       	ldd	r24, Z+2	; 0x02
    4002:	eb 81       	ldd	r30, Y+3	; 0x03
    4004:	fc 81       	ldd	r31, Y+4	; 0x04
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	69 2f       	mov	r22, r25
    400a:	41 e0       	ldi	r20, 0x01	; 1
    400c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_CPP_INFO->COL_PORT3,KP_CPP_INFO->COL_PIN3,DIO_HIGH);
    4010:	eb 81       	ldd	r30, Y+3	; 0x03
    4012:	fc 81       	ldd	r31, Y+4	; 0x04
    4014:	84 81       	ldd	r24, Z+4	; 0x04
    4016:	eb 81       	ldd	r30, Y+3	; 0x03
    4018:	fc 81       	ldd	r31, Y+4	; 0x04
    401a:	95 81       	ldd	r25, Z+5	; 0x05
    401c:	69 2f       	mov	r22, r25
    401e:	41 e0       	ldi	r20, 0x01	; 1
    4020:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
		DIO_ErrStateSetPinValue(KP_CPP_INFO->COL_PORT4,KP_CPP_INFO->COL_PIN4,DIO_HIGH);
    4024:	eb 81       	ldd	r30, Y+3	; 0x03
    4026:	fc 81       	ldd	r31, Y+4	; 0x04
    4028:	86 81       	ldd	r24, Z+6	; 0x06
    402a:	eb 81       	ldd	r30, Y+3	; 0x03
    402c:	fc 81       	ldd	r31, Y+4	; 0x04
    402e:	97 81       	ldd	r25, Z+7	; 0x07
    4030:	69 2f       	mov	r22, r25
    4032:	41 e0       	ldi	r20, 0x01	; 1
    4034:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>

}
    4038:	0f 90       	pop	r0
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	0f 90       	pop	r0
    4040:	cf 91       	pop	r28
    4042:	df 91       	pop	r29
    4044:	08 95       	ret

00004046 <KP_ErrStateRead>:
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
    4046:	df 93       	push	r29
    4048:	cf 93       	push	r28
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	69 97       	sbiw	r28, 0x19	; 25
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	9c 8b       	std	Y+20, r25	; 0x14
    405c:	8b 8b       	std	Y+19, r24	; 0x13
    405e:	7e 8b       	std	Y+22, r23	; 0x16
    4060:	6d 8b       	std	Y+21, r22	; 0x15
    4062:	58 8f       	std	Y+24, r21	; 0x18
    4064:	4f 8b       	std	Y+23, r20	; 0x17
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    4066:	19 8a       	std	Y+17, r1	; 0x11
    4068:	c5 c0       	rjmp	.+394    	; 0x41f4 <KP_ErrStateRead+0x1ae>
		DIO_ErrStateSetPinValue(PORT_A,ROW,DIO_LOW);
    406a:	81 e4       	ldi	r24, 0x41	; 65
    406c:	69 89       	ldd	r22, Y+17	; 0x11
    406e:	40 e0       	ldi	r20, 0x00	; 0
    4070:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>

		for(COL=4;COL<8;COL++){
    4074:	84 e0       	ldi	r24, 0x04	; 4
    4076:	88 8b       	std	Y+16, r24	; 0x10
    4078:	b1 c0       	rjmp	.+354    	; 0x41dc <KP_ErrStateRead+0x196>
			ErrVal=DIO_ErrStateReadPinValue(PORT_A,COL,&ReadPin);
    407a:	9e 01       	movw	r18, r28
    407c:	2e 5e       	subi	r18, 0xEE	; 238
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	81 e4       	ldi	r24, 0x41	; 65
    4082:	68 89       	ldd	r22, Y+16	; 0x10
    4084:	a9 01       	movw	r20, r18
    4086:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_ErrStateReadPinValue>
    408a:	8f 87       	std	Y+15, r24	; 0x0f
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	a0 e2       	ldi	r26, 0x20	; 32
    4092:	b1 e4       	ldi	r27, 0x41	; 65
    4094:	8b 87       	std	Y+11, r24	; 0x0b
    4096:	9c 87       	std	Y+12, r25	; 0x0c
    4098:	ad 87       	std	Y+13, r26	; 0x0d
    409a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    409c:	6b 85       	ldd	r22, Y+11	; 0x0b
    409e:	7c 85       	ldd	r23, Y+12	; 0x0c
    40a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    40a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	4a ef       	ldi	r20, 0xFA	; 250
    40aa:	54 e4       	ldi	r21, 0x44	; 68
    40ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	8f 83       	std	Y+7, r24	; 0x07
    40b6:	98 87       	std	Y+8, r25	; 0x08
    40b8:	a9 87       	std	Y+9, r26	; 0x09
    40ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40bc:	6f 81       	ldd	r22, Y+7	; 0x07
    40be:	78 85       	ldd	r23, Y+8	; 0x08
    40c0:	89 85       	ldd	r24, Y+9	; 0x09
    40c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e8       	ldi	r20, 0x80	; 128
    40ca:	5f e3       	ldi	r21, 0x3F	; 63
    40cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40d0:	88 23       	and	r24, r24
    40d2:	2c f4       	brge	.+10     	; 0x40de <KP_ErrStateRead+0x98>
		__ticks = 1;
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	9e 83       	std	Y+6, r25	; 0x06
    40da:	8d 83       	std	Y+5, r24	; 0x05
    40dc:	3f c0       	rjmp	.+126    	; 0x415c <KP_ErrStateRead+0x116>
	else if (__tmp > 65535)
    40de:	6f 81       	ldd	r22, Y+7	; 0x07
    40e0:	78 85       	ldd	r23, Y+8	; 0x08
    40e2:	89 85       	ldd	r24, Y+9	; 0x09
    40e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	3f ef       	ldi	r19, 0xFF	; 255
    40ea:	4f e7       	ldi	r20, 0x7F	; 127
    40ec:	57 e4       	ldi	r21, 0x47	; 71
    40ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40f2:	18 16       	cp	r1, r24
    40f4:	4c f5       	brge	.+82     	; 0x4148 <KP_ErrStateRead+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    40fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	40 e2       	ldi	r20, 0x20	; 32
    4104:	51 e4       	ldi	r21, 0x41	; 65
    4106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410a:	dc 01       	movw	r26, r24
    410c:	cb 01       	movw	r24, r22
    410e:	bc 01       	movw	r22, r24
    4110:	cd 01       	movw	r24, r26
    4112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	9e 83       	std	Y+6, r25	; 0x06
    411c:	8d 83       	std	Y+5, r24	; 0x05
    411e:	0f c0       	rjmp	.+30     	; 0x413e <KP_ErrStateRead+0xf8>
    4120:	88 ec       	ldi	r24, 0xC8	; 200
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	9c 83       	std	Y+4, r25	; 0x04
    4126:	8b 83       	std	Y+3, r24	; 0x03
    4128:	8b 81       	ldd	r24, Y+3	; 0x03
    412a:	9c 81       	ldd	r25, Y+4	; 0x04
    412c:	01 97       	sbiw	r24, 0x01	; 1
    412e:	f1 f7       	brne	.-4      	; 0x412c <KP_ErrStateRead+0xe6>
    4130:	9c 83       	std	Y+4, r25	; 0x04
    4132:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4134:	8d 81       	ldd	r24, Y+5	; 0x05
    4136:	9e 81       	ldd	r25, Y+6	; 0x06
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	9e 83       	std	Y+6, r25	; 0x06
    413c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    413e:	8d 81       	ldd	r24, Y+5	; 0x05
    4140:	9e 81       	ldd	r25, Y+6	; 0x06
    4142:	00 97       	sbiw	r24, 0x00	; 0
    4144:	69 f7       	brne	.-38     	; 0x4120 <KP_ErrStateRead+0xda>
    4146:	14 c0       	rjmp	.+40     	; 0x4170 <KP_ErrStateRead+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4148:	6f 81       	ldd	r22, Y+7	; 0x07
    414a:	78 85       	ldd	r23, Y+8	; 0x08
    414c:	89 85       	ldd	r24, Y+9	; 0x09
    414e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	9e 83       	std	Y+6, r25	; 0x06
    415a:	8d 83       	std	Y+5, r24	; 0x05
    415c:	8d 81       	ldd	r24, Y+5	; 0x05
    415e:	9e 81       	ldd	r25, Y+6	; 0x06
    4160:	9a 83       	std	Y+2, r25	; 0x02
    4162:	89 83       	std	Y+1, r24	; 0x01
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	9a 81       	ldd	r25, Y+2	; 0x02
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <KP_ErrStateRead+0x122>
    416c:	9a 83       	std	Y+2, r25	; 0x02
    416e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			if(ErrVal==DIO_OK&&ReadPin==0){
    4170:	8f 85       	ldd	r24, Y+15	; 0x0f
    4172:	88 23       	and	r24, r24
    4174:	81 f5       	brne	.+96     	; 0x41d6 <KP_ErrStateRead+0x190>
    4176:	8a 89       	ldd	r24, Y+18	; 0x12
    4178:	88 23       	and	r24, r24
    417a:	69 f5       	brne	.+90     	; 0x41d6 <KP_ErrStateRead+0x190>
				//DIO_ErrStateSetPinDirection(PORT_D,PIN_0,DIO_OUT);
				//DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_A,ROW,DIO_HIGH);
    417c:	81 e4       	ldi	r24, 0x41	; 65
    417e:	69 89       	ldd	r22, Y+17	; 0x11
    4180:	41 e0       	ldi	r20, 0x01	; 1
    4182:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
    4186:	89 89       	ldd	r24, Y+17	; 0x11
    4188:	48 2f       	mov	r20, r24
    418a:	50 e0       	ldi	r21, 0x00	; 0
    418c:	88 89       	ldd	r24, Y+16	; 0x10
    418e:	88 2f       	mov	r24, r24
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	9c 01       	movw	r18, r24
    4194:	24 50       	subi	r18, 0x04	; 4
    4196:	30 40       	sbci	r19, 0x00	; 0
    4198:	ca 01       	movw	r24, r20
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	88 0f       	add	r24, r24
    41a0:	99 1f       	adc	r25, r25
    41a2:	82 0f       	add	r24, r18
    41a4:	93 1f       	adc	r25, r19
    41a6:	fc 01       	movw	r30, r24
    41a8:	e2 5d       	subi	r30, 0xD2	; 210
    41aa:	fe 4f       	sbci	r31, 0xFE	; 254
    41ac:	80 81       	ld	r24, Z
    41ae:	ef 89       	ldd	r30, Y+23	; 0x17
    41b0:	f8 8d       	ldd	r31, Y+24	; 0x18
    41b2:	80 83       	st	Z, r24
    41b4:	0b c0       	rjmp	.+22     	; 0x41cc <KP_ErrStateRead+0x186>
				// test could be removed
				while(ReadPin==0){
					DIO_ErrStateReadPinValue(PORT_A,COL,&ReadPin);
    41b6:	9e 01       	movw	r18, r28
    41b8:	2e 5e       	subi	r18, 0xEE	; 238
    41ba:	3f 4f       	sbci	r19, 0xFF	; 255
    41bc:	81 e4       	ldi	r24, 0x41	; 65
    41be:	68 89       	ldd	r22, Y+16	; 0x10
    41c0:	a9 01       	movw	r20, r18
    41c2:	0e 94 21 0c 	call	0x1842	; 0x1842 <DIO_ErrStateReadPinValue>
					if(ReadPin==1)
    41c6:	8a 89       	ldd	r24, Y+18	; 0x12
    41c8:	81 30       	cpi	r24, 0x01	; 1
    41ca:	19 f0       	breq	.+6      	; 0x41d2 <KP_ErrStateRead+0x18c>
				//DIO_ErrStateSetPinValue(PORT_D,PIN_0,DIO_HIGH);
				DIO_ErrStateSetPinValue(PORT_A,ROW,DIO_HIGH);
				//_delay_ms(30);
				*ReadValue =KP_Arr[ROW][COL-4];
				// test could be removed
				while(ReadPin==0){
    41cc:	8a 89       	ldd	r24, Y+18	; 0x12
    41ce:	88 23       	and	r24, r24
    41d0:	91 f3       	breq	.-28     	; 0x41b6 <KP_ErrStateRead+0x170>
					DIO_ErrStateReadPinValue(PORT_A,COL,&ReadPin);
					if(ReadPin==1)
						break;
				}
				return OK;
    41d2:	19 8e       	std	Y+25, r1	; 0x19
    41d4:	15 c0       	rjmp	.+42     	; 0x4200 <KP_ErrStateRead+0x1ba>
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
		DIO_ErrStateSetPinValue(PORT_A,ROW,DIO_LOW);

		for(COL=4;COL<8;COL++){
    41d6:	88 89       	ldd	r24, Y+16	; 0x10
    41d8:	8f 5f       	subi	r24, 0xFF	; 255
    41da:	88 8b       	std	Y+16, r24	; 0x10
    41dc:	88 89       	ldd	r24, Y+16	; 0x10
    41de:	88 30       	cpi	r24, 0x08	; 8
    41e0:	08 f4       	brcc	.+2      	; 0x41e4 <KP_ErrStateRead+0x19e>
    41e2:	4b cf       	rjmp	.-362    	; 0x407a <KP_ErrStateRead+0x34>
						break;
				}
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_A,ROW,DIO_HIGH);
    41e4:	81 e4       	ldi	r24, 0x41	; 65
    41e6:	69 89       	ldd	r22, Y+17	; 0x11
    41e8:	41 e0       	ldi	r20, 0x01	; 1
    41ea:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_ErrStateSetPinValue>
}
KP_ErrState	KP_ErrStateRead(KeypadRow_PORT_PIN *KP_RPP_INFO,KeypadCol_PORT_PIN *KP_CPP_INFO,u8 *ReadValue){
	u8 ROW,COL,ReadPin;
	u8 ErrVal;
	//_delay_ms(100);
	for(ROW=0;ROW<4;ROW++){
    41ee:	89 89       	ldd	r24, Y+17	; 0x11
    41f0:	8f 5f       	subi	r24, 0xFF	; 255
    41f2:	89 8b       	std	Y+17, r24	; 0x11
    41f4:	89 89       	ldd	r24, Y+17	; 0x11
    41f6:	84 30       	cpi	r24, 0x04	; 4
    41f8:	08 f4       	brcc	.+2      	; 0x41fc <KP_ErrStateRead+0x1b6>
    41fa:	37 cf       	rjmp	.-402    	; 0x406a <KP_ErrStateRead+0x24>
				return OK;
			}
		}
		DIO_ErrStateSetPinValue(PORT_A,ROW,DIO_HIGH);
	}
	return Error;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	89 8f       	std	Y+25, r24	; 0x19
    4200:	89 8d       	ldd	r24, Y+25	; 0x19
	//Flag=0;
}
    4202:	69 96       	adiw	r28, 0x19	; 25
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <main>:
LCD_Line_Info type ={YES,NO};LCD_Line_Info type2 ={NO,YES};
LCD_Info lcd={RS_PORT,RS_PIN,RW_PORT,RW_PIN,E_PORT,E_PIN,DATA_PORT};
KeypadRow_PORT_PIN RPP={KP_ROW_PORT1,KP_ROW_PIN1,KP_ROW_PORT2,KP_ROW_PIN2,KP_ROW_PORT3,KP_ROW_PIN3,KP_ROW_PORT4,KP_ROW_PIN4};
KeypadCol_PORT_PIN CPP={KP_COL_PORT1,KP_COL_PIN1,KP_COL_PORT2,KP_COL_PIN2,KP_COL_PORT3,KP_COL_PIN3,KP_COL_PORT4,KP_COL_PIN4};
//Switch_Info PB ={PORT_D,PIN_2,InternalPullUp};
void main(void){
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	00 d0       	rcall	.+0      	; 0x421a <main+0x6>
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
	u8 Reading,errstate;
	KP_ErrStateInit(&RPP,&CPP);
    421e:	89 e4       	ldi	r24, 0x49	; 73
    4220:	91 e0       	ldi	r25, 0x01	; 1
    4222:	21 e5       	ldi	r18, 0x51	; 81
    4224:	31 e0       	ldi	r19, 0x01	; 1
    4226:	b9 01       	movw	r22, r18
    4228:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <KP_ErrStateInit>
	EnableGlobalInterrupt();
    422c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <EnableGlobalInterrupt>
	LCD_VoidInit(&lcd);
    4230:	82 e4       	ldi	r24, 0x42	; 66
    4232:	91 e0       	ldi	r25, 0x01	; 1
    4234:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_VoidInit>
	T2_VoidFPWMInit();
    4238:	0e 94 1a 08 	call	0x1034	; 0x1034 <T2_VoidFPWMInit>

	DIO_ErrStateSetPinDirection(PORT_D,PIN_7,DIO_OUT);
    423c:	84 e4       	ldi	r24, 0x44	; 68
    423e:	67 e0       	ldi	r22, 0x07	; 7
    4240:	41 e0       	ldi	r20, 0x01	; 1
    4242:	0e 94 f7 09 	call	0x13ee	; 0x13ee <DIO_ErrStateSetPinDirection>
	T2_VoidSetOCR2(0);
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
	while(1){
		errstate=KP_ErrStateRead(&RPP,&CPP,&Reading);
    424c:	89 e4       	ldi	r24, 0x49	; 73
    424e:	91 e0       	ldi	r25, 0x01	; 1
    4250:	21 e5       	ldi	r18, 0x51	; 81
    4252:	31 e0       	ldi	r19, 0x01	; 1
    4254:	ae 01       	movw	r20, r28
    4256:	4e 5f       	subi	r20, 0xFE	; 254
    4258:	5f 4f       	sbci	r21, 0xFF	; 255
    425a:	b9 01       	movw	r22, r18
    425c:	0e 94 23 20 	call	0x4046	; 0x4046 <KP_ErrStateRead>
    4260:	89 83       	std	Y+1, r24	; 0x01
		if(errstate==OK){
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	88 23       	and	r24, r24
    4266:	91 f7       	brne	.-28     	; 0x424c <main+0x38>

			if(Reading=='0'){
    4268:	8a 81       	ldd	r24, Y+2	; 0x02
    426a:	80 33       	cpi	r24, 0x30	; 48
    426c:	d1 f4       	brne	.+52     	; 0x42a2 <main+0x8e>
				T2_VoidSetOCR2(0);
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    4274:	22 e4       	ldi	r18, 0x42	; 66
    4276:	31 e0       	ldi	r19, 0x01	; 1
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	b9 01       	movw	r22, r18
    427c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=OFF",&lcd,&type);
    4280:	80 e6       	ldi	r24, 0x60	; 96
    4282:	90 e0       	ldi	r25, 0x00	; 0
    4284:	22 e4       	ldi	r18, 0x42	; 66
    4286:	31 e0       	ldi	r19, 0x01	; 1
    4288:	4e e3       	ldi	r20, 0x3E	; 62
    428a:	51 e0       	ldi	r21, 0x01	; 1
    428c:	b9 01       	movw	r22, r18
    428e:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    4292:	22 e4       	ldi	r18, 0x42	; 66
    4294:	31 e0       	ldi	r19, 0x01	; 1
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	a9 01       	movw	r20, r18
    429c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    42a0:	d5 cf       	rjmp	.-86     	; 0x424c <main+0x38>
			}
			else if(Reading=='1'){
    42a2:	8a 81       	ldd	r24, Y+2	; 0x02
    42a4:	81 33       	cpi	r24, 0x31	; 49
    42a6:	d1 f4       	brne	.+52     	; 0x42dc <main+0xc8>
				//DIO_ErrStateSetPinValue(PORT_D,PIN_7,DIO_IN);
				T2_VoidSetOCR2(246);
    42a8:	86 ef       	ldi	r24, 0xF6	; 246
    42aa:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    42ae:	22 e4       	ldi	r18, 0x42	; 66
    42b0:	31 e0       	ldi	r19, 0x01	; 1
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	b9 01       	movw	r22, r18
    42b6:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=10%",&lcd,&type);
    42ba:	80 e7       	ldi	r24, 0x70	; 112
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	22 e4       	ldi	r18, 0x42	; 66
    42c0:	31 e0       	ldi	r19, 0x01	; 1
    42c2:	4e e3       	ldi	r20, 0x3E	; 62
    42c4:	51 e0       	ldi	r21, 0x01	; 1
    42c6:	b9 01       	movw	r22, r18
    42c8:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    42cc:	22 e4       	ldi	r18, 0x42	; 66
    42ce:	31 e0       	ldi	r19, 0x01	; 1
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	a9 01       	movw	r20, r18
    42d6:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    42da:	b8 cf       	rjmp	.-144    	; 0x424c <main+0x38>
			}
			else if(Reading=='2'){
    42dc:	8a 81       	ldd	r24, Y+2	; 0x02
    42de:	82 33       	cpi	r24, 0x32	; 50
    42e0:	d1 f4       	brne	.+52     	; 0x4316 <main+0x102>
				T2_VoidSetOCR2(247);
    42e2:	87 ef       	ldi	r24, 0xF7	; 247
    42e4:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    42e8:	22 e4       	ldi	r18, 0x42	; 66
    42ea:	31 e0       	ldi	r19, 0x01	; 1
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	b9 01       	movw	r22, r18
    42f0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=20%",&lcd,&type);
    42f4:	80 e8       	ldi	r24, 0x80	; 128
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	22 e4       	ldi	r18, 0x42	; 66
    42fa:	31 e0       	ldi	r19, 0x01	; 1
    42fc:	4e e3       	ldi	r20, 0x3E	; 62
    42fe:	51 e0       	ldi	r21, 0x01	; 1
    4300:	b9 01       	movw	r22, r18
    4302:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    4306:	22 e4       	ldi	r18, 0x42	; 66
    4308:	31 e0       	ldi	r19, 0x01	; 1
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	60 e0       	ldi	r22, 0x00	; 0
    430e:	a9 01       	movw	r20, r18
    4310:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    4314:	9b cf       	rjmp	.-202    	; 0x424c <main+0x38>
			}
			else if(Reading=='3'){
    4316:	8a 81       	ldd	r24, Y+2	; 0x02
    4318:	83 33       	cpi	r24, 0x33	; 51
    431a:	d1 f4       	brne	.+52     	; 0x4350 <main+0x13c>
				T2_VoidSetOCR2(248);
    431c:	88 ef       	ldi	r24, 0xF8	; 248
    431e:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    4322:	22 e4       	ldi	r18, 0x42	; 66
    4324:	31 e0       	ldi	r19, 0x01	; 1
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	b9 01       	movw	r22, r18
    432a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=30%",&lcd,&type);
    432e:	80 e9       	ldi	r24, 0x90	; 144
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	22 e4       	ldi	r18, 0x42	; 66
    4334:	31 e0       	ldi	r19, 0x01	; 1
    4336:	4e e3       	ldi	r20, 0x3E	; 62
    4338:	51 e0       	ldi	r21, 0x01	; 1
    433a:	b9 01       	movw	r22, r18
    433c:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    4340:	22 e4       	ldi	r18, 0x42	; 66
    4342:	31 e0       	ldi	r19, 0x01	; 1
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	60 e0       	ldi	r22, 0x00	; 0
    4348:	a9 01       	movw	r20, r18
    434a:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    434e:	7e cf       	rjmp	.-260    	; 0x424c <main+0x38>
			}
			else if(Reading=='4'){
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	84 33       	cpi	r24, 0x34	; 52
    4354:	d1 f4       	brne	.+52     	; 0x438a <main+0x176>
				T2_VoidSetOCR2(249);
    4356:	89 ef       	ldi	r24, 0xF9	; 249
    4358:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    435c:	22 e4       	ldi	r18, 0x42	; 66
    435e:	31 e0       	ldi	r19, 0x01	; 1
    4360:	81 e0       	ldi	r24, 0x01	; 1
    4362:	b9 01       	movw	r22, r18
    4364:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=40%",&lcd,&type);
    4368:	80 ea       	ldi	r24, 0xA0	; 160
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	22 e4       	ldi	r18, 0x42	; 66
    436e:	31 e0       	ldi	r19, 0x01	; 1
    4370:	4e e3       	ldi	r20, 0x3E	; 62
    4372:	51 e0       	ldi	r21, 0x01	; 1
    4374:	b9 01       	movw	r22, r18
    4376:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    437a:	22 e4       	ldi	r18, 0x42	; 66
    437c:	31 e0       	ldi	r19, 0x01	; 1
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	a9 01       	movw	r20, r18
    4384:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    4388:	61 cf       	rjmp	.-318    	; 0x424c <main+0x38>
			}
			else if(Reading=='5'){
    438a:	8a 81       	ldd	r24, Y+2	; 0x02
    438c:	85 33       	cpi	r24, 0x35	; 53
    438e:	d1 f4       	brne	.+52     	; 0x43c4 <main+0x1b0>
				T2_VoidSetOCR2(250);
    4390:	8a ef       	ldi	r24, 0xFA	; 250
    4392:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    4396:	22 e4       	ldi	r18, 0x42	; 66
    4398:	31 e0       	ldi	r19, 0x01	; 1
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	b9 01       	movw	r22, r18
    439e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=50%",&lcd,&type);
    43a2:	80 eb       	ldi	r24, 0xB0	; 176
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	22 e4       	ldi	r18, 0x42	; 66
    43a8:	31 e0       	ldi	r19, 0x01	; 1
    43aa:	4e e3       	ldi	r20, 0x3E	; 62
    43ac:	51 e0       	ldi	r21, 0x01	; 1
    43ae:	b9 01       	movw	r22, r18
    43b0:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    43b4:	22 e4       	ldi	r18, 0x42	; 66
    43b6:	31 e0       	ldi	r19, 0x01	; 1
    43b8:	80 e0       	ldi	r24, 0x00	; 0
    43ba:	60 e0       	ldi	r22, 0x00	; 0
    43bc:	a9 01       	movw	r20, r18
    43be:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    43c2:	44 cf       	rjmp	.-376    	; 0x424c <main+0x38>
			}
			else if(Reading=='6'){
    43c4:	8a 81       	ldd	r24, Y+2	; 0x02
    43c6:	86 33       	cpi	r24, 0x36	; 54
    43c8:	d1 f4       	brne	.+52     	; 0x43fe <main+0x1ea>
				T2_VoidSetOCR2(251);
    43ca:	8b ef       	ldi	r24, 0xFB	; 251
    43cc:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    43d0:	22 e4       	ldi	r18, 0x42	; 66
    43d2:	31 e0       	ldi	r19, 0x01	; 1
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	b9 01       	movw	r22, r18
    43d8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=60%",&lcd,&type);
    43dc:	80 ec       	ldi	r24, 0xC0	; 192
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	22 e4       	ldi	r18, 0x42	; 66
    43e2:	31 e0       	ldi	r19, 0x01	; 1
    43e4:	4e e3       	ldi	r20, 0x3E	; 62
    43e6:	51 e0       	ldi	r21, 0x01	; 1
    43e8:	b9 01       	movw	r22, r18
    43ea:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    43ee:	22 e4       	ldi	r18, 0x42	; 66
    43f0:	31 e0       	ldi	r19, 0x01	; 1
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	60 e0       	ldi	r22, 0x00	; 0
    43f6:	a9 01       	movw	r20, r18
    43f8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    43fc:	27 cf       	rjmp	.-434    	; 0x424c <main+0x38>
			}
			else if(Reading=='7'){
    43fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4400:	87 33       	cpi	r24, 0x37	; 55
    4402:	d1 f4       	brne	.+52     	; 0x4438 <main+0x224>
				T2_VoidSetOCR2(252);
    4404:	8c ef       	ldi	r24, 0xFC	; 252
    4406:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    440a:	22 e4       	ldi	r18, 0x42	; 66
    440c:	31 e0       	ldi	r19, 0x01	; 1
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	b9 01       	movw	r22, r18
    4412:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=70%",&lcd,&type);
    4416:	80 ed       	ldi	r24, 0xD0	; 208
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	22 e4       	ldi	r18, 0x42	; 66
    441c:	31 e0       	ldi	r19, 0x01	; 1
    441e:	4e e3       	ldi	r20, 0x3E	; 62
    4420:	51 e0       	ldi	r21, 0x01	; 1
    4422:	b9 01       	movw	r22, r18
    4424:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    4428:	22 e4       	ldi	r18, 0x42	; 66
    442a:	31 e0       	ldi	r19, 0x01	; 1
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	60 e0       	ldi	r22, 0x00	; 0
    4430:	a9 01       	movw	r20, r18
    4432:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    4436:	0a cf       	rjmp	.-492    	; 0x424c <main+0x38>
			}
			else if(Reading=='8'){
    4438:	8a 81       	ldd	r24, Y+2	; 0x02
    443a:	88 33       	cpi	r24, 0x38	; 56
    443c:	d1 f4       	brne	.+52     	; 0x4472 <main+0x25e>
				T2_VoidSetOCR2(253);
    443e:	8d ef       	ldi	r24, 0xFD	; 253
    4440:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    4444:	22 e4       	ldi	r18, 0x42	; 66
    4446:	31 e0       	ldi	r19, 0x01	; 1
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	b9 01       	movw	r22, r18
    444c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=80%",&lcd,&type);
    4450:	80 ee       	ldi	r24, 0xE0	; 224
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	22 e4       	ldi	r18, 0x42	; 66
    4456:	31 e0       	ldi	r19, 0x01	; 1
    4458:	4e e3       	ldi	r20, 0x3E	; 62
    445a:	51 e0       	ldi	r21, 0x01	; 1
    445c:	b9 01       	movw	r22, r18
    445e:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    4462:	22 e4       	ldi	r18, 0x42	; 66
    4464:	31 e0       	ldi	r19, 0x01	; 1
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	60 e0       	ldi	r22, 0x00	; 0
    446a:	a9 01       	movw	r20, r18
    446c:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    4470:	ed ce       	rjmp	.-550    	; 0x424c <main+0x38>
			}
			else if(Reading=='9'){
    4472:	8a 81       	ldd	r24, Y+2	; 0x02
    4474:	89 33       	cpi	r24, 0x39	; 57
    4476:	d1 f4       	brne	.+52     	; 0x44ac <main+0x298>
				T2_VoidSetOCR2(254);
    4478:	8e ef       	ldi	r24, 0xFE	; 254
    447a:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    447e:	22 e4       	ldi	r18, 0x42	; 66
    4480:	31 e0       	ldi	r19, 0x01	; 1
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	b9 01       	movw	r22, r18
    4486:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=90%",&lcd,&type);
    448a:	80 ef       	ldi	r24, 0xF0	; 240
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	22 e4       	ldi	r18, 0x42	; 66
    4490:	31 e0       	ldi	r19, 0x01	; 1
    4492:	4e e3       	ldi	r20, 0x3E	; 62
    4494:	51 e0       	ldi	r21, 0x01	; 1
    4496:	b9 01       	movw	r22, r18
    4498:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    449c:	22 e4       	ldi	r18, 0x42	; 66
    449e:	31 e0       	ldi	r19, 0x01	; 1
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	60 e0       	ldi	r22, 0x00	; 0
    44a4:	a9 01       	movw	r20, r18
    44a6:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    44aa:	d0 ce       	rjmp	.-608    	; 0x424c <main+0x38>
			}
			else if(Reading=='+'){
    44ac:	8a 81       	ldd	r24, Y+2	; 0x02
    44ae:	8b 32       	cpi	r24, 0x2B	; 43
    44b0:	09 f0       	breq	.+2      	; 0x44b4 <main+0x2a0>
    44b2:	cc ce       	rjmp	.-616    	; 0x424c <main+0x38>
				T2_VoidSetOCR2(255);
    44b4:	8f ef       	ldi	r24, 0xFF	; 255
    44b6:	0e 94 67 08 	call	0x10ce	; 0x10ce <T2_VoidSetOCR2>
				LCD_VoidSendCommand(LCD_ClearDisplay,&lcd);
    44ba:	22 e4       	ldi	r18, 0x42	; 66
    44bc:	31 e0       	ldi	r19, 0x01	; 1
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	b9 01       	movw	r22, r18
    44c2:	0e 94 22 16 	call	0x2c44	; 0x2c44 <LCD_VoidSendCommand>
				LCD_VoidSendString("Motor Speed=100%",&lcd,&type);
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	91 e0       	ldi	r25, 0x01	; 1
    44ca:	22 e4       	ldi	r18, 0x42	; 66
    44cc:	31 e0       	ldi	r19, 0x01	; 1
    44ce:	4e e3       	ldi	r20, 0x3E	; 62
    44d0:	51 e0       	ldi	r21, 0x01	; 1
    44d2:	b9 01       	movw	r22, r18
    44d4:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_VoidSendString>
				LCD_VoidGoToXY(0,0,&lcd);
    44d8:	22 e4       	ldi	r18, 0x42	; 66
    44da:	31 e0       	ldi	r19, 0x01	; 1
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	60 e0       	ldi	r22, 0x00	; 0
    44e0:	a9 01       	movw	r20, r18
    44e2:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_VoidGoToXY>
    44e6:	b2 ce       	rjmp	.-668    	; 0x424c <main+0x38>

000044e8 <__udivmodsi4>:
    44e8:	a1 e2       	ldi	r26, 0x21	; 33
    44ea:	1a 2e       	mov	r1, r26
    44ec:	aa 1b       	sub	r26, r26
    44ee:	bb 1b       	sub	r27, r27
    44f0:	fd 01       	movw	r30, r26
    44f2:	0d c0       	rjmp	.+26     	; 0x450e <__udivmodsi4_ep>

000044f4 <__udivmodsi4_loop>:
    44f4:	aa 1f       	adc	r26, r26
    44f6:	bb 1f       	adc	r27, r27
    44f8:	ee 1f       	adc	r30, r30
    44fa:	ff 1f       	adc	r31, r31
    44fc:	a2 17       	cp	r26, r18
    44fe:	b3 07       	cpc	r27, r19
    4500:	e4 07       	cpc	r30, r20
    4502:	f5 07       	cpc	r31, r21
    4504:	20 f0       	brcs	.+8      	; 0x450e <__udivmodsi4_ep>
    4506:	a2 1b       	sub	r26, r18
    4508:	b3 0b       	sbc	r27, r19
    450a:	e4 0b       	sbc	r30, r20
    450c:	f5 0b       	sbc	r31, r21

0000450e <__udivmodsi4_ep>:
    450e:	66 1f       	adc	r22, r22
    4510:	77 1f       	adc	r23, r23
    4512:	88 1f       	adc	r24, r24
    4514:	99 1f       	adc	r25, r25
    4516:	1a 94       	dec	r1
    4518:	69 f7       	brne	.-38     	; 0x44f4 <__udivmodsi4_loop>
    451a:	60 95       	com	r22
    451c:	70 95       	com	r23
    451e:	80 95       	com	r24
    4520:	90 95       	com	r25
    4522:	9b 01       	movw	r18, r22
    4524:	ac 01       	movw	r20, r24
    4526:	bd 01       	movw	r22, r26
    4528:	cf 01       	movw	r24, r30
    452a:	08 95       	ret

0000452c <__prologue_saves__>:
    452c:	2f 92       	push	r2
    452e:	3f 92       	push	r3
    4530:	4f 92       	push	r4
    4532:	5f 92       	push	r5
    4534:	6f 92       	push	r6
    4536:	7f 92       	push	r7
    4538:	8f 92       	push	r8
    453a:	9f 92       	push	r9
    453c:	af 92       	push	r10
    453e:	bf 92       	push	r11
    4540:	cf 92       	push	r12
    4542:	df 92       	push	r13
    4544:	ef 92       	push	r14
    4546:	ff 92       	push	r15
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	ca 1b       	sub	r28, r26
    4556:	db 0b       	sbc	r29, r27
    4558:	0f b6       	in	r0, 0x3f	; 63
    455a:	f8 94       	cli
    455c:	de bf       	out	0x3e, r29	; 62
    455e:	0f be       	out	0x3f, r0	; 63
    4560:	cd bf       	out	0x3d, r28	; 61
    4562:	09 94       	ijmp

00004564 <__epilogue_restores__>:
    4564:	2a 88       	ldd	r2, Y+18	; 0x12
    4566:	39 88       	ldd	r3, Y+17	; 0x11
    4568:	48 88       	ldd	r4, Y+16	; 0x10
    456a:	5f 84       	ldd	r5, Y+15	; 0x0f
    456c:	6e 84       	ldd	r6, Y+14	; 0x0e
    456e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4570:	8c 84       	ldd	r8, Y+12	; 0x0c
    4572:	9b 84       	ldd	r9, Y+11	; 0x0b
    4574:	aa 84       	ldd	r10, Y+10	; 0x0a
    4576:	b9 84       	ldd	r11, Y+9	; 0x09
    4578:	c8 84       	ldd	r12, Y+8	; 0x08
    457a:	df 80       	ldd	r13, Y+7	; 0x07
    457c:	ee 80       	ldd	r14, Y+6	; 0x06
    457e:	fd 80       	ldd	r15, Y+5	; 0x05
    4580:	0c 81       	ldd	r16, Y+4	; 0x04
    4582:	1b 81       	ldd	r17, Y+3	; 0x03
    4584:	aa 81       	ldd	r26, Y+2	; 0x02
    4586:	b9 81       	ldd	r27, Y+1	; 0x01
    4588:	ce 0f       	add	r28, r30
    458a:	d1 1d       	adc	r29, r1
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	cd bf       	out	0x3d, r28	; 61
    4596:	ed 01       	movw	r28, r26
    4598:	08 95       	ret

0000459a <_exit>:
    459a:	f8 94       	cli

0000459c <__stop_program>:
    459c:	ff cf       	rjmp	.-2      	; 0x459c <__stop_program>
